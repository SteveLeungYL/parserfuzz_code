CREATE TABLE composer(cid INTEGER PRIMARY KEY, cname TEXT);
CREATE TABLE album( aid INTEGER PRIMARY KEY, aname TEXT );
CREATE TABLE track( tid INTEGER PRIMARY KEY, cid INTEGER REFERENCES composer, aid INTEGER REFERENCES album, title TEXT );
CREATE INDEX track_i1 ON track(cid);
CREATE INDEX track_i2 ON track(aid);
INSERT INTO composer VALUES(1, 'W. A. Mozart');
INSERT INTO composer VALUES(2, 'Beethoven');
INSERT INTO composer VALUES(3, 'Thomas Tallis');
SELECT DISTINCT aname FROM album, composer, track WHERE unlikely(cname LIKE '%bach%') AND composer.cid=track.cid AND album.aid=track.aid;
SELECT DISTINCT aname FROM album, composer, track WHERE cname LIKE '%bach%' AND composer.cid=track.cid AND album.aid=track.aid;
SELECT DISTINCT aname FROM album, composer, track WHERE cname LIKE '%bach%' AND composer.cid=track.cid AND album.aid=track.aid;
SELECT DISTINCT aname FROM album, composer, track WHERE cname LIKE '%bach%' AND unlikely(composer.cid=track.cid) AND unlikely(album.aid=track.aid);
;
CREATE TABLE t1(a, b, c);
CREATE INDEX i1 ON t1(a, b);
INSERT INTO t1 VALUES('abc', 0, 100);
SELECT COUNT ( * ) FROM t1 WHERE a>? ;
SELECT COUNT ( * ) FROM t1 WHERE likelihood(a>?, 0.9) ;
SELECT * FROM t1 WHERE likely(a>?) ;
SELECT * FROM t1 WHERE a=? ;
;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(i int, x, y, z);
INSERT INTO t1 VALUES (1,1,1,1), (2,2,2,2), (3,3,3,3), (4,4,4,4);
DROP TABLE IF EXISTS t2;
CREATE TABLE t2(i int, bool char);
INSERT INTO t2 VALUES(1,'T'), (2,'F');
SELECT count(*) FROM t1 LEFT JOIN t2 ON t1.i=t2.i AND bool='T';
SELECT count(*) FROM t1 LEFT JOIN t2 ON likely(t1.i=t2.i) AND bool='T';
;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(i INT, x, y, z);
INSERT INTO t1 VALUES (1,1,1,1), (2,2,2,2), (3,3,3,3), (4,4,4,4);
DROP TABLE IF EXISTS t2;
CREATE TABLE t2(i INT, i2 CHAR(10));
CREATE TABLE t2(i INT, i2 TEXT);
INSERT INTO t2 VALUES(1,'T'), (2,'F');
SELECT count(*) FROM t1 LEFT JOIN t2 ON t1.i=t2.i AND i='T';
SELECT count(*) FROM t1 LEFT JOIN t2 ON likely(t1.i=t2.i) AND i='T';
;
DROP TABLE IF EXISTS t0;
CREATE TABLE t0 (c0);
INSERT INTO t0(c0) VALUES ('a');
SELECT LIKELY(t0.rowid) <= '0' FROM t0;
;
CREATE TABLE t1(w int, x int, y int);
INSERT INTO t1 VALUES(0, 0, 0);
INSERT INTO t2 SELECT 101, x, (SELECT max(y) FROM t1)+1-y, y FROM t1; 
CREATE INDEX i1w ON t1(w);
CREATE INDEX i1xy ON t1(x, y ASC);
SELECT x, y, w FROM t1 WHERE w=10;
SELECT w, x, y FROM t1 WHERE 11 IS w AND x>2;
SELECT x, y FROM t1 WHERE w=11 AND y<200 AND x>2;
SELECT w FROM t1 WHERE x=3 AND y<100;
SELECT w FROM t1 WHERE x=3 AND y>=121 AND y<=196;
SELECT w FROM t1 WHERE x=3 AND y BETWEEN 121 AND 196;
SELECT w FROM t1 WHERE w<98 AND w==97;
;
CREATE TABLE t1(a, b);
CREATE TABLE t2(p, q);
CREATE TABLE t3(x, y);
INSERT INTO t1 VALUES(111,'one');
INSERT INTO t1 VALUES(222,'two');
INSERT INTO t1 VALUES(333,'three');
INSERT INTO t2 VALUES(1,111);
INSERT INTO t2 VALUES(2,222);
INSERT INTO t2 VALUES(4,444);
CREATE INDEX t2i1 ON t2(p);
INSERT INTO t3 VALUES(999,'nine');
CREATE INDEX t3i1 ON t3(x);
SELECT * FROM t1, t2 LEFT JOIN t3 ON q=x WHERE p=2 AND a=q;
;
CREATE TABLE parent1(parent1key, child1key, Child2key, child3key);
CREATE TABLE child1 ( child1key TEXT, value TEXT );
CREATE UNIQUE INDEX PKIDXChild1 ON child1 ( child1key );
CREATE TABLE child2 ( child2key TEXT, value TEXT );
INSERT INTO parent1(parent1key,child1key,child2key) VALUES ( 1, 'C1.1', 'C2.1' );
INSERT INTO child1 ( child1key, value ) VALUES ( 'C1.1', 'Value for C1.1' );
INSERT INTO child2 ( child2key, value ) VALUES ( 'C2.1', 'Value for C2.1' );
INSERT INTO parent1 ( parent1key, child1key, child2key ) VALUES ( 2, 'C1.2', 'C2.2' );
INSERT INTO child2 ( child2key, value ) VALUES ( 'C2.2', 'Value for C2.2' );
INSERT INTO parent1 ( parent1key, child1key, child2key ) VALUES ( 3, 'C1.3', 'C2.3' );
INSERT INTO child1 ( child1key, value ) VALUES ( 'C1.3', 'Value for C1.3' );
INSERT INTO child2 ( child2key, value ) VALUES ( 'C2.3', 'Value for C2.3' );
SELECT parent1.parent1key, child1.value, child2.value FROM parent1 LEFT OUTER JOIN child1 ON child1.child1key = parent1.child1key INNER JOIN child2 ON child2.child2key = parent1.child2key;
;
