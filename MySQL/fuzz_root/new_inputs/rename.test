   let $wait_counter= `SELECT $wait_timeout * 10`;
while ($wait_counter)   let $current_sessions= query_get_value(SHOW GLOBAL STATUS LIKE 'Threads_connected', Value, 1);
   let $success= `SELECT $current_sessions <= $count_sessions`;
   if ($success)   {      let $wait_counter= 0;
   }   if (!$success)   {      sleep 0.1;
      dec $wait_counter;
   }         SHOW PROCESSLIST;
     if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }  drop table if exists t0,t1,t2,t3,t4;
drop table if exists t0,t5,t6,t7,t8,t9,t1_1,t1_2,t9_1,t9_2;
create table t0 SELECT 1,"table 1";
create table t2 SELECT 2,"table 2";
create table t3 SELECT 3,"table 3";
rename table t0 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
select * from t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
select * from t1;
rename table t1 to t2;
rename table t1 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t2;
show tables like "t_";
rename table t3 to t1, t2 to t3, t1 to t2, t4 to t1;
rename table t3 to t4, t5 to t3, t1 to t2, t4 to t1;
select * from t1;
select * from t2;
select * from t3;
drop table if exists t1,t2,t3,t4;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connection con1;
CREATE TABLE t1 (a int);
CREATE TABLE t3 (a int);
connection con2;
FLUSH TABLES WITH READ LOCK;
connection con1;
send RENAME TABLE t1 TO t2, t3 to t4;
connection con2;
show tables;
UNLOCK TABLES;
connection con1;
reap;
connection con2;
source include/wait_for_query_to_succeed.inc;
show tables;
drop table t2, t4;
disconnect con2;
disconnect con1;
connection default;
create table t1(f1 int);
create view v1 as select * from t1;
alter table v1 rename to v2;
drop view v1;
drop table t1;
SET @orig_innodb_file_per_table= @@innodb_file_per_table;
SET GLOBAL innodb_file_per_table = 0;
create table t1(f1 int) engine=innodb;
rename table test.t1 to nonexistingdb.t2;
drop table t1;
SET GLOBAL innodb_file_per_table = @orig_innodb_file_per_table;
SET @old_lock_wait_timeout= @@lock_wait_timeout;
connect (con1, localhost, root,,);
SET @old_lock_wait_timeout= @@lock_wait_timeout;
connection default;
CREATE TABLE t1 (i INT);
CREATE TABLE t2 (j INT);
LOCK TABLES t1 READ;
RENAME TABLE t2 TO t3;
RENAME TABLE t1 TO t3;
UNLOCK TABLES;
LOCK TABLE t1 WRITE;
RENAME TABLE t1 TO t3;
RENAME TABLE t3 TO t4, t4 TO t5;
UNLOCK TABLES;
SET FOREIGN_KEY_CHECKS=0;
CREATE TABLE t1 (fk INT, FOREIGN KEY(fk) REFERENCES t3(pk));
SET FOREIGN_KEY_CHECKS=1;
CREATE TABLE t0 (pk INT PRIMARY KEY);
LOCK TABLES t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
LOCK TABLES t1 READ, t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
DROP TABLES t1, t3;
LOCK TABLES t5 WRITE;
RENAME TABLE t5 TO t4;
SELECT * FROM t4;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t4;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t5;
connection default;
UNLOCK TABLES;
LOCK TABLES t2 READ, t4 WRITE;
RENAME TABLE t4 TO t5;
SELECT * FROM t2;
INSERT INTO t5 values (1);
UNLOCK TABLES;
LOCK TABLES t2 READ, t5 WRITE, t5 AS a WRITE, t5 AS b READ;
RENAME TABLE t5 TO t4;
SELECT * FROM t4 AS a, t4 AS b;
INSERT INTO t4 VALUES (2);
DELETE a FROM t4 AS a, t4 AS b;
DELETE b FROM t4 AS a, t4 AS b;
UNLOCK TABLES;
LOCK TABLES t2 WRITE, t4 WRITE;
RENAME TABLES t2 TO t0, t4 TO t2, t0 TO t4;
SELECT * FROM t2;
SELECT * FROM t4;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t2;
SELECT * FROM t4;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t0;
connection default;
UNLOCK TABLES;
LOCK TABLE t2 WRITE;
RENAME TABLES t2 TO t1, t1 TO t3, t3 TO t5;
SELECT * FROM t5;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t5;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
connection default;
UNLOCK TABLES;
CREATE TABLE t6(k INT);
LOCK TABLES t4 WRITE, t5 WRITE, t6 WRITE;
RENAME TABLES t4 TO t1, t5 TO t2;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t4;
SELECT * FROM t5;
SELECT * FROM t6;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t6;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t4;
SELECT * FROM t5;
connection default;
UNLOCK TABLES;
DROP TABLES t1, t2, t6;
CREATE TABLE t1 (i INT) ENGINE=InnoDB;
CREATE TABLE t2 (j INT) ENGINE=InnoDB;
CREATE TABLE t3 (k INT) ENGINE=InnoDB;
CREATE TABLE t4 (l INT) ENGINE=InnoDB;
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE;
RENAME TABLES t1 TO t0, t2 TO t4;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
SELECT * FROM t0;
SELECT * FROM t4;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t0;
SELECT * FROM t4;
connection default;
UNLOCK TABLES;
DROP TABLES t1, t2, t3, t4;
CREATE TABLE t1 (i INT);
CREATE TABLE t2 (j INT);
CREATE VIEW v1 AS SELECT * FROM t1;
CREATE VIEW v2 AS SELECT * FROM t2;
LOCK TABLES t1 WRITE;
RENAME TABLE v1 TO v2;
UNLOCK TABLES;
LOCK TABLES v1 READ;
RENAME TABLE v1 TO v2;
UNLOCK TABLES;
LOCK TABLES v1 WRITE;
RENAME TABLE v1 TO v3;
INSERT INTO v3 VALUES (1);
SELECT * FROM v1;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM v3;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM v1;
connection default;
UNLOCK TABLES;
LOCK TABLES v2 WRITE, v3 WRITE;
RENAME TABLE v2 TO v0, v3 TO v2, v0 TO v3;
SELECT * FROM v2;
SELECT * FROM v3;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM v2;
SELECT * FROM v3;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM v0;
connection default;
UNLOCK TABLES;
DROP VIEW v2;
DROP VIEW v3;
DROP TABLES t1, t2;
CREATE TABLE t1 (pk INT PRIMARY KEY);
INSERT INTO t1 VALUES (1);
CREATE TABLE t2 (fk INT, FOREIGN KEY (fk) REFERENCES t1 (pk));
INSERT INTO t2 VALUES (1);
CREATE TABLE t3 (fk INT);
CREATE TABLE t4 (pk INT NOT NULL, UNIQUE(pk));
INSERT INTO t4 VALUES (2);
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE, t4 WRITE;
RENAME TABLES t2 TO t0, t3 TO t2, t0 TO t3;
DELETE FROM t1;
RENAME TABLE t1 TO t0, t4 TO t1, t0 TO t4;
INSERT INTO t3 VALUES (2);
SHOW CREATE TABLE t3;
SELECT unique_constraint_name FROM information_schema.referential_constraints WHERE table_name = 't3';
UNLOCK TABLES;
SET foreign_key_checks = 0;
DROP TABLES t1, t2, t4;
SET foreign_key_checks = 1;
CREATE TABLE t1 (pk INT NOT NULL, UNIQUE(pk));
INSERT INTO t1 VALUES (1), (2);
LOCK TABLES t1 WRITE, t3 WRITE;
RENAME TABLE t1 TO t4;
INSERT INTO t3 VALUES (2);
INSERT INTO t3 VALUES (3);
SELECT unique_constraint_name FROM information_schema.referential_constraints WHERE table_name = 't3';
DELETE FROM t4;
UNLOCK TABLES;
DROP TABLE t3, t4;
connection con1;
disconnect con1;
connection default;
   let $wait_counter= `SELECT $wait_timeout * 10`;
while ($wait_counter)   let $current_sessions= query_get_value(SHOW GLOBAL STATUS LIKE 'Threads_connected', Value, 1);
   let $success= `SELECT $current_sessions <= $count_sessions`;
   if ($success)   {      let $wait_counter= 0;
   }   if (!$success)   {      sleep 0.1;
      dec $wait_counter;
   }         SHOW PROCESSLIST;
     if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }  drop table if exists t0,t1,t2,t3,t4;
drop table if exists t0,t5,t6,t7,t8,t9,t1_1,t1_2,t9_1,t9_2;
create table t0 SELECT 1,"table 1";
create table t2 SELECT 2,"table 2";
create table t3 SELECT 3,"table 3";
rename table t0 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
select * from t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
select * from t1;
rename table t1 to t2;
rename table t1 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t2;
show tables like "t_";
rename table t3 to t1, t2 to t3, t1 to t2, t4 to t1;
rename table t3 to t4, t5 to t3, t1 to t2, t4 to t1;
select * from t1;
select * from t2;
select * from t3;
drop table if exists t1,t2,t3,t4;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connection con1;
CREATE TABLE t1 (a int);
CREATE TABLE t3 (a int);
connection con2;
FLUSH TABLES WITH READ LOCK;
connection con1;
send RENAME TABLE t1 TO t2, t3 to t4;
connection con2;
show tables;
UNLOCK TABLES;
connection con1;
reap;
connection con2;
source include/wait_for_query_to_succeed.inc;
show tables;
drop table t2, t4;
disconnect con2;
disconnect con1;
connection default;
create table t1(f1 int);
create view v1 as select * from t1;
alter table v1 rename to v2;
drop view v1;
drop table t1;
SET @orig_innodb_file_per_table= @@innodb_file_per_table;
SET GLOBAL innodb_file_per_table = 0;
create table t1(f1 int) engine=innodb;
rename table test.t1 to nonexistingdb.t2;
drop table t1;
SET GLOBAL innodb_file_per_table = @orig_innodb_file_per_table;
SET @old_lock_wait_timeout= @@lock_wait_timeout;
connect (con1, localhost, root,,);
SET @old_lock_wait_timeout= @@lock_wait_timeout;
connection default;
CREATE TABLE t1 (i INT);
CREATE TABLE t2 (j INT);
LOCK TABLES t1 READ;
RENAME TABLE t2 TO t3;
RENAME TABLE t1 TO t3;
UNLOCK TABLES;
LOCK TABLE t1 WRITE;
RENAME TABLE t1 TO t3;
RENAME TABLE t3 TO t4, t4 TO t5;
UNLOCK TABLES;
SET FOREIGN_KEY_CHECKS=0;
CREATE TABLE t1 (fk INT, FOREIGN KEY(fk) REFERENCES t3(pk));
SET FOREIGN_KEY_CHECKS=1;
CREATE TABLE t0 (pk INT PRIMARY KEY);
LOCK TABLES t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
LOCK TABLES t1 READ, t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
DROP TABLES t1, t3;
LOCK TABLES t5 WRITE;
RENAME TABLE t5 TO t4;
SELECT * FROM t4;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t4;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t5;
connection default;
UNLOCK TABLES;
LOCK TABLES t2 READ, t4 WRITE;
RENAME TABLE t4 TO t5;
SELECT * FROM t2;
INSERT INTO t5 values (1);
UNLOCK TABLES;
LOCK TABLES t2 READ, t5 WRITE, t5 AS a WRITE, t5 AS b READ;
RENAME TABLE t5 TO t4;
SELECT * FROM t4 AS a, t4 AS b;
INSERT INTO t4 VALUES (2);
DELETE a FROM t4 AS a, t4 AS b;
DELETE b FROM t4 AS a, t4 AS b;
UNLOCK TABLES;
LOCK TABLES t2 WRITE, t4 WRITE;
RENAME TABLES t2 TO t0, t4 TO t2, t0 TO t4;
SELECT * FROM t2;
SELECT * FROM t4;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t2;
SELECT * FROM t4;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t0;
connection default;
UNLOCK TABLES;
LOCK TABLE t2 WRITE;
RENAME TABLES t2 TO t1, t1 TO t3, t3 TO t5;
SELECT * FROM t5;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t5;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
connection default;
UNLOCK TABLES;
CREATE TABLE t6(k INT);
LOCK TABLES t4 WRITE, t5 WRITE, t6 WRITE;
RENAME TABLES t4 TO t1, t5 TO t2;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t4;
SELECT * FROM t5;
SELECT * FROM t6;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t6;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t4;
SELECT * FROM t5;
connection default;
UNLOCK TABLES;
DROP TABLES t1, t2, t6;
CREATE TABLE t1 (i INT) ENGINE=InnoDB;
CREATE TABLE t2 (j INT) ENGINE=InnoDB;
CREATE TABLE t3 (k INT) ENGINE=InnoDB;
CREATE TABLE t4 (l INT) ENGINE=InnoDB;
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE;
RENAME TABLES t1 TO t0, t2 TO t4;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
SELECT * FROM t0;
SELECT * FROM t4;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t0;
SELECT * FROM t4;
connection default;
UNLOCK TABLES;
DROP TABLES t1, t2, t3, t4;
CREATE TABLE t1 (i INT);
CREATE TABLE t2 (j INT);
CREATE VIEW v1 AS SELECT * FROM t1;
CREATE VIEW v2 AS SELECT * FROM t2;
LOCK TABLES t1 WRITE;
RENAME TABLE v1 TO v2;
UNLOCK TABLES;
LOCK TABLES v1 READ;
RENAME TABLE v1 TO v2;
UNLOCK TABLES;
LOCK TABLES v1 WRITE;
RENAME TABLE v1 TO v3;
INSERT INTO v3 VALUES (1);
SELECT * FROM v1;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM v3;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM v1;
connection default;
UNLOCK TABLES;
LOCK TABLES v2 WRITE, v3 WRITE;
RENAME TABLE v2 TO v0, v3 TO v2, v0 TO v3;
SELECT * FROM v2;
SELECT * FROM v3;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM v2;
SELECT * FROM v3;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM v0;
connection default;
UNLOCK TABLES;
DROP VIEW v2;
DROP VIEW v3;
DROP TABLES t1, t2;
CREATE TABLE t1 (pk INT PRIMARY KEY);
INSERT INTO t1 VALUES (1);
CREATE TABLE t2 (fk INT, FOREIGN KEY (fk) REFERENCES t1 (pk));
INSERT INTO t2 VALUES (1);
CREATE TABLE t3 (fk INT);
CREATE TABLE t4 (pk INT NOT NULL, UNIQUE(pk));
INSERT INTO t4 VALUES (2);
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE, t4 WRITE;
RENAME TABLES t2 TO t0, t3 TO t2, t0 TO t3;
DELETE FROM t1;
RENAME TABLE t1 TO t0, t4 TO t1, t0 TO t4;
INSERT INTO t3 VALUES (2);
SHOW CREATE TABLE t3;
SELECT unique_constraint_name FROM information_schema.referential_constraints WHERE table_name = 't3';
UNLOCK TABLES;
SET foreign_key_checks = 0;
DROP TABLES t1, t2, t4;
SET foreign_key_checks = 1;
CREATE TABLE t1 (pk INT NOT NULL, UNIQUE(pk));
INSERT INTO t1 VALUES (1), (2);
LOCK TABLES t1 WRITE, t3 WRITE;
RENAME TABLE t1 TO t4;
INSERT INTO t3 VALUES (2);
INSERT INTO t3 VALUES (3);
SELECT unique_constraint_name FROM information_schema.referential_constraints WHERE table_name = 't3';
DELETE FROM t4;
UNLOCK TABLES;
DROP TABLE t3, t4;
connection con1;
disconnect con1;
connection default;
   let $wait_counter= `SELECT $wait_timeout * 10`;
while ($wait_counter)   let $current_sessions= query_get_value(SHOW GLOBAL STATUS LIKE 'Threads_connected', Value, 1);
   let $success= `SELECT $current_sessions <= $count_sessions`;
   if ($success)   {      let $wait_counter= 0;
   }   if (!$success)   {      sleep 0.1;
      dec $wait_counter;
   }         SHOW PROCESSLIST;
     if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }  drop table if exists t0,t1,t2,t3,t4;
drop table if exists t0,t5,t6,t7,t8,t9,t1_1,t1_2,t9_1,t9_2;
create table t0 SELECT 1,"table 1";
create table t2 SELECT 2,"table 2";
create table t3 SELECT 3,"table 3";
rename table t0 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
select * from t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
select * from t1;
rename table t1 to t2;
rename table t1 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t2;
show tables like "t_";
rename table t3 to t1, t2 to t3, t1 to t2, t4 to t1;
rename table t3 to t4, t5 to t3, t1 to t2, t4 to t1;
select * from t1;
select * from t2;
select * from t3;
drop table if exists t1,t2,t3,t4;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connection con1;
CREATE TABLE t1 (a int);
CREATE TABLE t3 (a int);
connection con2;
FLUSH TABLES WITH READ LOCK;
connection con1;
send RENAME TABLE t1 TO t2, t3 to t4;
connection con2;
show tables;
UNLOCK TABLES;
connection con1;
reap;
connection con2;
source include/wait_for_query_to_succeed.inc;
show tables;
drop table t2, t4;
disconnect con2;
disconnect con1;
connection default;
create table t1(f1 int);
create view v1 as select * from t1;
alter table v1 rename to v2;
drop view v1;
drop table t1;
SET @orig_innodb_file_per_table= @@innodb_file_per_table;
SET GLOBAL innodb_file_per_table = 0;
create table t1(f1 int) engine=innodb;
rename table test.t1 to nonexistingdb.t2;
drop table t1;
SET GLOBAL innodb_file_per_table = @orig_innodb_file_per_table;
SET @old_lock_wait_timeout= @@lock_wait_timeout;
connect (con1, localhost, root,,);
SET @old_lock_wait_timeout= @@lock_wait_timeout;
connection default;
CREATE TABLE t1 (i INT);
CREATE TABLE t2 (j INT);
LOCK TABLES t1 READ;
RENAME TABLE t2 TO t3;
RENAME TABLE t1 TO t3;
UNLOCK TABLES;
LOCK TABLE t1 WRITE;
RENAME TABLE t1 TO t3;
RENAME TABLE t3 TO t4, t4 TO t5;
UNLOCK TABLES;
SET FOREIGN_KEY_CHECKS=0;
CREATE TABLE t1 (fk INT, FOREIGN KEY(fk) REFERENCES t3(pk));
SET FOREIGN_KEY_CHECKS=1;
CREATE TABLE t0 (pk INT PRIMARY KEY);
LOCK TABLES t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
LOCK TABLES t1 READ, t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
DROP TABLES t1, t3;
LOCK TABLES t5 WRITE;
RENAME TABLE t5 TO t4;
SELECT * FROM t4;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t4;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t5;
connection default;
UNLOCK TABLES;
LOCK TABLES t2 READ, t4 WRITE;
RENAME TABLE t4 TO t5;
SELECT * FROM t2;
INSERT INTO t5 values (1);
UNLOCK TABLES;
LOCK TABLES t2 READ, t5 WRITE, t5 AS a WRITE, t5 AS b READ;
RENAME TABLE t5 TO t4;
SELECT * FROM t4 AS a, t4 AS b;
INSERT INTO t4 VALUES (2);
DELETE a FROM t4 AS a, t4 AS b;
DELETE b FROM t4 AS a, t4 AS b;
UNLOCK TABLES;
LOCK TABLES t2 WRITE, t4 WRITE;
RENAME TABLES t2 TO t0, t4 TO t2, t0 TO t4;
SELECT * FROM t2;
SELECT * FROM t4;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t2;
SELECT * FROM t4;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t0;
connection default;
UNLOCK TABLES;
LOCK TABLE t2 WRITE;
RENAME TABLES t2 TO t1, t1 TO t3, t3 TO t5;
SELECT * FROM t5;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t5;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
connection default;
UNLOCK TABLES;
CREATE TABLE t6(k INT);
LOCK TABLES t4 WRITE, t5 WRITE, t6 WRITE;
RENAME TABLES t4 TO t1, t5 TO t2;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t4;
SELECT * FROM t5;
SELECT * FROM t6;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t6;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t4;
SELECT * FROM t5;
connection default;
UNLOCK TABLES;
DROP TABLES t1, t2, t6;
CREATE TABLE t1 (i INT) ENGINE=InnoDB;
CREATE TABLE t2 (j INT) ENGINE=InnoDB;
CREATE TABLE t3 (k INT) ENGINE=InnoDB;
CREATE TABLE t4 (l INT) ENGINE=InnoDB;
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE;
RENAME TABLES t1 TO t0, t2 TO t4;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
SELECT * FROM t0;
SELECT * FROM t4;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t0;
SELECT * FROM t4;
connection default;
UNLOCK TABLES;
DROP TABLES t1, t2, t3, t4;
CREATE TABLE t1 (i INT);
CREATE TABLE t2 (j INT);
CREATE VIEW v1 AS SELECT * FROM t1;
CREATE VIEW v2 AS SELECT * FROM t2;
LOCK TABLES t1 WRITE;
RENAME TABLE v1 TO v2;
UNLOCK TABLES;
LOCK TABLES v1 READ;
RENAME TABLE v1 TO v2;
UNLOCK TABLES;
LOCK TABLES v1 WRITE;
RENAME TABLE v1 TO v3;
INSERT INTO v3 VALUES (1);
SELECT * FROM v1;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM v3;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM v1;
connection default;
UNLOCK TABLES;
LOCK TABLES v2 WRITE, v3 WRITE;
RENAME TABLE v2 TO v0, v3 TO v2, v0 TO v3;
SELECT * FROM v2;
SELECT * FROM v3;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM v2;
SELECT * FROM v3;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM v0;
connection default;
UNLOCK TABLES;
DROP VIEW v2;
DROP VIEW v3;
DROP TABLES t1, t2;
CREATE TABLE t1 (pk INT PRIMARY KEY);
INSERT INTO t1 VALUES (1);
CREATE TABLE t2 (fk INT, FOREIGN KEY (fk) REFERENCES t1 (pk));
INSERT INTO t2 VALUES (1);
CREATE TABLE t3 (fk INT);
CREATE TABLE t4 (pk INT NOT NULL, UNIQUE(pk));
INSERT INTO t4 VALUES (2);
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE, t4 WRITE;
RENAME TABLES t2 TO t0, t3 TO t2, t0 TO t3;
DELETE FROM t1;
RENAME TABLE t1 TO t0, t4 TO t1, t0 TO t4;
INSERT INTO t3 VALUES (2);
SHOW CREATE TABLE t3;
SELECT unique_constraint_name FROM information_schema.referential_constraints WHERE table_name = 't3';
UNLOCK TABLES;
SET foreign_key_checks = 0;
DROP TABLES t1, t2, t4;
SET foreign_key_checks = 1;
CREATE TABLE t1 (pk INT NOT NULL, UNIQUE(pk));
INSERT INTO t1 VALUES (1), (2);
LOCK TABLES t1 WRITE, t3 WRITE;
RENAME TABLE t1 TO t4;
INSERT INTO t3 VALUES (2);
INSERT INTO t3 VALUES (3);
SELECT unique_constraint_name FROM information_schema.referential_constraints WHERE table_name = 't3';
DELETE FROM t4;
UNLOCK TABLES;
DROP TABLE t3, t4;
connection con1;
disconnect con1;
connection default;
   let $wait_counter= `SELECT $wait_timeout * 10`;
while ($wait_counter)   let $current_sessions= query_get_value(SHOW GLOBAL STATUS LIKE 'Threads_connected', Value, 1);
   let $success= `SELECT $current_sessions <= $count_sessions`;
   if ($success)   {      let $wait_counter= 0;
   }   if (!$success)   {      sleep 0.1;
      dec $wait_counter;
   }         SHOW PROCESSLIST;
     if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }  drop table if exists t0,t1,t2,t3,t4;
drop table if exists t0,t5,t6,t7,t8,t9,t1_1,t1_2,t9_1,t9_2;
create table t0 SELECT 1,"table 1";
create table t2 SELECT 2,"table 2";
create table t3 SELECT 3,"table 3";
rename table t0 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
select * from t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
select * from t1;
rename table t1 to t2;
rename table t1 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t2;
show tables like "t_";
rename table t3 to t1, t2 to t3, t1 to t2, t4 to t1;
rename table t3 to t4, t5 to t3, t1 to t2, t4 to t1;
select * from t1;
select * from t2;
select * from t3;
drop table if exists t1,t2,t3,t4;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connection con1;
CREATE TABLE t1 (a int);
CREATE TABLE t3 (a int);
connection con2;
FLUSH TABLES WITH READ LOCK;
connection con1;
send RENAME TABLE t1 TO t2, t3 to t4;
connection con2;
show tables;
UNLOCK TABLES;
connection con1;
reap;
connection con2;
source include/wait_for_query_to_succeed.inc;
show tables;
drop table t2, t4;
disconnect con2;
disconnect con1;
connection default;
create table t1(f1 int);
create view v1 as select * from t1;
alter table v1 rename to v2;
drop view v1;
drop table t1;
SET @orig_innodb_file_per_table= @@innodb_file_per_table;
SET GLOBAL innodb_file_per_table = 0;
create table t1(f1 int) engine=innodb;
rename table test.t1 to nonexistingdb.t2;
drop table t1;
SET GLOBAL innodb_file_per_table = @orig_innodb_file_per_table;
SET @old_lock_wait_timeout= @@lock_wait_timeout;
connect (con1, localhost, root,,);
SET @old_lock_wait_timeout= @@lock_wait_timeout;
connection default;
CREATE TABLE t1 (i INT);
CREATE TABLE t2 (j INT);
LOCK TABLES t1 READ;
RENAME TABLE t2 TO t3;
RENAME TABLE t1 TO t3;
UNLOCK TABLES;
LOCK TABLE t1 WRITE;
RENAME TABLE t1 TO t3;
RENAME TABLE t3 TO t4, t4 TO t5;
UNLOCK TABLES;
SET FOREIGN_KEY_CHECKS=0;
CREATE TABLE t1 (fk INT, FOREIGN KEY(fk) REFERENCES t3(pk));
SET FOREIGN_KEY_CHECKS=1;
CREATE TABLE t0 (pk INT PRIMARY KEY);
LOCK TABLES t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
LOCK TABLES t1 READ, t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
DROP TABLES t1, t3;
LOCK TABLES t5 WRITE;
RENAME TABLE t5 TO t4;
SELECT * FROM t4;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t4;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t5;
connection default;
UNLOCK TABLES;
LOCK TABLES t2 READ, t4 WRITE;
RENAME TABLE t4 TO t5;
SELECT * FROM t2;
INSERT INTO t5 values (1);
UNLOCK TABLES;
LOCK TABLES t2 READ, t5 WRITE, t5 AS a WRITE, t5 AS b READ;
RENAME TABLE t5 TO t4;
SELECT * FROM t4 AS a, t4 AS b;
INSERT INTO t4 VALUES (2);
DELETE a FROM t4 AS a, t4 AS b;
DELETE b FROM t4 AS a, t4 AS b;
UNLOCK TABLES;
LOCK TABLES t2 WRITE, t4 WRITE;
RENAME TABLES t2 TO t0, t4 TO t2, t0 TO t4;
SELECT * FROM t2;
SELECT * FROM t4;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t2;
SELECT * FROM t4;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t0;
connection default;
UNLOCK TABLES;
LOCK TABLE t2 WRITE;
RENAME TABLES t2 TO t1, t1 TO t3, t3 TO t5;
SELECT * FROM t5;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t5;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
connection default;
UNLOCK TABLES;
CREATE TABLE t6(k INT);
LOCK TABLES t4 WRITE, t5 WRITE, t6 WRITE;
RENAME TABLES t4 TO t1, t5 TO t2;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t4;
SELECT * FROM t5;
SELECT * FROM t6;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t6;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t4;
SELECT * FROM t5;
connection default;
UNLOCK TABLES;
DROP TABLES t1, t2, t6;
CREATE TABLE t1 (i INT) ENGINE=InnoDB;
CREATE TABLE t2 (j INT) ENGINE=InnoDB;
CREATE TABLE t3 (k INT) ENGINE=InnoDB;
CREATE TABLE t4 (l INT) ENGINE=InnoDB;
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE;
RENAME TABLES t1 TO t0, t2 TO t4;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
SELECT * FROM t0;
SELECT * FROM t4;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t0;
SELECT * FROM t4;
connection default;
UNLOCK TABLES;
DROP TABLES t1, t2, t3, t4;
CREATE TABLE t1 (i INT);
CREATE TABLE t2 (j INT);
CREATE VIEW v1 AS SELECT * FROM t1;
CREATE VIEW v2 AS SELECT * FROM t2;
LOCK TABLES t1 WRITE;
RENAME TABLE v1 TO v2;
UNLOCK TABLES;
LOCK TABLES v1 READ;
RENAME TABLE v1 TO v2;
UNLOCK TABLES;
LOCK TABLES v1 WRITE;
RENAME TABLE v1 TO v3;
INSERT INTO v3 VALUES (1);
SELECT * FROM v1;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM v3;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM v1;
connection default;
UNLOCK TABLES;
LOCK TABLES v2 WRITE, v3 WRITE;
RENAME TABLE v2 TO v0, v3 TO v2, v0 TO v3;
SELECT * FROM v2;
SELECT * FROM v3;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM v2;
SELECT * FROM v3;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM v0;
connection default;
UNLOCK TABLES;
DROP VIEW v2;
DROP VIEW v3;
DROP TABLES t1, t2;
CREATE TABLE t1 (pk INT PRIMARY KEY);
INSERT INTO t1 VALUES (1);
CREATE TABLE t2 (fk INT, FOREIGN KEY (fk) REFERENCES t1 (pk));
INSERT INTO t2 VALUES (1);
CREATE TABLE t3 (fk INT);
CREATE TABLE t4 (pk INT NOT NULL, UNIQUE(pk));
INSERT INTO t4 VALUES (2);
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE, t4 WRITE;
RENAME TABLES t2 TO t0, t3 TO t2, t0 TO t3;
DELETE FROM t1;
RENAME TABLE t1 TO t0, t4 TO t1, t0 TO t4;
INSERT INTO t3 VALUES (2);
SHOW CREATE TABLE t3;
SELECT unique_constraint_name FROM information_schema.referential_constraints WHERE table_name = 't3';
UNLOCK TABLES;
SET foreign_key_checks = 0;
DROP TABLES t1, t2, t4;
SET foreign_key_checks = 1;
CREATE TABLE t1 (pk INT NOT NULL, UNIQUE(pk));
INSERT INTO t1 VALUES (1), (2);
LOCK TABLES t1 WRITE, t3 WRITE;
RENAME TABLE t1 TO t4;
INSERT INTO t3 VALUES (2);
INSERT INTO t3 VALUES (3);
SELECT unique_constraint_name FROM information_schema.referential_constraints WHERE table_name = 't3';
DELETE FROM t4;
UNLOCK TABLES;
DROP TABLE t3, t4;
connection con1;
disconnect con1;
connection default;
   let $wait_counter= `SELECT $wait_timeout * 10`;
while ($wait_counter)   let $current_sessions= query_get_value(SHOW GLOBAL STATUS LIKE 'Threads_connected', Value, 1);
   let $success= `SELECT $current_sessions <= $count_sessions`;
   if ($success)   {      let $wait_counter= 0;
   }   if (!$success)   {      sleep 0.1;
      dec $wait_counter;
   }         SHOW PROCESSLIST;
     if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }  drop table if exists t0,t1,t2,t3,t4;
drop table if exists t0,t5,t6,t7,t8,t9,t1_1,t1_2,t9_1,t9_2;
create table t0 SELECT 1,"table 1";
create table t2 SELECT 2,"table 2";
create table t3 SELECT 3,"table 3";
rename table t0 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
select * from t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
select * from t1;
rename table t1 to t2;
rename table t1 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t2;
show tables like "t_";
rename table t3 to t1, t2 to t3, t1 to t2, t4 to t1;
rename table t3 to t4, t5 to t3, t1 to t2, t4 to t1;
select * from t1;
select * from t2;
select * from t3;
drop table if exists t1,t2,t3,t4;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connection con1;
CREATE TABLE t1 (a int);
CREATE TABLE t3 (a int);
connection con2;
FLUSH TABLES WITH READ LOCK;
connection con1;
send RENAME TABLE t1 TO t2, t3 to t4;
connection con2;
show tables;
UNLOCK TABLES;
connection con1;
reap;
connection con2;
source include/wait_for_query_to_succeed.inc;
show tables;
drop table t2, t4;
disconnect con2;
disconnect con1;
connection default;
create table t1(f1 int);
create view v1 as select * from t1;
alter table v1 rename to v2;
drop view v1;
drop table t1;
SET @orig_innodb_file_per_table= @@innodb_file_per_table;
SET GLOBAL innodb_file_per_table = 0;
create table t1(f1 int) engine=innodb;
rename table test.t1 to nonexistingdb.t2;
drop table t1;
SET GLOBAL innodb_file_per_table = @orig_innodb_file_per_table;
SET @old_lock_wait_timeout= @@lock_wait_timeout;
connect (con1, localhost, root,,);
SET @old_lock_wait_timeout= @@lock_wait_timeout;
connection default;
CREATE TABLE t1 (i INT);
CREATE TABLE t2 (j INT);
LOCK TABLES t1 READ;
RENAME TABLE t2 TO t3;
RENAME TABLE t1 TO t3;
UNLOCK TABLES;
LOCK TABLE t1 WRITE;
RENAME TABLE t1 TO t3;
RENAME TABLE t3 TO t4, t4 TO t5;
UNLOCK TABLES;
SET FOREIGN_KEY_CHECKS=0;
CREATE TABLE t1 (fk INT, FOREIGN KEY(fk) REFERENCES t3(pk));
SET FOREIGN_KEY_CHECKS=1;
CREATE TABLE t0 (pk INT PRIMARY KEY);
LOCK TABLES t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
LOCK TABLES t1 READ, t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
DROP TABLES t1, t3;
LOCK TABLES t5 WRITE;
RENAME TABLE t5 TO t4;
SELECT * FROM t4;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t4;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t5;
connection default;
UNLOCK TABLES;
LOCK TABLES t2 READ, t4 WRITE;
RENAME TABLE t4 TO t5;
SELECT * FROM t2;
INSERT INTO t5 values (1);
UNLOCK TABLES;
LOCK TABLES t2 READ, t5 WRITE, t5 AS a WRITE, t5 AS b READ;
RENAME TABLE t5 TO t4;
SELECT * FROM t4 AS a, t4 AS b;
INSERT INTO t4 VALUES (2);
DELETE a FROM t4 AS a, t4 AS b;
DELETE b FROM t4 AS a, t4 AS b;
UNLOCK TABLES;
LOCK TABLES t2 WRITE, t4 WRITE;
RENAME TABLES t2 TO t0, t4 TO t2, t0 TO t4;
SELECT * FROM t2;
SELECT * FROM t4;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t2;
SELECT * FROM t4;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t0;
connection default;
UNLOCK TABLES;
LOCK TABLE t2 WRITE;
RENAME TABLES t2 TO t1, t1 TO t3, t3 TO t5;
SELECT * FROM t5;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t5;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
connection default;
UNLOCK TABLES;
CREATE TABLE t6(k INT);
LOCK TABLES t4 WRITE, t5 WRITE, t6 WRITE;
RENAME TABLES t4 TO t1, t5 TO t2;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t4;
SELECT * FROM t5;
SELECT * FROM t6;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t6;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t4;
SELECT * FROM t5;
connection default;
UNLOCK TABLES;
DROP TABLES t1, t2, t6;
CREATE TABLE t1 (i INT) ENGINE=InnoDB;
CREATE TABLE t2 (j INT) ENGINE=InnoDB;
CREATE TABLE t3 (k INT) ENGINE=InnoDB;
CREATE TABLE t4 (l INT) ENGINE=InnoDB;
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE;
RENAME TABLES t1 TO t0, t2 TO t4;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
SELECT * FROM t0;
SELECT * FROM t4;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t3;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM t0;
SELECT * FROM t4;
connection default;
UNLOCK TABLES;
DROP TABLES t1, t2, t3, t4;
CREATE TABLE t1 (i INT);
CREATE TABLE t2 (j INT);
CREATE VIEW v1 AS SELECT * FROM t1;
CREATE VIEW v2 AS SELECT * FROM t2;
LOCK TABLES t1 WRITE;
RENAME TABLE v1 TO v2;
UNLOCK TABLES;
LOCK TABLES v1 READ;
RENAME TABLE v1 TO v2;
UNLOCK TABLES;
LOCK TABLES v1 WRITE;
RENAME TABLE v1 TO v3;
INSERT INTO v3 VALUES (1);
SELECT * FROM v1;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM v3;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM v1;
connection default;
UNLOCK TABLES;
LOCK TABLES v2 WRITE, v3 WRITE;
RENAME TABLE v2 TO v0, v3 TO v2, v0 TO v3;
SELECT * FROM v2;
SELECT * FROM v3;
connection con1;
SET @@lock_wait_timeout= 1;
SELECT * FROM v2;
SELECT * FROM v3;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SELECT * FROM v0;
connection default;
UNLOCK TABLES;
DROP VIEW v2;
DROP VIEW v3;
DROP TABLES t1, t2;
CREATE TABLE t1 (pk INT PRIMARY KEY);
INSERT INTO t1 VALUES (1);
CREATE TABLE t2 (fk INT, FOREIGN KEY (fk) REFERENCES t1 (pk));
INSERT INTO t2 VALUES (1);
CREATE TABLE t3 (fk INT);
CREATE TABLE t4 (pk INT NOT NULL, UNIQUE(pk));
INSERT INTO t4 VALUES (2);
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE, t4 WRITE;
RENAME TABLES t2 TO t0, t3 TO t2, t0 TO t3;
DELETE FROM t1;
RENAME TABLE t1 TO t0, t4 TO t1, t0 TO t4;
INSERT INTO t3 VALUES (2);
SHOW CREATE TABLE t3;
SELECT unique_constraint_name FROM information_schema.referential_constraints WHERE table_name = 't3';
UNLOCK TABLES;
SET foreign_key_checks = 0;
DROP TABLES t1, t2, t4;
SET foreign_key_checks = 1;
CREATE TABLE t1 (pk INT NOT NULL, UNIQUE(pk));
INSERT INTO t1 VALUES (1), (2);
LOCK TABLES t1 WRITE, t3 WRITE;
RENAME TABLE t1 TO t4;
INSERT INTO t3 VALUES (2);
INSERT INTO t3 VALUES (3);
SELECT unique_constraint_name FROM information_schema.referential_constraints WHERE table_name = 't3';
DELETE FROM t4;
UNLOCK TABLES;
DROP TABLE t3, t4;
connection con1;
disconnect con1;
connection default;
