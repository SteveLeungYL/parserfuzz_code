    connection cq;
eval SET DEBUG_SYNC= '$point SIGNAL ready_for_explain WAIT_FOR explained';
send_eval $query;
connection ce;
  let $fmt= FORMAT=JSON;
  let $fmt= FORMAT=TRADITIONAL;
SET DEBUG_SYNC= 'now WAIT_FOR ready_for_explain';
SET DEBUG_SYNC= 'after_explain_other SIGNAL explained';
connection cq;
reap;
SET DEBUG_SYNC= 'RESET';
connection cq;
eval SET DEBUG_SYNC= '$point SIGNAL ready_for_explain WAIT_FOR explained';
send_eval $query;
connection ce;
  let $fmt= FORMAT=JSON;
  let $fmt= FORMAT=TRADITIONAL;
SET DEBUG_SYNC= 'now WAIT_FOR ready_for_explain';
SET DEBUG_SYNC= 'after_explain_other SIGNAL explained';
connection cq;
reap;
SET DEBUG_SYNC= 'RESET';
CREATE TABLE t1 (c1 INT NOT NULL, c2 varchar (64), PRIMARY KEY (c1))PARTITION BY RANGE (c1)SUBPARTITION BY HASH (c1) SUBPARTITIONS 2(PARTITION p0 VALUES LESS THAN (0) (SUBPARTITION subp0,  SUBPARTITION subp1), PARTITION p1 VALUES LESS THAN (100000) (SUBPARTITION subp6,  SUBPARTITION subp7));
CREATE TABLE t2 (c1 int);
CREATE TABLE t3 LIKE t2;
INSERT INTO t1 VALUES (1, 'a'), (2, 'b'), (3, 'c');
INSERT INTO t2 SELECT c1 FROM t1;
INSERT INTO t3 SELECT c1 FROM t2;
ANALYZE TABLE t1, t2, t3;
CREATE VIEW v1 AS SELECT * FROM t1 WHERE c1 > 20;
CREATE VIEW v2 AS SELECT t1.* FROM t1 JOIN t2 ON t1.c2=t2.c1;
EXPLAINDELETE LOW_PRIORITY QUICK IGNOREFROM t1 PARTITION (p1)WHERE c1 > 0ORDER BY c2LIMIT 10;
EXPLAINDELETE LOW_PRIORITY QUICK IGNORE t1 , t2FROM t1, t2, t3WHERE t1.c1 > 0;
EXPLAINUPDATE LOW_PRIORITY IGNORE t1SET c1 = 20WHERE c1 > 100;
EXPLAINUPDATE LOW_PRIORITY IGNORE t1 LEFT JOIN t2 ON t1.c1 = t2.c1SET t1.c1 = 20WHERE t1.c1 > 0;
EXPLAIN UPDATE v1 SET c2=c1;
EXPLAIN UPDATE v2 SET c2=c1;
EXPLAININSERT LOW_PRIORITY IGNORE INTO t1 PARTITION(p0, p1) (c1, c2)  VALUES (1, 'a'), (2, 'b')  ON DUPLICATE KEY UPDATE c2 = 'c';
EXPLAININSERT HIGH_PRIORITY IGNORE INTO t1 PARTITION(p0, p1) (c1, c2)  VALUES (1, 'a'), (2, 'b')  ON DUPLICATE KEY UPDATE c2 = 'c';
EXPLAININSERT DELAYED IGNORE INTO t1 PARTITION(p0, p1) (c1, c2)  SELECT c1, 'a' FROM t2  ON DUPLICATE KEY UPDATE c2 = 'c' ;
EXPLAININSERT INTO t1 PARTITION(p0, p1)  SET c1 = (SELECT c1 from t2);
EXPLAINREPLACE LOW_PRIORITY INTO t1 PARTITION(p0, p1) (c1, c2)  VALUES (1, 'a'), (2, 'b');
EXPLAINREPLACE DELAYED INTO t1 PARTITION(p0, p1) (c1, c2)  SELECT c1, 'a' FROM t2;
EXPLAINREPLACE INTO t1 PARTITION(p0, p1)  SET c1 = (SELECT c1 from t2);
connect (ce, localhost, root,, test);
connect (cq, localhost, root,, test);
connection cq;
UPDATE LOW_PRIORITY IGNORE t1 LEFT JOIN t2 ON t1.c1 = t2.c1SET t1.c1 = 20WHERE t1.c1 > 0;
EXPLAININSERT /*+ NO_BNL(t2@QB1) */ INTO t3  (SELECT /*+ QB_NAME(qb1) */ t2.c1   FROM t1,t2   WHERE t1.c2 = t2.c1);
EXPLAININSERT INTO t3  (SELECT /*+ NO_ICP(t2) */ t2.c1   FROM t1,t2   WHERE t1.c2 = t2.c1);
EXPLAININSERT INTO t3  (SELECT /*+ NO_ICP(t2) */ t2.c1   FROM t2   WHERE t2.c1 IN (SELECT /*+ NO_ICP(t1) */ t1.c1                   FROM t1                   WHERE t1.c2 BETWEEN 'a' AND 'z'));
DROP VIEW v1, v2;
DROP TABLE t1, t2, t3;
