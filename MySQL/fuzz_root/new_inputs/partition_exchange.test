SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
SET GLOBAL innodb_default_row_format=compact;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT=COMPACTPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 LIKE t1;
ALTER TABLE t2 REMOVE PARTITIONING;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDBPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = COMPACT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDBPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANTPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDBPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = COMPACTPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1_1 (  `col1` int(11) DEFAULT NULL,  `col2` int(11) DEFAULT NULL,  `col3` int(11) DEFAULT NULL,  `col4` text,  `col5` varchar(500) GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL,  `col6` text GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci/*!50100 PARTITION BY RANGE ((`col1` * 2))(PARTITION p0 VALUES LESS THAN (128) ENGINE = InnoDB, PARTITION p1 VALUES LESS THAN (256) ENGINE = InnoDB, PARTITION p2 VALUES LESS THAN (384) ENGINE = InnoDB, PARTITION p3 VALUES LESS THAN MAXVALUE ENGINE = InnoDB) */;
CREATE TABLE temp25058 AS SELECT * FROM t1_1 WHERE 1 <> 1;
SHOW CREATE TABLE temp25058;
SELECT * FROM temp25058;
ALTER TABLE t1_1 ALGORITHM DEFAULT , LOCK SHARED ,EXCHANGE PARTITION p2 WITH TABLE temp25058;
SHOW CREATE TABLE temp25058;
SELECT * FROM temp25058;
DROP TABLE temp25058;
DROP TABLE t1_1;
CREATE TABLE t1 (a INT NOT NULL, b TIME NOT NULL DEFAULT '00:00:00')ENGINE=InnoDBPARTITION BY HASH (a) PARTITIONS 2;
CREATE TABLE t2 (a INT) ENGINE=InnoDB;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
DROP TABLE t1, t2;
CREATE TABLE t1 (s1 INT PRIMARY KEY) ENGINE=InnoDB;
CREATE TABLE t2 (s1 INT, FOREIGN KEY (s1) REFERENCES t1 (s1)) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1),(2),(3);
INSERT INTO t2 VALUES (1),(2),(3);
CREATE TABLE t3 (s1 INT PRIMARY KEY)  ENGINE=InnoDB  PARTITION BY LIST (s1)  (PARTITION p1 VALUES IN (1,2,3));
ALTER TABLE t3 EXCHANGE PARTITION p1 WITH TABLE t1;
DROP TABLE t2, t1, t3;
CREATE TABLE t (a INT,  b VARCHAR(55),  PRIMARY KEY (a));
CREATE TABLE tp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)(PARTITION p0 VALUES LESS THAN (100), PARTITION p1 VALUES LESS THAN MAXVALUE);
CREATE TABLE tsp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)SUBPARTITION BY HASH(a)(PARTITION p0 VALUES LESS THAN (100) (SUBPARTITION sp0,  SUBPARTITION sp1), PARTITION p1 VALUES LESS THAN MAXVALUE (SUBPARTITION sp2,  SUBPARTITION sp3));
INSERT INTO t VALUES (1, "First value"), (3, "Three"), (5, "Five"), (99, "End of values");
INSERT INTO tp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"), (200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"), (63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"), (163, "163"), (164, "164");
INSERT INTO tsp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"), (200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"), (63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"), (163, "163"), (164, "164");
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t IGNORE;
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t IGNORE;
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION (p0,p1) WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE (t,t2);
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t,t2;
ALTER TABLE tp EXCHANGE PARTITION non_existent WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION sp0 WITH TABLE tp;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SHOW CREATE TABLE tsp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
SELECT * FROM t;
SELECT * FROM tsp;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t ENGINE = InnoDB;
ALTER TABLE tp ENGINE = InnoDB;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
CREATE TABLE tmp LIKE t;
INSERT INTO tmp SELECT * FROM t;
RENAME TABLE t TO tmp2, tmp TO t;
ALTER TABLE t CHARACTER SET = koi8r COLLATE koi8r_general_ci;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
DROP TABLE t;
CREATE TABLE t (a INT,  b VARCHAR(55),  PRIMARY KEY (a))MAX_ROWS = 100000 MIN_ROWS = 1000;
INSERT INTO t SELECT * FROM tmp2;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW WARNINGS;
DROP TABLE t;
RENAME TABLE tmp2 TO t;
ALTER TABLE t ADD KEY ba_key (b, a);
ALTER TABLE tp ADD KEY ba_key (b, a);
ALTER TABLE tsp ADD KEY ba_key (b, a);
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE t DROP KEY ba_key;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE t ADD KEY b_key (b);
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t ADD KEY ba_key (b, a);
ALTER TABLE t DROP KEY b_key;
ALTER TABLE t CHANGE a c INT;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t CHANGE c a INT;
CREATE TEMPORARY TABLE tmp LIKE t;
INSERT INTO tmp SELECT * FROM t;
ALTER TABLE t RENAME TO tmp2;
ALTER TABLE tmp RENAME TO t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
DROP TEMPORARY TABLE t;
ALTER TABLE tmp2 RENAME TO t;
ALTER TABLE tp REMOVE PARTITIONING;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
DROP TABLE t, tp, tsp;
CREATE TABLE tp(a VARCHAR(24), b DATETIME, PRIMARY KEY (a,b))PARTITION BY RANGE COLUMNS (a, b)(PARTITION p0 VALUES LESS THAN ("Middle", '0000-00-00'), PARTITION p1 VALUES LESS THAN (MAXVALUE, '9999-12-31 23:59:59'));
CREATE TABLE t LIKE tp;
ALTER TABLE t REMOVE PARTITIONING;
CREATE TABLE t2 LIKE t;
INSERT INTO tp VALUES ("First in tp", '2000-01-02 03:04:25'), ("Zebra in tp", '0000-00-00 00:00:00'), ("Second in tp", '2010-01-01 05:12:24');
INSERT INTO t VALUES ("First in t", '2000-01-02 03:04:25'), ("a test in t", '0000-00-00 00:00:00'), ("Echo in t", '2010-01-01 05:12:24');
while ($count)  let $lock_cmd = $lock_cmd t $t_lock;
  let $take_lock = 1;
  if ($take_lock)  {    let $lock_cmd = $lock_cmd, tp $tp_lock;
  }  if (!$take_lock)  {    let $lock_cmd = $lock_cmd tp $tp_lock;
  }  let $take_lock = 1;
  if ($take_lock)  {    let $lock_cmd = $lock_cmd, t2 $t2_lock;
  }  if (!$take_lock)  {    let $lock_cmd = $lock_cmd t2 $t2_lock;
  }  let $take_lock = 1;
  eval $lock_cmd;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW WARNINGS;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t2;
SHOW WARNINGS;
UNLOCK TABLES;
dec $count;
DROP TABLE t, t2, tp;
CREATE TABLE t (a INT,  b VARCHAR(55),  PRIMARY KEY (a));
CREATE TABLE tp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)(PARTITION p0 VALUES LESS THAN (100), PARTITION p1 VALUES LESS THAN MAXVALUE);
CREATE TABLE tsp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)SUBPARTITION BY HASH(a)(PARTITION p0 VALUES LESS THAN (100) (SUBPARTITION sp0,  SUBPARTITION sp1), PARTITION p1 VALUES LESS THAN MAXVALUE (SUBPARTITION sp2,  SUBPARTITION sp3));
INSERT INTO t VALUES (1, "First value"), (3, "Three"), (5, "Five"),                     (6, "Six"), (8, "Eight"), (99, "End of values");
INSERT INTO tp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"),(200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"),(63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"),(163, "163"), (164, "164");
INSERT INTO tsp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"),(200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"),(63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"),(163, "163"), (164, "164");
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITH VALIDATION;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM t;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
SELECT * FROM t;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
SELECT * FROM t;
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t;
SELECT * FROM t;
SELECT * FROM tsp PARTITION (sp3);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
ALTER TABLE tp REBUILD PARTITION p1;
ALTER TABLE tp REORGANIZE PARTITION p1 INTO(PARTITION p1 VALUES LESS THAN (162), PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tp ANALYZE PARTITION p1;
ALTER TABLE tp OPTIMIZE PARTITION p1;
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp REBUILD PARTITION p1;
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO(PARTITION p1 VALUES LESS THAN (162), PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tsp ANALYZE PARTITION sp3;
ALTER TABLE tsp OPTIMIZE PARTITION sp3;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp REBUILD PARTITION p1;
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO(PARTITION p1 VALUES LESS THAN (162), PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO(PARTITION p01 VALUES LESS THAN (162) (SUBPARTITION sp01,  SUBPARTITION sp02), PARTITION p02 VALUES LESS THAN MAXVALUE (SUBPARTITION sp03,  SUBPARTITION sp04));
ALTER TABLE tsp ANALYZE PARTITION sp3;
ALTER TABLE tsp OPTIMIZE PARTITION sp3;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
DROP TABLE t, tp, tsp;
SET sql_mode = default;
SET GLOBAL innodb_default_row_format=default;
eval CREATE TABLE t1 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBDATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
eval CREATE TABLE t2 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBPARTITION BY LIST (a)(PARTITION p1 VALUES IN (1,3,5,7,9) DATA DIRECTORY = '$MYSQL_TMP_DIR/p1_dir', PARTITION p2 VALUES IN (0,2,4,6,8) DATA DIRECTORY = '$MYSQL_TMP_DIR/p2_dir');
INSERT INTO t1 VALUES (1, "t1"), (5, "t1");
INSERT INTO t2 VALUES (3, "p1"), (4, "p2"), (7, "p1"), (8, "p2");
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
FLUSH TABLES t1, t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
DROP TABLE t1, t2;
  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result                if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }            if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                                if ($show_rpl_debug_info)  {  }  if ($assert_no_stop) {    if (!$show_rpl_debug_info) {          }  }          if (!$assert_no_stop) {      }  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result                if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }            if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                                if ($show_rpl_debug_info)  {  }  if ($assert_no_stop) {    if (!$show_rpl_debug_info) {          }  }          if (!$assert_no_stop) {      }eval CREATE TABLE t1 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBDATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
eval CREATE TABLE t2 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBPARTITION BY range (a)(PARTITION p1 VALUES less than (10) DATA DIRECTORY = '$MYSQL_TMP_DIR/p1_dir', PARTITION p2 VALUES less than (20) DATA DIRECTORY = '$MYSQL_TMP_DIR/p2_dir');
INSERT INTO t1 VALUES (1, "t1"), (5, "t1");
INSERT INTO t2 VALUES (3, "p1"), (4, "p2"), (17, "p1"), (12, "p2");
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
FLUSH TABLES t1, t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
DROP table t1,t2;
eval CREATE TABLE t1 (id INT, purchased DATE)ENGINE = InnoDBDATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
eval CREATE TABLE t2 (id INT, purchased DATE)PARTITION BY RANGE( YEAR(purchased) )SUBPARTITION BY HASH( TO_DAYS(purchased) ) (PARTITION p0 VALUES LESS THAN (1990) (SUBPARTITION s0 data directory='$MYSQL_TMP_DIR/sp0_dir',SUBPARTITION s1),PARTITION p1 VALUES LESS THAN (2000) (SUBPARTITION s2,SUBPARTITION s3 data directory='$MYSQL_TMP_DIR/sp3_dir'));
insert into t2 values(1,'1987-05-12 '),(2,'1987-05-14');
insert into t2 values(3,'1997-05-10 '),(4,'1997-05-18');
insert into t1 values(1,'1987-05-10 '),(2,'1987-05-08');
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s0 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s0 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
delete from t1;
insert into t1 values(3,'1997-05-8 '),(4,'1997-05-16');
ALTER TABLE t2 EXCHANGE PARTITION s3 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s3 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
DROP table t1,t2;
CREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB ;
CREATE TABLE t2 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB PARTITION BY LIST (a) (PARTITION p1 VALUES IN (1,3,5,7,9) ,PARTITION p2 VALUES IN (0,2,4,6,8) );
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
ALTER TABLE t2 ADD COLUMN j INT,ALGORITHM=INSTANT;
ALTER TABLE t2 ADD COLUMN k INT,ALGORITHM=COPY;
 DROP TABLE t1,t2;
CREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB ;
CREATE TABLE t2 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB PARTITION BY LIST (a) (PARTITION p1 VALUES IN (1,3,5,7,9) ,PARTITION p2 VALUES IN (0,2,4,6,8) );
ALTER TABLE t2 EXCHANGE PARTITION p2 WITH TABLE t1;
ALTER TABLE t2 ADD COLUMN j INT,ALGORITHM=INSTANT;
ALTER TABLE t2 ADD COLUMN k INT,ALGORITHM=COPY;
DROP TABLE t1,t2;
SET @orig_default_row_format = @@global.innodb_default_row_format;
SET GLOBAL innodb_default_row_format=COMPACT;
CREATE TABLE t1 (  col1 INT UNSIGNED,  col2 DATETIMEENGINE=INNODBPARTITION BY RANGE COLUMNS(col2)PARTITION p0 VALUES LESS THAN ('1960-01-01'),PARTITION p1 VALUES LESS THAN ('1980-01-01'));
INSERT INTO t1 VALUES ('1','1958-02-17 06:25:34');
INSERT INTO t1 VALUES ('2','1962-11-23 11:06:06');
SET GLOBAL innodb_default_row_format=DYNAMIC;
ALTER TABLE t1 ADD PARTITION (PARTITION p2 VALUES LESS THAN ('2000-01-01'));
INSERT INTO t1 VALUES ('3','1999-10-13 05:28:46'), ('4', '1996-09-26 20:00:00');
SELECT NAME,ROW_FORMAT  FROM INFORMATION_SCHEMA.INNODB_TABLESWHERE NAME LIKE '%t1%' ORDER BY TABLE_ID;
CREATE TABLE t2 LIKE t1;
ALTER TABLE t2 REMOVE PARTITIONING;
ALTER TABLE t1 EXCHANGE PARTITION p0 WITH TABLE t2;
ALTER TABLE t1 EXCHANGE PARTITION p2 WITH TABLE t2;
DROP TABLE t1,t2;
SET GLOBAL innodb_default_row_format=COMPACT;
CREATE TABLE t1 (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)SUBPARTITION BY HASH(a)(PARTITION p0 VALUES LESS THAN (100) (SUBPARTITION sp0,  SUBPARTITION sp1), PARTITION p1 VALUES LESS THAN  (200) (SUBPARTITION sp2,  SUBPARTITION sp3));
SET GLOBAL innodb_default_row_format=DYNAMIC;
ALTER TABLE t1 ADD PARTITION (PARTITION p2 VALUES LESS THAN (300)(SUBPARTITION sp4,SUBPARTITION sp5));
INSERT INTO t1(b,a) VALUES('first',40),('second',91),('third',140),('forth',191);
SELECT NAME,ROW_FORMAT  FROM INFORMATION_SCHEMA.INNODB_TABLESWHERE NAME LIKE '%t1%' ORDER BY TABLE_ID;
CREATE TABLE t2 like t1;
ALTER TABLE t2 REMOVE PARTITIONING;
ALTER TABLE t1 EXCHANGE PARTITION sp2 WITH TABLE t2;
ALTER TABLE t1 EXCHANGE PARTITION sp4 WITH TABLE t2;
DROP TABLE t1,t2;
SET @@global.innodb_default_row_format=@orig_default_row_format;
SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
SET GLOBAL innodb_default_row_format=compact;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT=COMPACTPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 LIKE t1;
ALTER TABLE t2 REMOVE PARTITIONING;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDBPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = COMPACT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDBPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANTPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDBPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = COMPACTPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1_1 (  `col1` int(11) DEFAULT NULL,  `col2` int(11) DEFAULT NULL,  `col3` int(11) DEFAULT NULL,  `col4` text,  `col5` varchar(500) GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL,  `col6` text GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci/*!50100 PARTITION BY RANGE ((`col1` * 2))(PARTITION p0 VALUES LESS THAN (128) ENGINE = InnoDB, PARTITION p1 VALUES LESS THAN (256) ENGINE = InnoDB, PARTITION p2 VALUES LESS THAN (384) ENGINE = InnoDB, PARTITION p3 VALUES LESS THAN MAXVALUE ENGINE = InnoDB) */;
CREATE TABLE temp25058 AS SELECT * FROM t1_1 WHERE 1 <> 1;
SHOW CREATE TABLE temp25058;
SELECT * FROM temp25058;
ALTER TABLE t1_1 ALGORITHM DEFAULT , LOCK SHARED ,EXCHANGE PARTITION p2 WITH TABLE temp25058;
SHOW CREATE TABLE temp25058;
SELECT * FROM temp25058;
DROP TABLE temp25058;
DROP TABLE t1_1;
CREATE TABLE t1 (a INT NOT NULL, b TIME NOT NULL DEFAULT '00:00:00')ENGINE=InnoDBPARTITION BY HASH (a) PARTITIONS 2;
CREATE TABLE t2 (a INT) ENGINE=InnoDB;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
DROP TABLE t1, t2;
CREATE TABLE t1 (s1 INT PRIMARY KEY) ENGINE=InnoDB;
CREATE TABLE t2 (s1 INT, FOREIGN KEY (s1) REFERENCES t1 (s1)) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1),(2),(3);
INSERT INTO t2 VALUES (1),(2),(3);
CREATE TABLE t3 (s1 INT PRIMARY KEY)  ENGINE=InnoDB  PARTITION BY LIST (s1)  (PARTITION p1 VALUES IN (1,2,3));
ALTER TABLE t3 EXCHANGE PARTITION p1 WITH TABLE t1;
DROP TABLE t2, t1, t3;
CREATE TABLE t (a INT,  b VARCHAR(55),  PRIMARY KEY (a));
CREATE TABLE tp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)(PARTITION p0 VALUES LESS THAN (100), PARTITION p1 VALUES LESS THAN MAXVALUE);
CREATE TABLE tsp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)SUBPARTITION BY HASH(a)(PARTITION p0 VALUES LESS THAN (100) (SUBPARTITION sp0,  SUBPARTITION sp1), PARTITION p1 VALUES LESS THAN MAXVALUE (SUBPARTITION sp2,  SUBPARTITION sp3));
INSERT INTO t VALUES (1, "First value"), (3, "Three"), (5, "Five"), (99, "End of values");
INSERT INTO tp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"), (200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"), (63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"), (163, "163"), (164, "164");
INSERT INTO tsp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"), (200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"), (63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"), (163, "163"), (164, "164");
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t IGNORE;
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t IGNORE;
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION (p0,p1) WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE (t,t2);
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t,t2;
ALTER TABLE tp EXCHANGE PARTITION non_existent WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION sp0 WITH TABLE tp;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SHOW CREATE TABLE tsp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
SELECT * FROM t;
SELECT * FROM tsp;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t ENGINE = InnoDB;
ALTER TABLE tp ENGINE = InnoDB;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
CREATE TABLE tmp LIKE t;
INSERT INTO tmp SELECT * FROM t;
RENAME TABLE t TO tmp2, tmp TO t;
ALTER TABLE t CHARACTER SET = koi8r COLLATE koi8r_general_ci;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
DROP TABLE t;
CREATE TABLE t (a INT,  b VARCHAR(55),  PRIMARY KEY (a))MAX_ROWS = 100000 MIN_ROWS = 1000;
INSERT INTO t SELECT * FROM tmp2;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW WARNINGS;
DROP TABLE t;
RENAME TABLE tmp2 TO t;
ALTER TABLE t ADD KEY ba_key (b, a);
ALTER TABLE tp ADD KEY ba_key (b, a);
ALTER TABLE tsp ADD KEY ba_key (b, a);
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE t DROP KEY ba_key;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE t ADD KEY b_key (b);
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t ADD KEY ba_key (b, a);
ALTER TABLE t DROP KEY b_key;
ALTER TABLE t CHANGE a c INT;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t CHANGE c a INT;
CREATE TEMPORARY TABLE tmp LIKE t;
INSERT INTO tmp SELECT * FROM t;
ALTER TABLE t RENAME TO tmp2;
ALTER TABLE tmp RENAME TO t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
DROP TEMPORARY TABLE t;
ALTER TABLE tmp2 RENAME TO t;
ALTER TABLE tp REMOVE PARTITIONING;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
DROP TABLE t, tp, tsp;
CREATE TABLE tp(a VARCHAR(24), b DATETIME, PRIMARY KEY (a,b))PARTITION BY RANGE COLUMNS (a, b)(PARTITION p0 VALUES LESS THAN ("Middle", '0000-00-00'), PARTITION p1 VALUES LESS THAN (MAXVALUE, '9999-12-31 23:59:59'));
CREATE TABLE t LIKE tp;
ALTER TABLE t REMOVE PARTITIONING;
CREATE TABLE t2 LIKE t;
INSERT INTO tp VALUES ("First in tp", '2000-01-02 03:04:25'), ("Zebra in tp", '0000-00-00 00:00:00'), ("Second in tp", '2010-01-01 05:12:24');
INSERT INTO t VALUES ("First in t", '2000-01-02 03:04:25'), ("a test in t", '0000-00-00 00:00:00'), ("Echo in t", '2010-01-01 05:12:24');
while ($count)  let $lock_cmd = $lock_cmd t $t_lock;
  let $take_lock = 1;
  if ($take_lock)  {    let $lock_cmd = $lock_cmd, tp $tp_lock;
  }  if (!$take_lock)  {    let $lock_cmd = $lock_cmd tp $tp_lock;
  }  let $take_lock = 1;
  if ($take_lock)  {    let $lock_cmd = $lock_cmd, t2 $t2_lock;
  }  if (!$take_lock)  {    let $lock_cmd = $lock_cmd t2 $t2_lock;
  }  let $take_lock = 1;
  eval $lock_cmd;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW WARNINGS;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t2;
SHOW WARNINGS;
UNLOCK TABLES;
dec $count;
DROP TABLE t, t2, tp;
CREATE TABLE t (a INT,  b VARCHAR(55),  PRIMARY KEY (a));
CREATE TABLE tp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)(PARTITION p0 VALUES LESS THAN (100), PARTITION p1 VALUES LESS THAN MAXVALUE);
CREATE TABLE tsp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)SUBPARTITION BY HASH(a)(PARTITION p0 VALUES LESS THAN (100) (SUBPARTITION sp0,  SUBPARTITION sp1), PARTITION p1 VALUES LESS THAN MAXVALUE (SUBPARTITION sp2,  SUBPARTITION sp3));
INSERT INTO t VALUES (1, "First value"), (3, "Three"), (5, "Five"),                     (6, "Six"), (8, "Eight"), (99, "End of values");
INSERT INTO tp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"),(200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"),(63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"),(163, "163"), (164, "164");
INSERT INTO tsp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"),(200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"),(63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"),(163, "163"), (164, "164");
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITH VALIDATION;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM t;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
SELECT * FROM t;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
SELECT * FROM t;
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t;
SELECT * FROM t;
SELECT * FROM tsp PARTITION (sp3);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
ALTER TABLE tp REBUILD PARTITION p1;
ALTER TABLE tp REORGANIZE PARTITION p1 INTO(PARTITION p1 VALUES LESS THAN (162), PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tp ANALYZE PARTITION p1;
ALTER TABLE tp OPTIMIZE PARTITION p1;
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp REBUILD PARTITION p1;
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO(PARTITION p1 VALUES LESS THAN (162), PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tsp ANALYZE PARTITION sp3;
ALTER TABLE tsp OPTIMIZE PARTITION sp3;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp REBUILD PARTITION p1;
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO(PARTITION p1 VALUES LESS THAN (162), PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO(PARTITION p01 VALUES LESS THAN (162) (SUBPARTITION sp01,  SUBPARTITION sp02), PARTITION p02 VALUES LESS THAN MAXVALUE (SUBPARTITION sp03,  SUBPARTITION sp04));
ALTER TABLE tsp ANALYZE PARTITION sp3;
ALTER TABLE tsp OPTIMIZE PARTITION sp3;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
DROP TABLE t, tp, tsp;
SET sql_mode = default;
SET GLOBAL innodb_default_row_format=default;
eval CREATE TABLE t1 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBDATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
eval CREATE TABLE t2 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBPARTITION BY LIST (a)(PARTITION p1 VALUES IN (1,3,5,7,9) DATA DIRECTORY = '$MYSQL_TMP_DIR/p1_dir', PARTITION p2 VALUES IN (0,2,4,6,8) DATA DIRECTORY = '$MYSQL_TMP_DIR/p2_dir');
INSERT INTO t1 VALUES (1, "t1"), (5, "t1");
INSERT INTO t2 VALUES (3, "p1"), (4, "p2"), (7, "p1"), (8, "p2");
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
FLUSH TABLES t1, t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
DROP TABLE t1, t2;
  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result                if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }            if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                                if ($show_rpl_debug_info)  {  }  if ($assert_no_stop) {    if (!$show_rpl_debug_info) {          }  }          if (!$assert_no_stop) {      }  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result                if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }            if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                                if ($show_rpl_debug_info)  {  }  if ($assert_no_stop) {    if (!$show_rpl_debug_info) {          }  }          if (!$assert_no_stop) {      }eval CREATE TABLE t1 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBDATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
eval CREATE TABLE t2 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBPARTITION BY range (a)(PARTITION p1 VALUES less than (10) DATA DIRECTORY = '$MYSQL_TMP_DIR/p1_dir', PARTITION p2 VALUES less than (20) DATA DIRECTORY = '$MYSQL_TMP_DIR/p2_dir');
INSERT INTO t1 VALUES (1, "t1"), (5, "t1");
INSERT INTO t2 VALUES (3, "p1"), (4, "p2"), (17, "p1"), (12, "p2");
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
FLUSH TABLES t1, t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
DROP table t1,t2;
eval CREATE TABLE t1 (id INT, purchased DATE)ENGINE = InnoDBDATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
eval CREATE TABLE t2 (id INT, purchased DATE)PARTITION BY RANGE( YEAR(purchased) )SUBPARTITION BY HASH( TO_DAYS(purchased) ) (PARTITION p0 VALUES LESS THAN (1990) (SUBPARTITION s0 data directory='$MYSQL_TMP_DIR/sp0_dir',SUBPARTITION s1),PARTITION p1 VALUES LESS THAN (2000) (SUBPARTITION s2,SUBPARTITION s3 data directory='$MYSQL_TMP_DIR/sp3_dir'));
insert into t2 values(1,'1987-05-12 '),(2,'1987-05-14');
insert into t2 values(3,'1997-05-10 '),(4,'1997-05-18');
insert into t1 values(1,'1987-05-10 '),(2,'1987-05-08');
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s0 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s0 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
delete from t1;
insert into t1 values(3,'1997-05-8 '),(4,'1997-05-16');
ALTER TABLE t2 EXCHANGE PARTITION s3 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s3 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
DROP table t1,t2;
CREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB ;
CREATE TABLE t2 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB PARTITION BY LIST (a) (PARTITION p1 VALUES IN (1,3,5,7,9) ,PARTITION p2 VALUES IN (0,2,4,6,8) );
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
ALTER TABLE t2 ADD COLUMN j INT,ALGORITHM=INSTANT;
ALTER TABLE t2 ADD COLUMN k INT,ALGORITHM=COPY;
 DROP TABLE t1,t2;
CREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB ;
CREATE TABLE t2 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB PARTITION BY LIST (a) (PARTITION p1 VALUES IN (1,3,5,7,9) ,PARTITION p2 VALUES IN (0,2,4,6,8) );
ALTER TABLE t2 EXCHANGE PARTITION p2 WITH TABLE t1;
ALTER TABLE t2 ADD COLUMN j INT,ALGORITHM=INSTANT;
ALTER TABLE t2 ADD COLUMN k INT,ALGORITHM=COPY;
DROP TABLE t1,t2;
SET @orig_default_row_format = @@global.innodb_default_row_format;
SET GLOBAL innodb_default_row_format=COMPACT;
CREATE TABLE t1 (  col1 INT UNSIGNED,  col2 DATETIMEENGINE=INNODBPARTITION BY RANGE COLUMNS(col2)PARTITION p0 VALUES LESS THAN ('1960-01-01'),PARTITION p1 VALUES LESS THAN ('1980-01-01'));
INSERT INTO t1 VALUES ('1','1958-02-17 06:25:34');
INSERT INTO t1 VALUES ('2','1962-11-23 11:06:06');
SET GLOBAL innodb_default_row_format=DYNAMIC;
ALTER TABLE t1 ADD PARTITION (PARTITION p2 VALUES LESS THAN ('2000-01-01'));
INSERT INTO t1 VALUES ('3','1999-10-13 05:28:46'), ('4', '1996-09-26 20:00:00');
SELECT NAME,ROW_FORMAT  FROM INFORMATION_SCHEMA.INNODB_TABLESWHERE NAME LIKE '%t1%' ORDER BY TABLE_ID;
CREATE TABLE t2 LIKE t1;
ALTER TABLE t2 REMOVE PARTITIONING;
ALTER TABLE t1 EXCHANGE PARTITION p0 WITH TABLE t2;
ALTER TABLE t1 EXCHANGE PARTITION p2 WITH TABLE t2;
DROP TABLE t1,t2;
SET GLOBAL innodb_default_row_format=COMPACT;
CREATE TABLE t1 (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)SUBPARTITION BY HASH(a)(PARTITION p0 VALUES LESS THAN (100) (SUBPARTITION sp0,  SUBPARTITION sp1), PARTITION p1 VALUES LESS THAN  (200) (SUBPARTITION sp2,  SUBPARTITION sp3));
SET GLOBAL innodb_default_row_format=DYNAMIC;
ALTER TABLE t1 ADD PARTITION (PARTITION p2 VALUES LESS THAN (300)(SUBPARTITION sp4,SUBPARTITION sp5));
INSERT INTO t1(b,a) VALUES('first',40),('second',91),('third',140),('forth',191);
SELECT NAME,ROW_FORMAT  FROM INFORMATION_SCHEMA.INNODB_TABLESWHERE NAME LIKE '%t1%' ORDER BY TABLE_ID;
CREATE TABLE t2 like t1;
ALTER TABLE t2 REMOVE PARTITIONING;
ALTER TABLE t1 EXCHANGE PARTITION sp2 WITH TABLE t2;
ALTER TABLE t1 EXCHANGE PARTITION sp4 WITH TABLE t2;
DROP TABLE t1,t2;
SET @@global.innodb_default_row_format=@orig_default_row_format;
SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
SET GLOBAL innodb_default_row_format=compact;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT=COMPACTPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 LIKE t1;
ALTER TABLE t2 REMOVE PARTITIONING;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDBPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = COMPACT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDBPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANTPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDBPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = COMPACTPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1_1 (  `col1` int(11) DEFAULT NULL,  `col2` int(11) DEFAULT NULL,  `col3` int(11) DEFAULT NULL,  `col4` text,  `col5` varchar(500) GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL,  `col6` text GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci/*!50100 PARTITION BY RANGE ((`col1` * 2))(PARTITION p0 VALUES LESS THAN (128) ENGINE = InnoDB, PARTITION p1 VALUES LESS THAN (256) ENGINE = InnoDB, PARTITION p2 VALUES LESS THAN (384) ENGINE = InnoDB, PARTITION p3 VALUES LESS THAN MAXVALUE ENGINE = InnoDB) */;
CREATE TABLE temp25058 AS SELECT * FROM t1_1 WHERE 1 <> 1;
SHOW CREATE TABLE temp25058;
SELECT * FROM temp25058;
ALTER TABLE t1_1 ALGORITHM DEFAULT , LOCK SHARED ,EXCHANGE PARTITION p2 WITH TABLE temp25058;
SHOW CREATE TABLE temp25058;
SELECT * FROM temp25058;
DROP TABLE temp25058;
DROP TABLE t1_1;
CREATE TABLE t1 (a INT NOT NULL, b TIME NOT NULL DEFAULT '00:00:00')ENGINE=InnoDBPARTITION BY HASH (a) PARTITIONS 2;
CREATE TABLE t2 (a INT) ENGINE=InnoDB;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
DROP TABLE t1, t2;
CREATE TABLE t1 (s1 INT PRIMARY KEY) ENGINE=InnoDB;
CREATE TABLE t2 (s1 INT, FOREIGN KEY (s1) REFERENCES t1 (s1)) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1),(2),(3);
INSERT INTO t2 VALUES (1),(2),(3);
CREATE TABLE t3 (s1 INT PRIMARY KEY)  ENGINE=InnoDB  PARTITION BY LIST (s1)  (PARTITION p1 VALUES IN (1,2,3));
ALTER TABLE t3 EXCHANGE PARTITION p1 WITH TABLE t1;
DROP TABLE t2, t1, t3;
CREATE TABLE t (a INT,  b VARCHAR(55),  PRIMARY KEY (a));
CREATE TABLE tp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)(PARTITION p0 VALUES LESS THAN (100), PARTITION p1 VALUES LESS THAN MAXVALUE);
CREATE TABLE tsp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)SUBPARTITION BY HASH(a)(PARTITION p0 VALUES LESS THAN (100) (SUBPARTITION sp0,  SUBPARTITION sp1), PARTITION p1 VALUES LESS THAN MAXVALUE (SUBPARTITION sp2,  SUBPARTITION sp3));
INSERT INTO t VALUES (1, "First value"), (3, "Three"), (5, "Five"), (99, "End of values");
INSERT INTO tp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"), (200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"), (63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"), (163, "163"), (164, "164");
INSERT INTO tsp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"), (200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"), (63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"), (163, "163"), (164, "164");
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t IGNORE;
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t IGNORE;
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION (p0,p1) WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE (t,t2);
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t,t2;
ALTER TABLE tp EXCHANGE PARTITION non_existent WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION sp0 WITH TABLE tp;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SHOW CREATE TABLE tsp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
SELECT * FROM t;
SELECT * FROM tsp;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t ENGINE = InnoDB;
ALTER TABLE tp ENGINE = InnoDB;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
CREATE TABLE tmp LIKE t;
INSERT INTO tmp SELECT * FROM t;
RENAME TABLE t TO tmp2, tmp TO t;
ALTER TABLE t CHARACTER SET = koi8r COLLATE koi8r_general_ci;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
DROP TABLE t;
CREATE TABLE t (a INT,  b VARCHAR(55),  PRIMARY KEY (a))MAX_ROWS = 100000 MIN_ROWS = 1000;
INSERT INTO t SELECT * FROM tmp2;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW WARNINGS;
DROP TABLE t;
RENAME TABLE tmp2 TO t;
ALTER TABLE t ADD KEY ba_key (b, a);
ALTER TABLE tp ADD KEY ba_key (b, a);
ALTER TABLE tsp ADD KEY ba_key (b, a);
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE t DROP KEY ba_key;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE t ADD KEY b_key (b);
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t ADD KEY ba_key (b, a);
ALTER TABLE t DROP KEY b_key;
ALTER TABLE t CHANGE a c INT;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t CHANGE c a INT;
CREATE TEMPORARY TABLE tmp LIKE t;
INSERT INTO tmp SELECT * FROM t;
ALTER TABLE t RENAME TO tmp2;
ALTER TABLE tmp RENAME TO t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
DROP TEMPORARY TABLE t;
ALTER TABLE tmp2 RENAME TO t;
ALTER TABLE tp REMOVE PARTITIONING;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
DROP TABLE t, tp, tsp;
CREATE TABLE tp(a VARCHAR(24), b DATETIME, PRIMARY KEY (a,b))PARTITION BY RANGE COLUMNS (a, b)(PARTITION p0 VALUES LESS THAN ("Middle", '0000-00-00'), PARTITION p1 VALUES LESS THAN (MAXVALUE, '9999-12-31 23:59:59'));
CREATE TABLE t LIKE tp;
ALTER TABLE t REMOVE PARTITIONING;
CREATE TABLE t2 LIKE t;
INSERT INTO tp VALUES ("First in tp", '2000-01-02 03:04:25'), ("Zebra in tp", '0000-00-00 00:00:00'), ("Second in tp", '2010-01-01 05:12:24');
INSERT INTO t VALUES ("First in t", '2000-01-02 03:04:25'), ("a test in t", '0000-00-00 00:00:00'), ("Echo in t", '2010-01-01 05:12:24');
while ($count)  let $lock_cmd = $lock_cmd t $t_lock;
  let $take_lock = 1;
  if ($take_lock)  {    let $lock_cmd = $lock_cmd, tp $tp_lock;
  }  if (!$take_lock)  {    let $lock_cmd = $lock_cmd tp $tp_lock;
  }  let $take_lock = 1;
  if ($take_lock)  {    let $lock_cmd = $lock_cmd, t2 $t2_lock;
  }  if (!$take_lock)  {    let $lock_cmd = $lock_cmd t2 $t2_lock;
  }  let $take_lock = 1;
  eval $lock_cmd;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW WARNINGS;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t2;
SHOW WARNINGS;
UNLOCK TABLES;
dec $count;
DROP TABLE t, t2, tp;
CREATE TABLE t (a INT,  b VARCHAR(55),  PRIMARY KEY (a));
CREATE TABLE tp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)(PARTITION p0 VALUES LESS THAN (100), PARTITION p1 VALUES LESS THAN MAXVALUE);
CREATE TABLE tsp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)SUBPARTITION BY HASH(a)(PARTITION p0 VALUES LESS THAN (100) (SUBPARTITION sp0,  SUBPARTITION sp1), PARTITION p1 VALUES LESS THAN MAXVALUE (SUBPARTITION sp2,  SUBPARTITION sp3));
INSERT INTO t VALUES (1, "First value"), (3, "Three"), (5, "Five"),                     (6, "Six"), (8, "Eight"), (99, "End of values");
INSERT INTO tp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"),(200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"),(63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"),(163, "163"), (164, "164");
INSERT INTO tsp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"),(200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"),(63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"),(163, "163"), (164, "164");
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITH VALIDATION;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM t;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
SELECT * FROM t;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
SELECT * FROM t;
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t;
SELECT * FROM t;
SELECT * FROM tsp PARTITION (sp3);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
ALTER TABLE tp REBUILD PARTITION p1;
ALTER TABLE tp REORGANIZE PARTITION p1 INTO(PARTITION p1 VALUES LESS THAN (162), PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tp ANALYZE PARTITION p1;
ALTER TABLE tp OPTIMIZE PARTITION p1;
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp REBUILD PARTITION p1;
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO(PARTITION p1 VALUES LESS THAN (162), PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tsp ANALYZE PARTITION sp3;
ALTER TABLE tsp OPTIMIZE PARTITION sp3;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp REBUILD PARTITION p1;
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO(PARTITION p1 VALUES LESS THAN (162), PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO(PARTITION p01 VALUES LESS THAN (162) (SUBPARTITION sp01,  SUBPARTITION sp02), PARTITION p02 VALUES LESS THAN MAXVALUE (SUBPARTITION sp03,  SUBPARTITION sp04));
ALTER TABLE tsp ANALYZE PARTITION sp3;
ALTER TABLE tsp OPTIMIZE PARTITION sp3;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
DROP TABLE t, tp, tsp;
SET sql_mode = default;
SET GLOBAL innodb_default_row_format=default;
eval CREATE TABLE t1 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBDATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
eval CREATE TABLE t2 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBPARTITION BY LIST (a)(PARTITION p1 VALUES IN (1,3,5,7,9) DATA DIRECTORY = '$MYSQL_TMP_DIR/p1_dir', PARTITION p2 VALUES IN (0,2,4,6,8) DATA DIRECTORY = '$MYSQL_TMP_DIR/p2_dir');
INSERT INTO t1 VALUES (1, "t1"), (5, "t1");
INSERT INTO t2 VALUES (3, "p1"), (4, "p2"), (7, "p1"), (8, "p2");
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
FLUSH TABLES t1, t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
DROP TABLE t1, t2;
  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result                if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }            if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                                if ($show_rpl_debug_info)  {  }  if ($assert_no_stop) {    if (!$show_rpl_debug_info) {          }  }          if (!$assert_no_stop) {      }  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result                if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }            if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                                if ($show_rpl_debug_info)  {  }  if ($assert_no_stop) {    if (!$show_rpl_debug_info) {          }  }          if (!$assert_no_stop) {      }eval CREATE TABLE t1 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBDATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
eval CREATE TABLE t2 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBPARTITION BY range (a)(PARTITION p1 VALUES less than (10) DATA DIRECTORY = '$MYSQL_TMP_DIR/p1_dir', PARTITION p2 VALUES less than (20) DATA DIRECTORY = '$MYSQL_TMP_DIR/p2_dir');
INSERT INTO t1 VALUES (1, "t1"), (5, "t1");
INSERT INTO t2 VALUES (3, "p1"), (4, "p2"), (17, "p1"), (12, "p2");
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
FLUSH TABLES t1, t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
DROP table t1,t2;
eval CREATE TABLE t1 (id INT, purchased DATE)ENGINE = InnoDBDATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
eval CREATE TABLE t2 (id INT, purchased DATE)PARTITION BY RANGE( YEAR(purchased) )SUBPARTITION BY HASH( TO_DAYS(purchased) ) (PARTITION p0 VALUES LESS THAN (1990) (SUBPARTITION s0 data directory='$MYSQL_TMP_DIR/sp0_dir',SUBPARTITION s1),PARTITION p1 VALUES LESS THAN (2000) (SUBPARTITION s2,SUBPARTITION s3 data directory='$MYSQL_TMP_DIR/sp3_dir'));
insert into t2 values(1,'1987-05-12 '),(2,'1987-05-14');
insert into t2 values(3,'1997-05-10 '),(4,'1997-05-18');
insert into t1 values(1,'1987-05-10 '),(2,'1987-05-08');
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s0 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s0 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
delete from t1;
insert into t1 values(3,'1997-05-8 '),(4,'1997-05-16');
ALTER TABLE t2 EXCHANGE PARTITION s3 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s3 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
DROP table t1,t2;
CREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB ;
CREATE TABLE t2 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB PARTITION BY LIST (a) (PARTITION p1 VALUES IN (1,3,5,7,9) ,PARTITION p2 VALUES IN (0,2,4,6,8) );
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
ALTER TABLE t2 ADD COLUMN j INT,ALGORITHM=INSTANT;
ALTER TABLE t2 ADD COLUMN k INT,ALGORITHM=COPY;
 DROP TABLE t1,t2;
CREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB ;
CREATE TABLE t2 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB PARTITION BY LIST (a) (PARTITION p1 VALUES IN (1,3,5,7,9) ,PARTITION p2 VALUES IN (0,2,4,6,8) );
ALTER TABLE t2 EXCHANGE PARTITION p2 WITH TABLE t1;
ALTER TABLE t2 ADD COLUMN j INT,ALGORITHM=INSTANT;
ALTER TABLE t2 ADD COLUMN k INT,ALGORITHM=COPY;
DROP TABLE t1,t2;
SET @orig_default_row_format = @@global.innodb_default_row_format;
SET GLOBAL innodb_default_row_format=COMPACT;
CREATE TABLE t1 (  col1 INT UNSIGNED,  col2 DATETIMEENGINE=INNODBPARTITION BY RANGE COLUMNS(col2)PARTITION p0 VALUES LESS THAN ('1960-01-01'),PARTITION p1 VALUES LESS THAN ('1980-01-01'));
INSERT INTO t1 VALUES ('1','1958-02-17 06:25:34');
INSERT INTO t1 VALUES ('2','1962-11-23 11:06:06');
SET GLOBAL innodb_default_row_format=DYNAMIC;
ALTER TABLE t1 ADD PARTITION (PARTITION p2 VALUES LESS THAN ('2000-01-01'));
INSERT INTO t1 VALUES ('3','1999-10-13 05:28:46'), ('4', '1996-09-26 20:00:00');
SELECT NAME,ROW_FORMAT  FROM INFORMATION_SCHEMA.INNODB_TABLESWHERE NAME LIKE '%t1%' ORDER BY TABLE_ID;
CREATE TABLE t2 LIKE t1;
ALTER TABLE t2 REMOVE PARTITIONING;
ALTER TABLE t1 EXCHANGE PARTITION p0 WITH TABLE t2;
ALTER TABLE t1 EXCHANGE PARTITION p2 WITH TABLE t2;
DROP TABLE t1,t2;
SET GLOBAL innodb_default_row_format=COMPACT;
CREATE TABLE t1 (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)SUBPARTITION BY HASH(a)(PARTITION p0 VALUES LESS THAN (100) (SUBPARTITION sp0,  SUBPARTITION sp1), PARTITION p1 VALUES LESS THAN  (200) (SUBPARTITION sp2,  SUBPARTITION sp3));
SET GLOBAL innodb_default_row_format=DYNAMIC;
ALTER TABLE t1 ADD PARTITION (PARTITION p2 VALUES LESS THAN (300)(SUBPARTITION sp4,SUBPARTITION sp5));
INSERT INTO t1(b,a) VALUES('first',40),('second',91),('third',140),('forth',191);
SELECT NAME,ROW_FORMAT  FROM INFORMATION_SCHEMA.INNODB_TABLESWHERE NAME LIKE '%t1%' ORDER BY TABLE_ID;
CREATE TABLE t2 like t1;
ALTER TABLE t2 REMOVE PARTITIONING;
ALTER TABLE t1 EXCHANGE PARTITION sp2 WITH TABLE t2;
ALTER TABLE t1 EXCHANGE PARTITION sp4 WITH TABLE t2;
DROP TABLE t1,t2;
SET @@global.innodb_default_row_format=@orig_default_row_format;
SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
SET GLOBAL innodb_default_row_format=compact;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT=COMPACTPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 LIKE t1;
ALTER TABLE t2 REMOVE PARTITIONING;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDBPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = COMPACT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDBPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANTPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDBPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = COMPACTPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1_1 (  `col1` int(11) DEFAULT NULL,  `col2` int(11) DEFAULT NULL,  `col3` int(11) DEFAULT NULL,  `col4` text,  `col5` varchar(500) GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL,  `col6` text GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci/*!50100 PARTITION BY RANGE ((`col1` * 2))(PARTITION p0 VALUES LESS THAN (128) ENGINE = InnoDB, PARTITION p1 VALUES LESS THAN (256) ENGINE = InnoDB, PARTITION p2 VALUES LESS THAN (384) ENGINE = InnoDB, PARTITION p3 VALUES LESS THAN MAXVALUE ENGINE = InnoDB) */;
CREATE TABLE temp25058 AS SELECT * FROM t1_1 WHERE 1 <> 1;
SHOW CREATE TABLE temp25058;
SELECT * FROM temp25058;
ALTER TABLE t1_1 ALGORITHM DEFAULT , LOCK SHARED ,EXCHANGE PARTITION p2 WITH TABLE temp25058;
SHOW CREATE TABLE temp25058;
SELECT * FROM temp25058;
DROP TABLE temp25058;
DROP TABLE t1_1;
CREATE TABLE t1 (a INT NOT NULL, b TIME NOT NULL DEFAULT '00:00:00')ENGINE=InnoDBPARTITION BY HASH (a) PARTITIONS 2;
CREATE TABLE t2 (a INT) ENGINE=InnoDB;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
DROP TABLE t1, t2;
CREATE TABLE t1 (s1 INT PRIMARY KEY) ENGINE=InnoDB;
CREATE TABLE t2 (s1 INT, FOREIGN KEY (s1) REFERENCES t1 (s1)) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1),(2),(3);
INSERT INTO t2 VALUES (1),(2),(3);
CREATE TABLE t3 (s1 INT PRIMARY KEY)  ENGINE=InnoDB  PARTITION BY LIST (s1)  (PARTITION p1 VALUES IN (1,2,3));
ALTER TABLE t3 EXCHANGE PARTITION p1 WITH TABLE t1;
DROP TABLE t2, t1, t3;
CREATE TABLE t (a INT,  b VARCHAR(55),  PRIMARY KEY (a));
CREATE TABLE tp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)(PARTITION p0 VALUES LESS THAN (100), PARTITION p1 VALUES LESS THAN MAXVALUE);
CREATE TABLE tsp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)SUBPARTITION BY HASH(a)(PARTITION p0 VALUES LESS THAN (100) (SUBPARTITION sp0,  SUBPARTITION sp1), PARTITION p1 VALUES LESS THAN MAXVALUE (SUBPARTITION sp2,  SUBPARTITION sp3));
INSERT INTO t VALUES (1, "First value"), (3, "Three"), (5, "Five"), (99, "End of values");
INSERT INTO tp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"), (200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"), (63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"), (163, "163"), (164, "164");
INSERT INTO tsp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"), (200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"), (63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"), (163, "163"), (164, "164");
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t IGNORE;
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t IGNORE;
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION (p0,p1) WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE (t,t2);
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t,t2;
ALTER TABLE tp EXCHANGE PARTITION non_existent WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION sp0 WITH TABLE tp;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SHOW CREATE TABLE tsp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
SELECT * FROM t;
SELECT * FROM tsp;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t ENGINE = InnoDB;
ALTER TABLE tp ENGINE = InnoDB;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
CREATE TABLE tmp LIKE t;
INSERT INTO tmp SELECT * FROM t;
RENAME TABLE t TO tmp2, tmp TO t;
ALTER TABLE t CHARACTER SET = koi8r COLLATE koi8r_general_ci;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
DROP TABLE t;
CREATE TABLE t (a INT,  b VARCHAR(55),  PRIMARY KEY (a))MAX_ROWS = 100000 MIN_ROWS = 1000;
INSERT INTO t SELECT * FROM tmp2;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW WARNINGS;
DROP TABLE t;
RENAME TABLE tmp2 TO t;
ALTER TABLE t ADD KEY ba_key (b, a);
ALTER TABLE tp ADD KEY ba_key (b, a);
ALTER TABLE tsp ADD KEY ba_key (b, a);
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE t DROP KEY ba_key;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE t ADD KEY b_key (b);
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t ADD KEY ba_key (b, a);
ALTER TABLE t DROP KEY b_key;
ALTER TABLE t CHANGE a c INT;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t CHANGE c a INT;
CREATE TEMPORARY TABLE tmp LIKE t;
INSERT INTO tmp SELECT * FROM t;
ALTER TABLE t RENAME TO tmp2;
ALTER TABLE tmp RENAME TO t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
DROP TEMPORARY TABLE t;
ALTER TABLE tmp2 RENAME TO t;
ALTER TABLE tp REMOVE PARTITIONING;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
DROP TABLE t, tp, tsp;
CREATE TABLE tp(a VARCHAR(24), b DATETIME, PRIMARY KEY (a,b))PARTITION BY RANGE COLUMNS (a, b)(PARTITION p0 VALUES LESS THAN ("Middle", '0000-00-00'), PARTITION p1 VALUES LESS THAN (MAXVALUE, '9999-12-31 23:59:59'));
CREATE TABLE t LIKE tp;
ALTER TABLE t REMOVE PARTITIONING;
CREATE TABLE t2 LIKE t;
INSERT INTO tp VALUES ("First in tp", '2000-01-02 03:04:25'), ("Zebra in tp", '0000-00-00 00:00:00'), ("Second in tp", '2010-01-01 05:12:24');
INSERT INTO t VALUES ("First in t", '2000-01-02 03:04:25'), ("a test in t", '0000-00-00 00:00:00'), ("Echo in t", '2010-01-01 05:12:24');
while ($count)  let $lock_cmd = $lock_cmd t $t_lock;
  let $take_lock = 1;
  if ($take_lock)  {    let $lock_cmd = $lock_cmd, tp $tp_lock;
  }  if (!$take_lock)  {    let $lock_cmd = $lock_cmd tp $tp_lock;
  }  let $take_lock = 1;
  if ($take_lock)  {    let $lock_cmd = $lock_cmd, t2 $t2_lock;
  }  if (!$take_lock)  {    let $lock_cmd = $lock_cmd t2 $t2_lock;
  }  let $take_lock = 1;
  eval $lock_cmd;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW WARNINGS;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t2;
SHOW WARNINGS;
UNLOCK TABLES;
dec $count;
DROP TABLE t, t2, tp;
CREATE TABLE t (a INT,  b VARCHAR(55),  PRIMARY KEY (a));
CREATE TABLE tp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)(PARTITION p0 VALUES LESS THAN (100), PARTITION p1 VALUES LESS THAN MAXVALUE);
CREATE TABLE tsp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)SUBPARTITION BY HASH(a)(PARTITION p0 VALUES LESS THAN (100) (SUBPARTITION sp0,  SUBPARTITION sp1), PARTITION p1 VALUES LESS THAN MAXVALUE (SUBPARTITION sp2,  SUBPARTITION sp3));
INSERT INTO t VALUES (1, "First value"), (3, "Three"), (5, "Five"),                     (6, "Six"), (8, "Eight"), (99, "End of values");
INSERT INTO tp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"),(200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"),(63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"),(163, "163"), (164, "164");
INSERT INTO tsp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"),(200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"),(63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"),(163, "163"), (164, "164");
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITH VALIDATION;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM t;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
SELECT * FROM t;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
SELECT * FROM t;
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t;
SELECT * FROM t;
SELECT * FROM tsp PARTITION (sp3);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
ALTER TABLE tp REBUILD PARTITION p1;
ALTER TABLE tp REORGANIZE PARTITION p1 INTO(PARTITION p1 VALUES LESS THAN (162), PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tp ANALYZE PARTITION p1;
ALTER TABLE tp OPTIMIZE PARTITION p1;
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp REBUILD PARTITION p1;
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO(PARTITION p1 VALUES LESS THAN (162), PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tsp ANALYZE PARTITION sp3;
ALTER TABLE tsp OPTIMIZE PARTITION sp3;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp REBUILD PARTITION p1;
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO(PARTITION p1 VALUES LESS THAN (162), PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO(PARTITION p01 VALUES LESS THAN (162) (SUBPARTITION sp01,  SUBPARTITION sp02), PARTITION p02 VALUES LESS THAN MAXVALUE (SUBPARTITION sp03,  SUBPARTITION sp04));
ALTER TABLE tsp ANALYZE PARTITION sp3;
ALTER TABLE tsp OPTIMIZE PARTITION sp3;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
DROP TABLE t, tp, tsp;
SET sql_mode = default;
SET GLOBAL innodb_default_row_format=default;
eval CREATE TABLE t1 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBDATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
eval CREATE TABLE t2 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBPARTITION BY LIST (a)(PARTITION p1 VALUES IN (1,3,5,7,9) DATA DIRECTORY = '$MYSQL_TMP_DIR/p1_dir', PARTITION p2 VALUES IN (0,2,4,6,8) DATA DIRECTORY = '$MYSQL_TMP_DIR/p2_dir');
INSERT INTO t1 VALUES (1, "t1"), (5, "t1");
INSERT INTO t2 VALUES (3, "p1"), (4, "p2"), (7, "p1"), (8, "p2");
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
FLUSH TABLES t1, t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
DROP TABLE t1, t2;
  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result                if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }            if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                                if ($show_rpl_debug_info)  {  }  if ($assert_no_stop) {    if (!$show_rpl_debug_info) {          }  }          if (!$assert_no_stop) {      }  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result                if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }            if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                                if ($show_rpl_debug_info)  {  }  if ($assert_no_stop) {    if (!$show_rpl_debug_info) {          }  }          if (!$assert_no_stop) {      }eval CREATE TABLE t1 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBDATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
eval CREATE TABLE t2 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBPARTITION BY range (a)(PARTITION p1 VALUES less than (10) DATA DIRECTORY = '$MYSQL_TMP_DIR/p1_dir', PARTITION p2 VALUES less than (20) DATA DIRECTORY = '$MYSQL_TMP_DIR/p2_dir');
INSERT INTO t1 VALUES (1, "t1"), (5, "t1");
INSERT INTO t2 VALUES (3, "p1"), (4, "p2"), (17, "p1"), (12, "p2");
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
FLUSH TABLES t1, t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
DROP table t1,t2;
eval CREATE TABLE t1 (id INT, purchased DATE)ENGINE = InnoDBDATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
eval CREATE TABLE t2 (id INT, purchased DATE)PARTITION BY RANGE( YEAR(purchased) )SUBPARTITION BY HASH( TO_DAYS(purchased) ) (PARTITION p0 VALUES LESS THAN (1990) (SUBPARTITION s0 data directory='$MYSQL_TMP_DIR/sp0_dir',SUBPARTITION s1),PARTITION p1 VALUES LESS THAN (2000) (SUBPARTITION s2,SUBPARTITION s3 data directory='$MYSQL_TMP_DIR/sp3_dir'));
insert into t2 values(1,'1987-05-12 '),(2,'1987-05-14');
insert into t2 values(3,'1997-05-10 '),(4,'1997-05-18');
insert into t1 values(1,'1987-05-10 '),(2,'1987-05-08');
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s0 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s0 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
delete from t1;
insert into t1 values(3,'1997-05-8 '),(4,'1997-05-16');
ALTER TABLE t2 EXCHANGE PARTITION s3 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s3 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
DROP table t1,t2;
CREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB ;
CREATE TABLE t2 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB PARTITION BY LIST (a) (PARTITION p1 VALUES IN (1,3,5,7,9) ,PARTITION p2 VALUES IN (0,2,4,6,8) );
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
ALTER TABLE t2 ADD COLUMN j INT,ALGORITHM=INSTANT;
ALTER TABLE t2 ADD COLUMN k INT,ALGORITHM=COPY;
 DROP TABLE t1,t2;
CREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB ;
CREATE TABLE t2 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB PARTITION BY LIST (a) (PARTITION p1 VALUES IN (1,3,5,7,9) ,PARTITION p2 VALUES IN (0,2,4,6,8) );
ALTER TABLE t2 EXCHANGE PARTITION p2 WITH TABLE t1;
ALTER TABLE t2 ADD COLUMN j INT,ALGORITHM=INSTANT;
ALTER TABLE t2 ADD COLUMN k INT,ALGORITHM=COPY;
DROP TABLE t1,t2;
SET @orig_default_row_format = @@global.innodb_default_row_format;
SET GLOBAL innodb_default_row_format=COMPACT;
CREATE TABLE t1 (  col1 INT UNSIGNED,  col2 DATETIMEENGINE=INNODBPARTITION BY RANGE COLUMNS(col2)PARTITION p0 VALUES LESS THAN ('1960-01-01'),PARTITION p1 VALUES LESS THAN ('1980-01-01'));
INSERT INTO t1 VALUES ('1','1958-02-17 06:25:34');
INSERT INTO t1 VALUES ('2','1962-11-23 11:06:06');
SET GLOBAL innodb_default_row_format=DYNAMIC;
ALTER TABLE t1 ADD PARTITION (PARTITION p2 VALUES LESS THAN ('2000-01-01'));
INSERT INTO t1 VALUES ('3','1999-10-13 05:28:46'), ('4', '1996-09-26 20:00:00');
SELECT NAME,ROW_FORMAT  FROM INFORMATION_SCHEMA.INNODB_TABLESWHERE NAME LIKE '%t1%' ORDER BY TABLE_ID;
CREATE TABLE t2 LIKE t1;
ALTER TABLE t2 REMOVE PARTITIONING;
ALTER TABLE t1 EXCHANGE PARTITION p0 WITH TABLE t2;
ALTER TABLE t1 EXCHANGE PARTITION p2 WITH TABLE t2;
DROP TABLE t1,t2;
SET GLOBAL innodb_default_row_format=COMPACT;
CREATE TABLE t1 (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)SUBPARTITION BY HASH(a)(PARTITION p0 VALUES LESS THAN (100) (SUBPARTITION sp0,  SUBPARTITION sp1), PARTITION p1 VALUES LESS THAN  (200) (SUBPARTITION sp2,  SUBPARTITION sp3));
SET GLOBAL innodb_default_row_format=DYNAMIC;
ALTER TABLE t1 ADD PARTITION (PARTITION p2 VALUES LESS THAN (300)(SUBPARTITION sp4,SUBPARTITION sp5));
INSERT INTO t1(b,a) VALUES('first',40),('second',91),('third',140),('forth',191);
SELECT NAME,ROW_FORMAT  FROM INFORMATION_SCHEMA.INNODB_TABLESWHERE NAME LIKE '%t1%' ORDER BY TABLE_ID;
CREATE TABLE t2 like t1;
ALTER TABLE t2 REMOVE PARTITIONING;
ALTER TABLE t1 EXCHANGE PARTITION sp2 WITH TABLE t2;
ALTER TABLE t1 EXCHANGE PARTITION sp4 WITH TABLE t2;
DROP TABLE t1,t2;
SET @@global.innodb_default_row_format=@orig_default_row_format;
SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
SET GLOBAL innodb_default_row_format=compact;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT=COMPACTPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 LIKE t1;
ALTER TABLE t2 REMOVE PARTITIONING;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDBPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = COMPACT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDBPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANTPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDBPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = COMPACTPARTITION BY HASH (id)PARTITIONS 2;
CREATE TABLE t2 ( id int(11) NOT NULL AUTO_INCREMENT, year year DEFAULT NULL, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONSFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
DROP TABLE t1, t2;
CREATE TABLE t1_1 (  `col1` int(11) DEFAULT NULL,  `col2` int(11) DEFAULT NULL,  `col3` int(11) DEFAULT NULL,  `col4` text,  `col5` varchar(500) GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL,  `col6` text GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci/*!50100 PARTITION BY RANGE ((`col1` * 2))(PARTITION p0 VALUES LESS THAN (128) ENGINE = InnoDB, PARTITION p1 VALUES LESS THAN (256) ENGINE = InnoDB, PARTITION p2 VALUES LESS THAN (384) ENGINE = InnoDB, PARTITION p3 VALUES LESS THAN MAXVALUE ENGINE = InnoDB) */;
CREATE TABLE temp25058 AS SELECT * FROM t1_1 WHERE 1 <> 1;
SHOW CREATE TABLE temp25058;
SELECT * FROM temp25058;
ALTER TABLE t1_1 ALGORITHM DEFAULT , LOCK SHARED ,EXCHANGE PARTITION p2 WITH TABLE temp25058;
SHOW CREATE TABLE temp25058;
SELECT * FROM temp25058;
DROP TABLE temp25058;
DROP TABLE t1_1;
CREATE TABLE t1 (a INT NOT NULL, b TIME NOT NULL DEFAULT '00:00:00')ENGINE=InnoDBPARTITION BY HASH (a) PARTITIONS 2;
CREATE TABLE t2 (a INT) ENGINE=InnoDB;
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
DROP TABLE t1, t2;
CREATE TABLE t1 (s1 INT PRIMARY KEY) ENGINE=InnoDB;
CREATE TABLE t2 (s1 INT, FOREIGN KEY (s1) REFERENCES t1 (s1)) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1),(2),(3);
INSERT INTO t2 VALUES (1),(2),(3);
CREATE TABLE t3 (s1 INT PRIMARY KEY)  ENGINE=InnoDB  PARTITION BY LIST (s1)  (PARTITION p1 VALUES IN (1,2,3));
ALTER TABLE t3 EXCHANGE PARTITION p1 WITH TABLE t1;
DROP TABLE t2, t1, t3;
CREATE TABLE t (a INT,  b VARCHAR(55),  PRIMARY KEY (a));
CREATE TABLE tp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)(PARTITION p0 VALUES LESS THAN (100), PARTITION p1 VALUES LESS THAN MAXVALUE);
CREATE TABLE tsp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)SUBPARTITION BY HASH(a)(PARTITION p0 VALUES LESS THAN (100) (SUBPARTITION sp0,  SUBPARTITION sp1), PARTITION p1 VALUES LESS THAN MAXVALUE (SUBPARTITION sp2,  SUBPARTITION sp3));
INSERT INTO t VALUES (1, "First value"), (3, "Three"), (5, "Five"), (99, "End of values");
INSERT INTO tp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"), (200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"), (63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"), (163, "163"), (164, "164");
INSERT INTO tsp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"), (200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"), (63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"), (163, "163"), (164, "164");
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t IGNORE;
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t IGNORE;
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION (p0,p1) WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE (t,t2);
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t,t2;
ALTER TABLE tp EXCHANGE PARTITION non_existent WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION sp0 WITH TABLE tp;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SHOW CREATE TABLE tsp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
SELECT * FROM t;
SELECT * FROM tsp;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t ENGINE = InnoDB;
ALTER TABLE tp ENGINE = InnoDB;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
CREATE TABLE tmp LIKE t;
INSERT INTO tmp SELECT * FROM t;
RENAME TABLE t TO tmp2, tmp TO t;
ALTER TABLE t CHARACTER SET = koi8r COLLATE koi8r_general_ci;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
DROP TABLE t;
CREATE TABLE t (a INT,  b VARCHAR(55),  PRIMARY KEY (a))MAX_ROWS = 100000 MIN_ROWS = 1000;
INSERT INTO t SELECT * FROM tmp2;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW WARNINGS;
DROP TABLE t;
RENAME TABLE tmp2 TO t;
ALTER TABLE t ADD KEY ba_key (b, a);
ALTER TABLE tp ADD KEY ba_key (b, a);
ALTER TABLE tsp ADD KEY ba_key (b, a);
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE t DROP KEY ba_key;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE t ADD KEY b_key (b);
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t ADD KEY ba_key (b, a);
ALTER TABLE t DROP KEY b_key;
ALTER TABLE t CHANGE a c INT;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t CHANGE c a INT;
CREATE TEMPORARY TABLE tmp LIKE t;
INSERT INTO tmp SELECT * FROM t;
ALTER TABLE t RENAME TO tmp2;
ALTER TABLE tmp RENAME TO t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
DROP TEMPORARY TABLE t;
ALTER TABLE tmp2 RENAME TO t;
ALTER TABLE tp REMOVE PARTITIONING;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
DROP TABLE t, tp, tsp;
CREATE TABLE tp(a VARCHAR(24), b DATETIME, PRIMARY KEY (a,b))PARTITION BY RANGE COLUMNS (a, b)(PARTITION p0 VALUES LESS THAN ("Middle", '0000-00-00'), PARTITION p1 VALUES LESS THAN (MAXVALUE, '9999-12-31 23:59:59'));
CREATE TABLE t LIKE tp;
ALTER TABLE t REMOVE PARTITIONING;
CREATE TABLE t2 LIKE t;
INSERT INTO tp VALUES ("First in tp", '2000-01-02 03:04:25'), ("Zebra in tp", '0000-00-00 00:00:00'), ("Second in tp", '2010-01-01 05:12:24');
INSERT INTO t VALUES ("First in t", '2000-01-02 03:04:25'), ("a test in t", '0000-00-00 00:00:00'), ("Echo in t", '2010-01-01 05:12:24');
while ($count)  let $lock_cmd = $lock_cmd t $t_lock;
  let $take_lock = 1;
  if ($take_lock)  {    let $lock_cmd = $lock_cmd, tp $tp_lock;
  }  if (!$take_lock)  {    let $lock_cmd = $lock_cmd tp $tp_lock;
  }  let $take_lock = 1;
  if ($take_lock)  {    let $lock_cmd = $lock_cmd, t2 $t2_lock;
  }  if (!$take_lock)  {    let $lock_cmd = $lock_cmd t2 $t2_lock;
  }  let $take_lock = 1;
  eval $lock_cmd;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW WARNINGS;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t2;
SHOW WARNINGS;
UNLOCK TABLES;
dec $count;
DROP TABLE t, t2, tp;
CREATE TABLE t (a INT,  b VARCHAR(55),  PRIMARY KEY (a));
CREATE TABLE tp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)(PARTITION p0 VALUES LESS THAN (100), PARTITION p1 VALUES LESS THAN MAXVALUE);
CREATE TABLE tsp (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)SUBPARTITION BY HASH(a)(PARTITION p0 VALUES LESS THAN (100) (SUBPARTITION sp0,  SUBPARTITION sp1), PARTITION p1 VALUES LESS THAN MAXVALUE (SUBPARTITION sp2,  SUBPARTITION sp3));
INSERT INTO t VALUES (1, "First value"), (3, "Three"), (5, "Five"),                     (6, "Six"), (8, "Eight"), (99, "End of values");
INSERT INTO tp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"),(200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"),(63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"),(163, "163"), (164, "164");
INSERT INTO tsp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"),(200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"),(63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"),(163, "163"), (164, "164");
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITH VALIDATION;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM t;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
SELECT * FROM t;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SELECT * FROM t;
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
SELECT * FROM t;
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t;
SELECT * FROM t;
SELECT * FROM tsp PARTITION (sp3);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
ALTER TABLE tp REBUILD PARTITION p1;
ALTER TABLE tp REORGANIZE PARTITION p1 INTO(PARTITION p1 VALUES LESS THAN (162), PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tp ANALYZE PARTITION p1;
ALTER TABLE tp OPTIMIZE PARTITION p1;
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp REBUILD PARTITION p1;
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO(PARTITION p1 VALUES LESS THAN (162), PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tsp ANALYZE PARTITION sp3;
ALTER TABLE tsp OPTIMIZE PARTITION sp3;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp REBUILD PARTITION p1;
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO(PARTITION p1 VALUES LESS THAN (162), PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO(PARTITION p01 VALUES LESS THAN (162) (SUBPARTITION sp01,  SUBPARTITION sp02), PARTITION p02 VALUES LESS THAN MAXVALUE (SUBPARTITION sp03,  SUBPARTITION sp04));
ALTER TABLE tsp ANALYZE PARTITION sp3;
ALTER TABLE tsp OPTIMIZE PARTITION sp3;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
DROP TABLE t, tp, tsp;
SET sql_mode = default;
SET GLOBAL innodb_default_row_format=default;
eval CREATE TABLE t1 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBDATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
eval CREATE TABLE t2 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBPARTITION BY LIST (a)(PARTITION p1 VALUES IN (1,3,5,7,9) DATA DIRECTORY = '$MYSQL_TMP_DIR/p1_dir', PARTITION p2 VALUES IN (0,2,4,6,8) DATA DIRECTORY = '$MYSQL_TMP_DIR/p2_dir');
INSERT INTO t1 VALUES (1, "t1"), (5, "t1");
INSERT INTO t2 VALUES (3, "p1"), (4, "p2"), (7, "p1"), (8, "p2");
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
FLUSH TABLES t1, t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
DROP TABLE t1, t2;
  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result                if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }            if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                                if ($show_rpl_debug_info)  {  }  if ($assert_no_stop) {    if (!$show_rpl_debug_info) {          }  }          if (!$assert_no_stop) {      }  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result                if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }            if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                                if ($show_rpl_debug_info)  {  }  if ($assert_no_stop) {    if (!$show_rpl_debug_info) {          }  }          if (!$assert_no_stop) {      }eval CREATE TABLE t1 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBDATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
eval CREATE TABLE t2 (a int unsigned auto_increment primary key, b varchar(64))ENGINE = InnoDBPARTITION BY range (a)(PARTITION p1 VALUES less than (10) DATA DIRECTORY = '$MYSQL_TMP_DIR/p1_dir', PARTITION p2 VALUES less than (20) DATA DIRECTORY = '$MYSQL_TMP_DIR/p2_dir');
INSERT INTO t1 VALUES (1, "t1"), (5, "t1");
INSERT INTO t2 VALUES (3, "p1"), (4, "p2"), (17, "p1"), (12, "p2");
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
FLUSH TABLES t1, t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
DROP table t1,t2;
eval CREATE TABLE t1 (id INT, purchased DATE)ENGINE = InnoDBDATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
eval CREATE TABLE t2 (id INT, purchased DATE)PARTITION BY RANGE( YEAR(purchased) )SUBPARTITION BY HASH( TO_DAYS(purchased) ) (PARTITION p0 VALUES LESS THAN (1990) (SUBPARTITION s0 data directory='$MYSQL_TMP_DIR/sp0_dir',SUBPARTITION s1),PARTITION p1 VALUES LESS THAN (2000) (SUBPARTITION s2,SUBPARTITION s3 data directory='$MYSQL_TMP_DIR/sp3_dir'));
insert into t2 values(1,'1987-05-12 '),(2,'1987-05-14');
insert into t2 values(3,'1997-05-10 '),(4,'1997-05-18');
insert into t1 values(1,'1987-05-10 '),(2,'1987-05-08');
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s0 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s0 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
delete from t1;
insert into t1 values(3,'1997-05-8 '),(4,'1997-05-16');
ALTER TABLE t2 EXCHANGE PARTITION s3 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s3 WITH TABLE t1;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
DROP table t1,t2;
CREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB ;
CREATE TABLE t2 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB PARTITION BY LIST (a) (PARTITION p1 VALUES IN (1,3,5,7,9) ,PARTITION p2 VALUES IN (0,2,4,6,8) );
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
ALTER TABLE t2 ADD COLUMN j INT,ALGORITHM=INSTANT;
ALTER TABLE t2 ADD COLUMN k INT,ALGORITHM=COPY;
 DROP TABLE t1,t2;
CREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB ;
CREATE TABLE t2 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB PARTITION BY LIST (a) (PARTITION p1 VALUES IN (1,3,5,7,9) ,PARTITION p2 VALUES IN (0,2,4,6,8) );
ALTER TABLE t2 EXCHANGE PARTITION p2 WITH TABLE t1;
ALTER TABLE t2 ADD COLUMN j INT,ALGORITHM=INSTANT;
ALTER TABLE t2 ADD COLUMN k INT,ALGORITHM=COPY;
DROP TABLE t1,t2;
SET @orig_default_row_format = @@global.innodb_default_row_format;
SET GLOBAL innodb_default_row_format=COMPACT;
CREATE TABLE t1 (  col1 INT UNSIGNED,  col2 DATETIMEENGINE=INNODBPARTITION BY RANGE COLUMNS(col2)PARTITION p0 VALUES LESS THAN ('1960-01-01'),PARTITION p1 VALUES LESS THAN ('1980-01-01'));
INSERT INTO t1 VALUES ('1','1958-02-17 06:25:34');
INSERT INTO t1 VALUES ('2','1962-11-23 11:06:06');
SET GLOBAL innodb_default_row_format=DYNAMIC;
ALTER TABLE t1 ADD PARTITION (PARTITION p2 VALUES LESS THAN ('2000-01-01'));
INSERT INTO t1 VALUES ('3','1999-10-13 05:28:46'), ('4', '1996-09-26 20:00:00');
SELECT NAME,ROW_FORMAT  FROM INFORMATION_SCHEMA.INNODB_TABLESWHERE NAME LIKE '%t1%' ORDER BY TABLE_ID;
CREATE TABLE t2 LIKE t1;
ALTER TABLE t2 REMOVE PARTITIONING;
ALTER TABLE t1 EXCHANGE PARTITION p0 WITH TABLE t2;
ALTER TABLE t1 EXCHANGE PARTITION p2 WITH TABLE t2;
DROP TABLE t1,t2;
SET GLOBAL innodb_default_row_format=COMPACT;
CREATE TABLE t1 (a INT,  b VARCHAR(55),  PRIMARY KEY (a))PARTITION BY RANGE (a)SUBPARTITION BY HASH(a)(PARTITION p0 VALUES LESS THAN (100) (SUBPARTITION sp0,  SUBPARTITION sp1), PARTITION p1 VALUES LESS THAN  (200) (SUBPARTITION sp2,  SUBPARTITION sp3));
SET GLOBAL innodb_default_row_format=DYNAMIC;
ALTER TABLE t1 ADD PARTITION (PARTITION p2 VALUES LESS THAN (300)(SUBPARTITION sp4,SUBPARTITION sp5));
INSERT INTO t1(b,a) VALUES('first',40),('second',91),('third',140),('forth',191);
SELECT NAME,ROW_FORMAT  FROM INFORMATION_SCHEMA.INNODB_TABLESWHERE NAME LIKE '%t1%' ORDER BY TABLE_ID;
CREATE TABLE t2 like t1;
ALTER TABLE t2 REMOVE PARTITIONING;
ALTER TABLE t1 EXCHANGE PARTITION sp2 WITH TABLE t2;
ALTER TABLE t1 EXCHANGE PARTITION sp4 WITH TABLE t2;
DROP TABLE t1,t2;
SET @@global.innodb_default_row_format=@orig_default_row_format;
