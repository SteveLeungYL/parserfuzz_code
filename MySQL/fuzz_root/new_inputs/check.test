   let $wait_counter= `SELECT $wait_timeout * 10`;
while ($wait_counter)   let $current_sessions= query_get_value(SHOW GLOBAL STATUS LIKE 'Threads_connected', Value, 1);
   let $success= `SELECT $current_sessions <= $count_sessions`;
   if ($success)   {      let $wait_counter= 0;
   }   if (!$success)   {      sleep 0.1;
      dec $wait_counter;
   }         SHOW PROCESSLIST;
   connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connection con1;
drop table if exists t1,t2;
drop view if exists v1;
create table t1(n int not null, key(n), key(n), key(n), key(n));
disable_query_log;
while ($1) eval insert into t1 values ($1);
 dec $1;
enable_query_log;
send check table t1 extended;
connection con2;
insert into t1 values (200000);
connection con1;
reap;
connection default;
disconnect con1;
disconnect con2;
drop table t1;
Create table t1(f1 int);
Create table t2(f1 int);
Create view v1 as Select * from t1;
Check Table v1,t2;
drop view v1;
drop table t1, t2;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(a INT);
LOCK TABLE t1 WRITE;
connect(con1, localhost, root);
SET lock_wait_timeout= 1;
CHECK TABLE t1;
connection default;
UNLOCK TABLES;
DROP TABLE t1;
disconnect con1;
CREATE TABLE t1(i INT);
CHECK TABLE t1 FOR UPGRADE;
CHECK TABLE t1 FOR UPGRADE;
ALTER TABLE t1 CHANGE COLUMN i j INT, ALGORITHM=INPLACE;
CHECK TABLE t1 FOR UPGRADE;
ALTER TABLE t1 CHANGE COLUMN j k INT, ALGORITHM=COPY;
CHECK TABLE t1 FOR UPGRADE;
ALTER TABLE t1 ADD COLUMN l INT, ALGORITHM=INSTANT;
CHECK TABLE t1 FOR UPGRADE;
TRUNCATE TABLE t1;
CHECK TABLE t1 FOR UPGRADE;
DROP TABLE t1;
CREATE TEMPORARY TABLE tt1(i INT);
CHECK TABLE tt1 FOR UPGRADE;
DROP TABLE tt1;
   let $wait_counter= `SELECT $wait_timeout * 10`;
while ($wait_counter)   let $current_sessions= query_get_value(SHOW GLOBAL STATUS LIKE 'Threads_connected', Value, 1);
   let $success= `SELECT $current_sessions <= $count_sessions`;
   if ($success)   {      let $wait_counter= 0;
   }   if (!$success)   {      sleep 0.1;
      dec $wait_counter;
   }         SHOW PROCESSLIST;
   connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connection con1;
drop table if exists t1,t2;
drop view if exists v1;
create table t1(n int not null, key(n), key(n), key(n), key(n));
disable_query_log;
while ($1) eval insert into t1 values ($1);
 dec $1;
enable_query_log;
send check table t1 extended;
connection con2;
insert into t1 values (200000);
connection con1;
reap;
connection default;
disconnect con1;
disconnect con2;
drop table t1;
Create table t1(f1 int);
Create table t2(f1 int);
Create view v1 as Select * from t1;
Check Table v1,t2;
drop view v1;
drop table t1, t2;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(a INT);
LOCK TABLE t1 WRITE;
connect(con1, localhost, root);
SET lock_wait_timeout= 1;
CHECK TABLE t1;
connection default;
UNLOCK TABLES;
DROP TABLE t1;
disconnect con1;
CREATE TABLE t1(i INT);
CHECK TABLE t1 FOR UPGRADE;
CHECK TABLE t1 FOR UPGRADE;
ALTER TABLE t1 CHANGE COLUMN i j INT, ALGORITHM=INPLACE;
CHECK TABLE t1 FOR UPGRADE;
ALTER TABLE t1 CHANGE COLUMN j k INT, ALGORITHM=COPY;
CHECK TABLE t1 FOR UPGRADE;
ALTER TABLE t1 ADD COLUMN l INT, ALGORITHM=INSTANT;
CHECK TABLE t1 FOR UPGRADE;
TRUNCATE TABLE t1;
CHECK TABLE t1 FOR UPGRADE;
DROP TABLE t1;
CREATE TEMPORARY TABLE tt1(i INT);
CHECK TABLE tt1 FOR UPGRADE;
DROP TABLE tt1;
   let $wait_counter= `SELECT $wait_timeout * 10`;
while ($wait_counter)   let $current_sessions= query_get_value(SHOW GLOBAL STATUS LIKE 'Threads_connected', Value, 1);
   let $success= `SELECT $current_sessions <= $count_sessions`;
   if ($success)   {      let $wait_counter= 0;
   }   if (!$success)   {      sleep 0.1;
      dec $wait_counter;
   }         SHOW PROCESSLIST;
   connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connection con1;
drop table if exists t1,t2;
drop view if exists v1;
create table t1(n int not null, key(n), key(n), key(n), key(n));
disable_query_log;
while ($1) eval insert into t1 values ($1);
 dec $1;
enable_query_log;
send check table t1 extended;
connection con2;
insert into t1 values (200000);
connection con1;
reap;
connection default;
disconnect con1;
disconnect con2;
drop table t1;
Create table t1(f1 int);
Create table t2(f1 int);
Create view v1 as Select * from t1;
Check Table v1,t2;
drop view v1;
drop table t1, t2;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(a INT);
LOCK TABLE t1 WRITE;
connect(con1, localhost, root);
SET lock_wait_timeout= 1;
CHECK TABLE t1;
connection default;
UNLOCK TABLES;
DROP TABLE t1;
disconnect con1;
CREATE TABLE t1(i INT);
CHECK TABLE t1 FOR UPGRADE;
CHECK TABLE t1 FOR UPGRADE;
ALTER TABLE t1 CHANGE COLUMN i j INT, ALGORITHM=INPLACE;
CHECK TABLE t1 FOR UPGRADE;
ALTER TABLE t1 CHANGE COLUMN j k INT, ALGORITHM=COPY;
CHECK TABLE t1 FOR UPGRADE;
ALTER TABLE t1 ADD COLUMN l INT, ALGORITHM=INSTANT;
CHECK TABLE t1 FOR UPGRADE;
TRUNCATE TABLE t1;
CHECK TABLE t1 FOR UPGRADE;
DROP TABLE t1;
CREATE TEMPORARY TABLE tt1(i INT);
CHECK TABLE tt1 FOR UPGRADE;
DROP TABLE tt1;
   let $wait_counter= `SELECT $wait_timeout * 10`;
while ($wait_counter)   let $current_sessions= query_get_value(SHOW GLOBAL STATUS LIKE 'Threads_connected', Value, 1);
   let $success= `SELECT $current_sessions <= $count_sessions`;
   if ($success)   {      let $wait_counter= 0;
   }   if (!$success)   {      sleep 0.1;
      dec $wait_counter;
   }         SHOW PROCESSLIST;
   connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connection con1;
drop table if exists t1,t2;
drop view if exists v1;
create table t1(n int not null, key(n), key(n), key(n), key(n));
disable_query_log;
while ($1) eval insert into t1 values ($1);
 dec $1;
enable_query_log;
send check table t1 extended;
connection con2;
insert into t1 values (200000);
connection con1;
reap;
connection default;
disconnect con1;
disconnect con2;
drop table t1;
Create table t1(f1 int);
Create table t2(f1 int);
Create view v1 as Select * from t1;
Check Table v1,t2;
drop view v1;
drop table t1, t2;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(a INT);
LOCK TABLE t1 WRITE;
connect(con1, localhost, root);
SET lock_wait_timeout= 1;
CHECK TABLE t1;
connection default;
UNLOCK TABLES;
DROP TABLE t1;
disconnect con1;
CREATE TABLE t1(i INT);
CHECK TABLE t1 FOR UPGRADE;
CHECK TABLE t1 FOR UPGRADE;
ALTER TABLE t1 CHANGE COLUMN i j INT, ALGORITHM=INPLACE;
CHECK TABLE t1 FOR UPGRADE;
ALTER TABLE t1 CHANGE COLUMN j k INT, ALGORITHM=COPY;
CHECK TABLE t1 FOR UPGRADE;
ALTER TABLE t1 ADD COLUMN l INT, ALGORITHM=INSTANT;
CHECK TABLE t1 FOR UPGRADE;
TRUNCATE TABLE t1;
CHECK TABLE t1 FOR UPGRADE;
DROP TABLE t1;
CREATE TEMPORARY TABLE tt1(i INT);
CHECK TABLE tt1 FOR UPGRADE;
DROP TABLE tt1;
   let $wait_counter= `SELECT $wait_timeout * 10`;
while ($wait_counter)   let $current_sessions= query_get_value(SHOW GLOBAL STATUS LIKE 'Threads_connected', Value, 1);
   let $success= `SELECT $current_sessions <= $count_sessions`;
   if ($success)   {      let $wait_counter= 0;
   }   if (!$success)   {      sleep 0.1;
      dec $wait_counter;
   }         SHOW PROCESSLIST;
   connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connection con1;
drop table if exists t1,t2;
drop view if exists v1;
create table t1(n int not null, key(n), key(n), key(n), key(n));
disable_query_log;
while ($1) eval insert into t1 values ($1);
 dec $1;
enable_query_log;
send check table t1 extended;
connection con2;
insert into t1 values (200000);
connection con1;
reap;
connection default;
disconnect con1;
disconnect con2;
drop table t1;
Create table t1(f1 int);
Create table t2(f1 int);
Create view v1 as Select * from t1;
Check Table v1,t2;
drop view v1;
drop table t1, t2;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(a INT);
LOCK TABLE t1 WRITE;
connect(con1, localhost, root);
SET lock_wait_timeout= 1;
CHECK TABLE t1;
connection default;
UNLOCK TABLES;
DROP TABLE t1;
disconnect con1;
CREATE TABLE t1(i INT);
CHECK TABLE t1 FOR UPGRADE;
CHECK TABLE t1 FOR UPGRADE;
ALTER TABLE t1 CHANGE COLUMN i j INT, ALGORITHM=INPLACE;
CHECK TABLE t1 FOR UPGRADE;
ALTER TABLE t1 CHANGE COLUMN j k INT, ALGORITHM=COPY;
CHECK TABLE t1 FOR UPGRADE;
ALTER TABLE t1 ADD COLUMN l INT, ALGORITHM=INSTANT;
CHECK TABLE t1 FOR UPGRADE;
TRUNCATE TABLE t1;
CHECK TABLE t1 FOR UPGRADE;
DROP TABLE t1;
CREATE TEMPORARY TABLE tt1(i INT);
CHECK TABLE tt1 FOR UPGRADE;
DROP TABLE tt1;
