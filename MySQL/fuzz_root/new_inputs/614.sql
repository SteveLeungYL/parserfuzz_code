SET SESSION DEFAULT_STORAGE_ENGINE = InnoDB;
drop table if exists t1,t3,t4,t5;
create table t1 (a int, b char(10), key a(a), key b(a,b));
insert into t1 values (17,"ddd"),(18,"eee"),(19,"fff"),(19,"yyy"), (14,"aaa"),(15,"bbb"),(16,"ccc"),(16,"xxx"), (20,"ggg"),(21,"hhh"),(22,"iii");
handler t1 open as t2;
handler t2 read a=(SELECT 1);
handler t2 read a first;
handler t2 read a next;
handler t2 read a next;
handler t2 read a prev;
handler t2 read a last;
handler t2 read a prev;
handler t2 read a prev;
handler t2 read a first;
handler t2 read a prev;
handler t2 read a last;
handler t2 read a prev;
handler t2 read a next;
handler t2 read a next;
handler t2 read a=(15);
handler t2 read a=(16);
handler t2 read a=(19,"fff");
handler t2 read b=(19,"fff");
handler t2 read b=(19,"yyy");
handler t2 read b=(19);
handler t1 read a last;
handler t2 read a=(11);
handler t2 read a>=(11);
handler t2 read a=(18);
handler t2 read a>=(18);
handler t2 read a>(18);
handler t2 read a<=(18);
handler t2 read a<(18);
handler t2 read a first limit 5;
handler t2 read a next  limit 3;
handler t2 read a prev  limit 10;
handler t2 read a>=(16) limit 4;
handler t2 read a>=(16) limit 2,2;
handler t2 read a last  limit 3;
handler t2 read a=(19);
handler t2 read a=(19) where b="yyy";
handler t2 read first;
handler t2 read next;
handler t2 read next;
handler t2 read last;
handler t2 close;
handler t1 open;
handler t1 read a next;
handler t1 read a next;
handler t1 close;
handler t1 open;
handler t1 read a prev;
handler t1 read a prev;
handler t1 close;
handler t1 open as t2;
handler t2 read first;
alter table t1 engine = InnoDB;
handler t2 read first;
handler t1 open as t2;
drop table t1;
create table t1 (a int);
insert into t1 values (17);
handler t2 read first;
handler t1 open as t2;
alter table t1 engine=MEMORY;
handler t2 read first;
drop table t1;
create table t1 (a int);
insert into t1 values (1),(2),(3),(4),(5),(6);
delete from t1 limit 2;
handler t1 open;
handler t1 read first;
handler t1 read first limit 1,1;
handler t1 read first limit 2,2;
delete from t1 limit 3;
handler t1 read first;
drop table t1;
create table t1(a int, index(a));
insert into t1 values (1), (2), (3);
handler t1 open;
handler t1 read a=(W);
handler t1 read a=(a);
drop table t1;
create table t1 (a char(5));
insert into t1 values ("Ok");
handler t1 open as t;
handler t read first;
use mysql;
handler t read first;
handler t close;
handler test.t1 open as t;
handler t read first;
handler t close;
use test;
drop table t1;
create table t1 ( a int, b int, INDEX a (a) );
insert into t1 values (1,2), (2,1);
handler t1 open;
handler t1 read a=(1) where b=2;
handler t1 read a=(1) where b=3;
handler t1 read a=(1) where b=1;
handler t1 close;
drop table t1;
drop database if exists test_test;
create database test_test;
use test_test;
create table t1(table_id char(20) primary key);
insert into t1 values ('test_test.t1');
insert into t1 values ('');
handler t1 open;
handler t1 read first limit 9;
create table t2(table_id char(20) primary key);
insert into t2 values ('test_test.t2');
insert into t2 values ('');
handler t2 open;
handler t2 read first limit 9;
use test;
drop table if exists t1;
create table t1(table_id char(20) primary key);
insert into t1 values ('test.t1');
insert into t1 values ('');
handler t1 open;
use test;
handler test.t1 read first limit 9;
handler test_test.t1 read first limit 9;
handler t1 read first limit 9;
handler test_test.t2 read first limit 9;
handler t2 read first limit 9;
handler test_test.t1 close;
handler t1 close;
drop table test_test.t1;
handler test_test.t2 close;
handler t2 close;
drop table test_test.t2;
drop database test_test;
use test;
handler test.t1 close;
handler t1 close;
drop table test.t1;
drop database if exists test_test;
drop table if exists t1;
drop table if exists t2;
drop table if exists t3;
create database test_test;
use test_test;
create table t1 (c1 char(20));
insert into t1 values ('test_test.t1');
create table t3 (c1 char(20));
insert into t3 values ('test_test.t3');
handler t1 open;
handler t1 read first limit 9;
handler t1 open h1;
handler h1 read first limit 9;
use test;
create table t1 (c1 char(20));
create table t2 (c1 char(20));
create table t3 (c1 char(20));
insert into t1 values ('t1');
insert into t2 values ('t2');
insert into t3 values ('t3');
handler t1 open;
handler t2 open t1;
handler t3 open t1;
handler t1 read first limit 9;
handler test.t1 close;
handler test.t1 open h1;
handler test_test.t1 open h1;
handler test_test.t3 open h3;
handler test.t1 open h2;
handler t1 read first limit 9;
handler h1 read first limit 9;
handler h2 read first limit 9;
handler h3 read first limit 9;
handler h2 read first limit 9;
handler test.h1 close;
handler t1 close;
handler h1 close;
handler h2 close;
handler t1 read first limit 9;
handler h1 read first limit 9;
handler h2 read first limit 9;
handler h3 read first limit 9;
handler h3 read first limit 9;
use test_test;
handler h3 read first limit 9;
handler test.h3 read first limit 9;
handler h3 close;
use test;
drop table t3;
drop table t2;
drop table t1;
drop database test_test;
create table t1 (c1 char(20));
insert into t1 values ("t1");
handler t1 open as h1;
handler h1 read first limit 9;
create table t2 (c1 char(20));
insert into t2 values ("t2");
handler t2 open as h2;
handler h2 read first limit 9;
create table t3 (c1 char(20));
insert into t3 values ("t3");
handler t3 open as h3;
handler h3 read first limit 9;
create table t4 (c1 char(20));
insert into t4 values ("t4");
handler t4 open as h4;
handler h4 read first limit 9;
create table t5 (c1 char(20));
insert into t5 values ("t5");
handler t5 open as h5;
handler h5 read first limit 9;
alter table t1 engine=MyISAM;
handler h1 read first limit 9;
handler h2 read first limit 9;
handler h3 read first limit 9;
handler h4 read first limit 9;
handler h5 read first limit 9;
alter table t5 engine=MyISAM;
handler h1 read first limit 9;
handler h2 read first limit 9;
handler h3 read first limit 9;
handler h4 read first limit 9;
handler h5 read first limit 9;
alter table t3 engine=MyISAM;
handler h1 read first limit 9;
handler h2 read first limit 9;
handler h3 read first limit 9;
handler h4 read first limit 9;
handler h5 read first limit 9;
handler h2 close;
handler h4 close;
handler t1 open as h1_1;
handler t1 open as h1_2;
handler t1 open as h1_3;
handler h1_1 read first limit 9;
handler h1_2 read first limit 9;
handler h1_3 read first limit 9;
alter table t1 engine=InnoDB;
handler h1_1 read first limit 9;
handler h1_2 read first limit 9;
handler h1_3 read first limit 9;
drop table t1;
drop table t2;
drop table t3;
drop table t4;
drop table t5;
create table t1 (c1 int);
insert into t1 values (1);
handler t1 open;
handler t1 read first;
optimize table t1;
handler t1 read next;
handler t1 close;
reap;
drop table t1;
CREATE TABLE t1 (  no1 smallint(5) NOT NULL default '0',  no2 int(10) NOT NULL default '0',  PRIMARY KEY  (no1,no2));
INSERT INTO t1 VALUES (1,274),(1,275),(2,6),(2,8),(4,1),(4,2);
HANDLER t1 OPEN;
HANDLER t1 READ `primary` = (1, 1000);
HANDLER t1 READ `primary` PREV;
DROP TABLE t1;
create table t1 (c1 int);
insert into t1 values (14397);
flush tables with read lock;
drop table t1;
drop table t1;
select * from t1;
unlock tables;
reap;
select * from t1;
drop table if exists t1;
drop table if exists t1;
create table t1 (a int) ENGINE=MEMORY;
handler t1 open;
drop table t1;
drop table if exists t1;
create table t1 (a int);
handler t1 open as t1_alias;
handler t1_alias read a next;
handler t1_alias READ a next where inexistent > 0;
handler t1_alias read a next;
handler t1_alias READ a next where inexistent > 0;
handler t1_alias close;
drop table t1;
drop table if exists t1,t2;
create table t1 (c1 int);
create table t2 (c1 int);
insert into t1 values (1);
insert into t2 values (2);
handler t1 open;
handler t1 read first;
flush tables;;
handler t2 open;
handler t2 read first;
handler t1 read next;
handler t1 close;
handler t2 close;
reap;
drop table t1,t2;
drop table if exists t1, t0;
create table t1 (c1 int);
handler t1 open;
handler t1 read first;
rename table t1 to t0;;
handler t0 open;
handler t0 close;
reap;
handler t1 read next;
handler t1 close;
drop table t0;
show session status;
show session status;
drop table if exists t1;
create temporary table t1 (a int, b char(1), key a(a), key b(a,b));
insert into t1 values (0,"a"),(1,"b"),(2,"c"),(3,"d"),(4,"e"), (5,"f"),(6,"g"),(7,"h"),(8,"i"),(9,"j");
select a,b from t1;
handler t1 open as a1;
handler a1 read a first;
handler a1 read a next;
handler a1 read a next;
select a,b from t1;
handler a1 read a prev;
handler a1 read a prev;
handler a1 read a=(6) where b="g";
handler a1 close;
select a,b from t1;
handler t1 open as a2;
handler a2 read a first;
handler a2 read a last;
handler a2 read a prev;
handler a2 close;
drop table t1;
drop table if exists t1,t2;
create table t1 (a int);
handler t1 open as t1_alias;
drop table t1;
create table t1 (a int);
handler t1 open as t1_alias;
flush tables;
drop table t1;
create table t1 (a int);
handler t1 open as t1_alias;
handler t1_alias close;
drop table t1;
create table t1 (a int);
handler t1 open as t1_alias;
handler t1_alias read first;
drop table t1;
handler t1_alias read next;
create table t1 (a int);
create temporary table t2 (a int, key(a));
handler t1 open as a1;
handler t2 open as a2;
handler a2 read a first;
drop table t1, t2;
handler a2 read a next;
handler a1 close;
create table t1 (a int, key(a));
create table t2 like t1;
handler t1 open as a1;
handler t2 open as a2;
handler a1 read a first;
handler a2 read a first;
alter table t1 add b int;
handler a1 close;
handler a2 close;
drop table t1, t2;
create table t1 (a int, key(a));
handler t1 open as a1;
handler a1 read a first;
rename table t1 to t2;
handler a1 read a first;
drop table t2;
create table t1 (a int, key(a));
create table t2 like t1;
handler t1 open as a1;
handler t2 open as a2;
handler a1 read a first;
handler a2 read a first;
optimize table t1;
handler a1 close;
handler a2 close;
drop table t1, t2;
create table t1 (a int, b char(1), key a(a), key b(a,b));
insert into t1 values (0,"a"),(1,"b"),(2,"c"),(3,"d"),(4,"e"), (5,"f"),(6,"g"),(7,"h"),(8,"i"),(9,"j");
handler t1 open;
handler t1 read a first;
handler t1 read a next;
flush tables;
handler t1 read a next;
handler t1 read a next;
flush tables with read lock;
handler t1 read a next;
unlock tables;
drop table t1;
handler t1 read a next;
drop table if exists t1;
create table t1 (a int);
insert into t1 values (1);
handler t1 open;
lock table t1 write;
alter table t1 engine=memory;
handler t1 read a next;
handler t1 close;
reap;
unlock tables;
drop table t1;
create table t1 (a int, key(a));
insert into t1 values (1);
handler t1 open;
alter table t1 engine=memory;
handler t1 read a next;
handler t1 close;
reap # Since last in this connection was a send;
drop table t1;
show session status;
show session status;
USE information_schema;
HANDLER COLUMNS OPEN;
USE test;
drop table if exists t1, t2, t3;
create table t1 (a int, key a (a));
insert into t1 (a) values (1), (2), (3), (4), (5);
create table t2 (a int, key a (a)) select * from t1;
create temporary table t3 (a int, key a (a)) select * from t2;
create temporary table t4 like t3;
handler t1 open;
handler t2 open;
handler t3 open;
lock table t1 read;
handler t1 open;
handler t1 read next;
handler t2 close;
handler t3 open;
handler t4 open;
unlock tables;
handler t1 read next;
handler t1 close;
handler t2 read next;
handler t2 close;
handler t3 read next;
handler t3 close;
drop temporary tables t3, t4;
handler t1 open;
truncate table t1;
handler t1 read next;
handler t1 open;
create trigger t1_ai after insert on t1 for each row set @a=1;
handler t1 read next;
handler t1 open;
drop trigger t1_ai;
handler t1 read next;
handler t1 open;
alter table t1 add column b int;
handler t1 read next;
handler t1 open;
analyze table t1;
handler t1 read next;
handler t1 open;
optimize table t1;
handler t1 read next;
handler t1 open;
repair table t1;
handler t1 read next;
handler t1 open;
drop table t1;
handler t1 read next;
create table t1 (a int, b int, key a (a)) select a from t2;
handler t1 open;
rename table t1 to t3;
handler t1 read next;
handler t2 open;
create table if not exists t2 (a int);
handler t2 read next;
rename table t3 to t1;
drop table t2;
handler t1 open;
handler t1 read a prev;
flush table t1;
handler t1 read a prev;
handler t1 close;
handler t1 open;
handler t1 read a prev;
flush tables with read lock;
handler t1 read a prev;
handler t1 close;
unlock tables;
handler t1 open;
lock tables t1 write;
truncate table t1;
unlock tables;
handler t1 read next;
handler t1 open;
lock tables t1 write;
create trigger t1_ai after insert on t1 for each row set @a=1;
unlock tables;
handler t1 read next;
handler t1 open;
lock tables t1 write;
drop trigger t1_ai;
unlock tables;
handler t1 read next;
handler t1 open;
lock tables t1 write;
alter table t1 drop column b;
unlock tables;
handler t1 read next;
handler t1 open;
lock tables t1 write;
analyze table t1;
unlock tables;
handler t1 read next;
handler t1 open;
lock tables t1 write;
optimize table t1;
unlock tables;
handler t1 read next;
handler t1 open;
lock tables t1 write;
repair table t1;
unlock tables;
handler t1 read next;
handler t1 open;
lock tables t1 write;
drop table t1;
unlock tables;
handler t1 read next;
create table t1 (a int, b int, key a (a));
insert into t1 (a) values (1), (2), (3), (4), (5);
handler t1 open;
handler t1 read a prev;
lock tables t1 write;
flush table t1;
unlock tables;
handler t1 read a prev;
handler t1 close;
handler t1 open;
drop table t1 ;
handler t1 read a prev;
handler t1 close;
reap;
create table t1 (a int, key a (a));
insert into t1 (a) values (1), (2), (3), (4), (5);
begin;
select * from t1;
handler t1 open;
handler t1 read a prev;
handler t1 read a prev;
handler t1 close;
drop table t1 ;
select * from t1;
handler t1 open;
commit;
handler t1 read a prev;
handler t1 close;
reap;
create table t1 (a int, key a (a));
insert into t1 (a) values (1), (2), (3), (4), (5);
create table t0 (a int, key a (a));
insert into t0 (a) values (1), (2), (3), (4), (5);
begin;
select * from t1;
rename table t0 to t3, t1 to t0, t3 to t1;
handler t0 open;
select * from t0;
handler t1 open;
commit;
handler t1 close;
reap;
handler t1 open;
handler t1 read a prev;
handler t1 close;
drop table t0;
create table t2 (a int, key a (a));
handler t1 open;
lock tables t2 read;
drop table t2;
select * from t2;
unlock tables;
reap;
reap;
handler t1 close;
create table t2 like t1;
create table t3 like t1;
begin;
select * from t3;
savepoint sv;
handler t1 open;
handler t1 read a first;
handler t1 read a next;
select * from t2;
drop table t1;
drop table t2;
rollback to savepoint sv;
reap;
handler t1 read a next;
handler t1 close;
reap;
commit;
drop table t3;
create table t1 (a int, key a(a));
insert into t1 (a) values (1), (2), (3), (4), (5);
create table t2 like t1;
begin;
savepoint sv;
handler t1 open;
handler t1 read a first;
handler t1 read a next;
select * from t2;
drop table t1;
drop table t2;
rollback to savepoint sv;
reap;
handler t1 read a next;
handler t1 close;
reap;
commit;
create table t1 (a int, key a(a));
insert into t1 (a) values (1), (2), (3), (4), (5);
create table t2 like t1;
create table t3 like t1;
insert into t3 (a) select a from t1;
begin;
handler t1 open;
savepoint sv;
handler t1 read a first;
select * from t2;
handler t1 close;
handler t3 open;
handler t3 read a first;
rollback to savepoint sv;
drop table t1, t2;
drop table t3;
handler t3 read a next;
handler t3 close;
reap;
commit;
create table t1 (a int, key a(a));
create  table t2 like t1;
handler t1 open;
lock table t1 write, t2 write;
drop table t2;
drop table t1;
unlock tables;
reap;
create table t2 like t1;
flush table t2;
drop table t1;
unlock tables;
reap;
drop table t2;
create table t1 (a int, key a(a));
insert into t1 values (1), (2);
begin;
select * from t1;
handler t1 open;
lock tables t1 write;
handler t1 read a next;
commit;
reap;
handler t1 read a next;
drop table t1;
unlock tables;
reap;
handler t1 close;
show session status;
show session status;
show session status;
create table t1 (a int, b int, key a (a));
insert into t1 (a) values (1), (2), (3), (4), (5);
create temporary table t2 (a int, b int, key a (a));
insert into t2 (a) select a from t1;
handler t1 open;
handler t1 read a next;
handler t2 open;
handler t2 read a next;
flush table t1;
handler t2 read a next;
handler t1 read a next;
select * from t1;
handler t2 read a next;
select * from t2;
handler t2 read a next;
drop table t1;
drop temporary table t2;
create table t1 (a int, b int, key a (a));
create table t2 like t1;
create table t3 like t1;
create table t4 like t1;
handler t1 open;
handler t2 open;
rename table t4 to t5, t3 to t4, t5 to t3;
handler t1 read first;
handler t2 read first;
drop table t1, t2, t3, t4;
set autocommit=0;
create table t1 (a int, b int, key a (a));
insert into t1 (a, b) values (1, 1), (2, 1), (3, 2), (4, 2), (5, 5);
create table t2 like t1;
insert into t2 (a, b) select a, b from t1;
create table t3 like t1;
insert into t3 (a, b) select a, b from t1;
commit;
flush tables with read lock;
handler t1 open;
lock table t1 read;
handler t1 read next;
lock table not_exists_write read;
drop table t1;
handler t1 open;
select a from t2;
handler t1 read next;
flush tables with read lock;
handler t2 open;
flush tables with read lock;
handler t1 read next;
select a from t3;
handler t2 read next;
handler t1 close;
rollback;
handler t2 close;
drop table t1;
commit;
flush tables;
drop table t1;
unlock tables;
drop table t1;
set autocommit=default;
drop table t2, t3;
create table t1 (a int, b int, key a (a));
insert into t1 (a, b) values (1, 1), (2, 1), (3, 2), (4, 2), (5, 5);
begin;
insert into t1 (a, b) values (6, 6);
handler t1 open;
handler t1 read a last;
insert into t1 (a, b) values (7, 7);
handler t1 read a last;
commit;
lock table t1 write;
unlock tables;
handler t1 read a prev;
handler t1 close;
drop table t1;
show session status;
handler no_such_table read no_such_index first;
handler no_such_table close;
DROP TABLE IF EXISTS t1, t2;
CREATE TEMPORARY TABLE t1 (i INT);
CREATE TEMPORARY TABLE t2 (i INT);
HANDLER t2 OPEN;
HANDLER t2 READ FIRST;
HANDLER t2 CLOSE;
DROP TABLE t1, t2;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (id INT);
HANDLER t1 OPEN;
SELECT table_name, table_comment FROM information_schema.tables WHERE table_schema= 'test' AND table_name= 't1';
HANDLER t1 CLOSE;
DROP TABLE t1;
drop tables if exists t1, t2;
drop function if exists f1;
create table t1 (i int);
insert into t1 values (1), (2);
create table t2 (j int);
insert into t2 values (1);
create function f1() returns int return (select count(*) from t2);
handler t1 open;
handler t1 read next;
select f1() from t2;
handler t1 read next;
handler t1 close;
flush tables with read lock;
handler t1 open;
handler t1 read next;
select f1() from t2;
handler t1 read next;
unlock tables;
handler t1 close;
handler t1 open;
handler t1 read next;
lock table t2 read;
select * from t2;
unlock tables;
handler t1 read next;
handler t1 close;
flush tables with read lock;
handler t1 open;
handler t1 read next;
lock table t2 read;
select * from t2;
unlock tables;
handler t1 read next;
handler t1 close;
drop function f1;
drop tables t1, t2;
drop tables if exists t1, t2;
create table t1 (i int);
create temporary table t2 (j int);
handler t1 open;
lock table t2 read;
commit;
unlock tables;
handler t1 close;
drop tables t1, t2;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(id INT, KEY id(id));
HANDLER t1 OPEN;
DROP TABLE t1;
reap;
HANDLER t1 READ id NEXT;
HANDLER t1 READ id NEXT;
HANDLER t1 CLOSE;
show session status;
DROP TABLE IF EXISTS t1, t2;
DROP FUNCTION IF EXISTS f1;
CREATE FUNCTION f1() RETURNS INTEGER BEGIN SELECT 1 FROM t2 INTO @a; RETURN 1; END;
SELECT f1();
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (1);
HANDLER t1 OPEN;
HANDLER t1 READ FIRST WHERE f1() = 1;
HANDLER t1 CLOSE;
DROP FUNCTION f1;
DROP TABLE t1;
DROP TABLE IF EXISTS t1;
DROP FUNCTION IF EXISTS f1;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2);
CREATE FUNCTION f1() RETURNS INT RETURN 1;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST WHERE f1() = 1;
HANDLER t1 CLOSE;
DROP FUNCTION f1;
DROP TABLE t1;
CREATE TABLE t1(a INT, b INT, KEY b(b), KEY ab(a, b));
INSERT INTO t1 VALUES (2, 20), (1, 10), (4, 40), (3, 30);
HANDLER t1 OPEN;
HANDLER t1 READ b FIRST;
HANDLER t1 READ NEXT;
HANDLER t1 READ NEXT;
HANDLER t1 READ b FIRST;
HANDLER t1 READ b NEXT;
HANDLER t1 READ b NEXT;
HANDLER t1 READ FIRST;
HANDLER t1 READ b FIRST;
HANDLER t1 READ NEXT;
HANDLER t1 READ NEXT;
HANDLER t1 READ NEXT;
HANDLER t1 READ NEXT;
HANDLER t1 READ NEXT;
HANDLER t1 READ b NEXT;
HANDLER t1 READ b NEXT;
HANDLER t1 READ b NEXT;
HANDLER t1 READ b NEXT;
HANDLER t1 READ b NEXT;
HANDLER t1 READ NEXT;
HANDLER t1 READ b NEXT;
HANDLER t1 READ FIRST;
HANDLER t1 READ b PREV;
HANDLER t1 READ b LAST;
HANDLER t1 READ NEXT;
HANDLER t1 READ ab FIRST;
HANDLER t1 READ b NEXT;
HANDLER t1 READ ab LAST;
HANDLER t1 READ b PREV;
HANDLER t1 CLOSE;
DROP TABLE t1;
CREATE TABLE t ( col_date DATE , col_datetime DATETIME , col_time TIME , col_year YEAR , KEY col_date_key (col_date) , KEY col_datetime_key (col_datetime) , KEY col_year_key (col_year));
HANDLER t OPEN;
HANDLER t READ col_date_key <= ('p');
HANDLER t READ col_datetime_key <= ('p');
HANDLER t READ col_year_key <= ('p');
DROP TABLE t;
CREATE TABLE t(x INT);
INSERT INTO t VALUES (1);
CREATE VIEW v AS SELECT MAX(x) AS x FROM t;
HANDLER t OPEN;
UPDATE v v1, v v2 SET v1.x = v2.x;
HANDLER t READ NEXT;
HANDLER t CLOSE;
DROP VIEW v;
DROP TABLE t;
