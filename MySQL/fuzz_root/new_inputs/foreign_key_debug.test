      SET @saved_binlog_format= @@SESSION.binlog_format;
SET SESSION debug= '+d,skip_dd_table_access_check';
SET @@foreign_key_checks= DEFAULT;
CREATE TABLE t1(a INT PRIMARY KEY);
CREATE TABLE t2(a INT PRIMARY KEY);
CREATE TABLE t3(a INT PRIMARY KEY, b INT, c INT);
ALTER TABLE t3 ADD FOREIGN KEY (b) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 ADD FOREIGN KEY (c) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 ADD FOREIGN KEY (b) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 DROP FOREIGN KEY t3_ibfk_1;
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 ADD FOREIGN KEY (b) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
DROP TABLE t3, t2, t1;
CREATE TABLE t1(a INT PRIMARY KEY);
CREATE TABLE name567890123456789012345678901234567890123456789012345678901234(a INT PRIMARY KEY, b INT);
ALTER TABLE name567890123456789012345678901234567890123456789012345678901234ADD FOREIGN KEY(b) REFERENCES t1(a);
DROP TABLE name567890123456789012345678901234567890123456789012345678901234, t1;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES child, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
SET @@foreign_key_checks= 1;
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES child, parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
CREATE TABLE child_copy LIKE child;
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child_copy');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES child, child_copy, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'parent');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
CREATE TABLE parent_base(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
CREATE TABLE parent LIKE parent_base;
SET @@foreign_key_checks= 1;
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLE child, parent_base, parent;
CREATE TABLE source(pk INTEGER PRIMARY KEY, j INTEGER);
INSERT INTO source VALUES (1, 1);
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key(j));
INSERT INTO parent VALUES (2, 1);
SET @@SESSION.binlog_format=STATEMENT;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j)) AS SELECT pk, j AS fk FROM source;
SET SESSION binlog_format= @saved_binlog_format;
SELECT * FROM child;
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES source, child, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE source(pk INTEGER PRIMARY KEY, j INTEGER);
INSERT INTO source VALUES (1, 1);
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
SET @@SESSION.binlog_format=STATEMENT;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key(j)) AS SELECT * FROM source;
SET SESSION binlog_format= @saved_binlog_format;
SELECT * FROM child;
SET @@foreign_key_checks= 1;
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES source, child, parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY parent_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, k INTEGER, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j), UNIQUE KEY child_key(k));
INSERT INTO child VALUES (1, 2, 3);
CREATE TABLE grandchild(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES child(k));
INSERT INTO grandchild VALUES (1, 2);
SET @@foreign_key_checks= 0;
CREATE TABLE orphan_grandchild(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES siebling(k));
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE child TO siebling;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
INSERT INTO siebling VALUES (1, 2, 3);
INSERT INTO grandchild VALUES (1, 2);
INSERT INTO orphan_grandchild VALUES (1, 2);
DROP TABLE grandchild;
DROP TABLE orphan_grandchild;
DROP TABLE siebling;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY parent_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j) ON DELETE CASCADE);
SET @@foreign_key_checks= 0;
LOCK TABLES parent WRITE;
SELECT OBJECT_TYPE, OBJECT_SCHEMA, OBJECT_NAME, COLUMN_NAME,  LOCK_TYPE FROM performance_schema.metadata_locks  WHERE OBJECT_NAME LIKE 'child'  ORDER BY OBJECT_TYPE, OBJECT_SCHEMA, OBJECT_NAME, COLUMN_NAME, LOCK_TYPE;
SET @@session.lock_wait_timeout= 1;
INSERT INTO child VALUES (1, 1);
UNLOCK TABLES;
SET @@foreign_key_checks= 1;
SELECT LOCK_TYPE FROM performance_schema.metadata_locks  WHERE OBJECT_NAME LIKE 'child';
DROP TABLE child;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY parent_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j) ON DELETE CASCADE);
PREPARE stmt FROM 'DELETE FROM parent WHERE pk = ?';
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
SET @a= 1;
EXECUTE stmt USING @a;
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
ALTER TABLE child ADD COLUMN (j INTEGER);
EXECUTE stmt USING @a;
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
EXECUTE stmt USING @a;
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
DROP TABLE child;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER, j INTEGER,  UNIQUE KEY parent_i_key(i), UNIQUE KEY parent_j_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER, fk_j INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i),  FOREIGN KEY (fk_j) REFERENCES parent(j));
ALTER TABLE child RENAME TO siebling;
DROP TABLES siebling, parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_key(i));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i));
RENAME TABLE parent TO mother, mother TO father;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE child TO sister, sister TO brother;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE father TO mother, brother TO sister, mother TO parent, sister TO child;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLES child, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES mother(i));
SET @@foreign_key_checks= 1;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_key(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE parent TO mother, mother TO father;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLES child, father;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER, j INTEGER,  UNIQUE KEY parent_i_key(i),  UNIQUE KEY parent_j_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER, fk_j INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i),  FOREIGN KEY (fk_j) REFERENCES parent(j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE parent TO mother;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLES child, mother;
CREATE TABLE self (pk INT PRIMARY KEY, fk INT, FOREIGN KEY(fk) REFERENCES self(pk));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME TO self2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self2 RENAME TO self3, ADD COLUMN i INT;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self3;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_i_key(i));
SET @@foreign_key_checks= 0;
CREATE TABLE grandchild(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES s1.child(i));
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
CREATE SCHEMA s1;
CREATE TABLE s1.child(pk INTEGER PRIMARY KEY, i INTEGER, fk_i INTEGER,  UNIQUE KEY child_i_key(i),  FOREIGN KEY (fk_i) REFERENCES test.parent(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
DROP SCHEMA s1;
SET @@foreign_key_checks= 0;
DROP SCHEMA s1;
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
CREATE SCHEMA s1;
CREATE TABLE s1.child(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY child_i_key(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
DROP SCHEMA s1;
SET @@foreign_key_checks= 0;
DROP SCHEMA s1;
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
DROP TABLE grandchild;
CREATE SCHEMA s1;
CREATE TABLE s1.child(pk INTEGER PRIMARY KEY, fk_i INTEGER);
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE s1.child ADD FOREIGN KEY (fk_i) REFERENCES test.parent(i);
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP SCHEMA s1;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_key(i));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
SET @@session.debug= '+d,fail_while_invalidating_fk_parents';
ALTER TABLE child RENAME TO siebling;
SET @@session.debug= '-d,fail_while_invalidating_fk_parents';
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE siebling, parent;
CREATE TABLE parent (i INT, j INT, PRIMARY KEY (i), UNIQUE u(i,j));
CREATE TABLE child (i INT, j INT, FOREIGN KEY (i, j) REFERENCES parent (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u TO u1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
CREATE TABLE parent (i INT, j INT, k INT, PRIMARY KEY (i), UNIQUE u(j), UNIQUE u1(i,j), UNIQUE u2(i,j,k));
CREATE TABLE child (i INT, j INT, k INT, FOREIGN KEY (i, j, k) REFERENCES parent (i, j, k));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u2 TO u3;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
CREATE TABLE parent (i INT, j INT,                     d INT GENERATED ALWAYS AS (i) VIRTUAL,                     e INT GENERATED ALWAYS AS (j) VIRTUAL,                     PRIMARY KEY (i), UNIQUE u(i,d), UNIQUE u1(i,j,e));
CREATE TABLE child (i INT, j INT, FOREIGN KEY (i, j) REFERENCES parent (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
CREATE TABLE parent (i INT, a VARCHAR(10), b VARCHAR(10),                     PRIMARY KEY (i), UNIQUE u(i,a(5)), UNIQUE u1(i,a,b(5)));
CREATE TABLE child (i INT, a VARCHAR(10), FOREIGN KEY (i, a) REFERENCES parent (i, a));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }  CREATE TABLE self (i INT, j INT, i2 INT, j2 INT, PRIMARY KEY (i), UNIQUE u(i,j),                   FOREIGN KEY (i2, j2) REFERENCES self (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u TO u1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
CREATE TABLE self (i INT, j INT, k INT, i2 INT, j2 INT, k2 INT,                   PRIMARY KEY (i), UNIQUE u(j), UNIQUE u1(i,j), UNIQUE u2(i,j,k),                   FOREIGN KEY (i2, j2, k2) REFERENCES self (i, j, k));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u2 TO u3;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
CREATE TABLE self (i INT, j INT, i2 INT, j2 INT,                   d INT GENERATED ALWAYS AS (i) VIRTUAL,                   e INT GENERATED ALWAYS AS (j) VIRTUAL,                     PRIMARY KEY (i), UNIQUE u(i,d), UNIQUE u1(i,j,e),                     FOREIGN KEY (i2, j2) REFERENCES self (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
CREATE TABLE self (i INT, a VARCHAR(10), b VARCHAR(10), i2 INT, a2 VARCHAR(10),                   PRIMARY KEY (i), UNIQUE u(i,a(5)), UNIQUE u1(i,a,b(5)),                   FOREIGN KEY (i2, a2) REFERENCES self (i, a));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
SET @@foreign_key_checks= DEFAULT;
SET SESSION debug= '-d,skip_dd_table_access_check';
connect (con1, localhost, root,,);
connection default;
CREATE TABLE parent (pk INT PRIMARY KEY);
CREATE TABLE child (fk INT);
SET DEBUG_SYNC="alter_table_inplace_after_lock_downgrade SIGNAL reached WAIT_FOR go";
SET FOREIGN_KEY_CHECKS=0;
connection con1;
SET DEBUG_SYNC="now WAIT_FOR reached";
INSERT INTO parent VALUES (1);
SET @old_lock_wait_timeout= @@lock_wait_timeout;
SET @@lock_wait_timeout= 1;
ALTER TABLE parent ADD COLUMN a INT;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SET DEBUG_SYNC="now SIGNAL go";
connection default;
SET FOREIGN_KEY_CHECKS=1;
ALTER TABLE child DROP FOREIGN KEY fk;
SET DEBUG_SYNC="alter_table_copy_after_lock_upgrade SIGNAL reached WAIT_FOR go";
connection con1;
SET DEBUG_SYNC="now WAIT_FOR reached";
INSERT INTO parent VALUES (2);
SET @old_lock_wait_timeout= @@lock_wait_timeout;
SET @@lock_wait_timeout= 1;
ALTER TABLE parent ADD COLUMN a INT;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SET DEBUG_SYNC="now SIGNAL go";
connection default;
SET DEBUG_SYNC="RESET";
ALTER TABLE child DROP FOREIGN KEY fk;
SET DEBUG_SYNC="alter_after_copy_table SIGNAL reached WAIT_FOR go";
connection con1;
SET DEBUG_SYNC="now WAIT_FOR reached";
SELECT * FROM parent;
SET @old_lock_wait_timeout= @@lock_wait_timeout;
SET @@lock_wait_timeout= 1;
DELETE FROM parent;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SET DEBUG_SYNC="now SIGNAL go";
connection default;
SET DEBUG_SYNC="RESET";
DROP TABLES child, parent;
connection con1;
disconnect con1;
connection default;
      SET @saved_binlog_format= @@SESSION.binlog_format;
SET SESSION debug= '+d,skip_dd_table_access_check';
SET @@foreign_key_checks= DEFAULT;
CREATE TABLE t1(a INT PRIMARY KEY);
CREATE TABLE t2(a INT PRIMARY KEY);
CREATE TABLE t3(a INT PRIMARY KEY, b INT, c INT);
ALTER TABLE t3 ADD FOREIGN KEY (b) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 ADD FOREIGN KEY (c) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 ADD FOREIGN KEY (b) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 DROP FOREIGN KEY t3_ibfk_1;
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 ADD FOREIGN KEY (b) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
DROP TABLE t3, t2, t1;
CREATE TABLE t1(a INT PRIMARY KEY);
CREATE TABLE name567890123456789012345678901234567890123456789012345678901234(a INT PRIMARY KEY, b INT);
ALTER TABLE name567890123456789012345678901234567890123456789012345678901234ADD FOREIGN KEY(b) REFERENCES t1(a);
DROP TABLE name567890123456789012345678901234567890123456789012345678901234, t1;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES child, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
SET @@foreign_key_checks= 1;
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES child, parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
CREATE TABLE child_copy LIKE child;
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child_copy');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES child, child_copy, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'parent');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
CREATE TABLE parent_base(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
CREATE TABLE parent LIKE parent_base;
SET @@foreign_key_checks= 1;
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLE child, parent_base, parent;
CREATE TABLE source(pk INTEGER PRIMARY KEY, j INTEGER);
INSERT INTO source VALUES (1, 1);
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key(j));
INSERT INTO parent VALUES (2, 1);
SET @@SESSION.binlog_format=STATEMENT;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j)) AS SELECT pk, j AS fk FROM source;
SET SESSION binlog_format= @saved_binlog_format;
SELECT * FROM child;
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES source, child, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE source(pk INTEGER PRIMARY KEY, j INTEGER);
INSERT INTO source VALUES (1, 1);
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
SET @@SESSION.binlog_format=STATEMENT;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key(j)) AS SELECT * FROM source;
SET SESSION binlog_format= @saved_binlog_format;
SELECT * FROM child;
SET @@foreign_key_checks= 1;
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES source, child, parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY parent_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, k INTEGER, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j), UNIQUE KEY child_key(k));
INSERT INTO child VALUES (1, 2, 3);
CREATE TABLE grandchild(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES child(k));
INSERT INTO grandchild VALUES (1, 2);
SET @@foreign_key_checks= 0;
CREATE TABLE orphan_grandchild(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES siebling(k));
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE child TO siebling;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
INSERT INTO siebling VALUES (1, 2, 3);
INSERT INTO grandchild VALUES (1, 2);
INSERT INTO orphan_grandchild VALUES (1, 2);
DROP TABLE grandchild;
DROP TABLE orphan_grandchild;
DROP TABLE siebling;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY parent_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j) ON DELETE CASCADE);
SET @@foreign_key_checks= 0;
LOCK TABLES parent WRITE;
SELECT OBJECT_TYPE, OBJECT_SCHEMA, OBJECT_NAME, COLUMN_NAME,  LOCK_TYPE FROM performance_schema.metadata_locks  WHERE OBJECT_NAME LIKE 'child'  ORDER BY OBJECT_TYPE, OBJECT_SCHEMA, OBJECT_NAME, COLUMN_NAME, LOCK_TYPE;
SET @@session.lock_wait_timeout= 1;
INSERT INTO child VALUES (1, 1);
UNLOCK TABLES;
SET @@foreign_key_checks= 1;
SELECT LOCK_TYPE FROM performance_schema.metadata_locks  WHERE OBJECT_NAME LIKE 'child';
DROP TABLE child;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY parent_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j) ON DELETE CASCADE);
PREPARE stmt FROM 'DELETE FROM parent WHERE pk = ?';
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
SET @a= 1;
EXECUTE stmt USING @a;
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
ALTER TABLE child ADD COLUMN (j INTEGER);
EXECUTE stmt USING @a;
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
EXECUTE stmt USING @a;
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
DROP TABLE child;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER, j INTEGER,  UNIQUE KEY parent_i_key(i), UNIQUE KEY parent_j_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER, fk_j INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i),  FOREIGN KEY (fk_j) REFERENCES parent(j));
ALTER TABLE child RENAME TO siebling;
DROP TABLES siebling, parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_key(i));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i));
RENAME TABLE parent TO mother, mother TO father;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE child TO sister, sister TO brother;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE father TO mother, brother TO sister, mother TO parent, sister TO child;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLES child, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES mother(i));
SET @@foreign_key_checks= 1;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_key(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE parent TO mother, mother TO father;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLES child, father;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER, j INTEGER,  UNIQUE KEY parent_i_key(i),  UNIQUE KEY parent_j_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER, fk_j INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i),  FOREIGN KEY (fk_j) REFERENCES parent(j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE parent TO mother;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLES child, mother;
CREATE TABLE self (pk INT PRIMARY KEY, fk INT, FOREIGN KEY(fk) REFERENCES self(pk));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME TO self2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self2 RENAME TO self3, ADD COLUMN i INT;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self3;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_i_key(i));
SET @@foreign_key_checks= 0;
CREATE TABLE grandchild(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES s1.child(i));
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
CREATE SCHEMA s1;
CREATE TABLE s1.child(pk INTEGER PRIMARY KEY, i INTEGER, fk_i INTEGER,  UNIQUE KEY child_i_key(i),  FOREIGN KEY (fk_i) REFERENCES test.parent(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
DROP SCHEMA s1;
SET @@foreign_key_checks= 0;
DROP SCHEMA s1;
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
CREATE SCHEMA s1;
CREATE TABLE s1.child(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY child_i_key(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
DROP SCHEMA s1;
SET @@foreign_key_checks= 0;
DROP SCHEMA s1;
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
DROP TABLE grandchild;
CREATE SCHEMA s1;
CREATE TABLE s1.child(pk INTEGER PRIMARY KEY, fk_i INTEGER);
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE s1.child ADD FOREIGN KEY (fk_i) REFERENCES test.parent(i);
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP SCHEMA s1;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_key(i));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
SET @@session.debug= '+d,fail_while_invalidating_fk_parents';
ALTER TABLE child RENAME TO siebling;
SET @@session.debug= '-d,fail_while_invalidating_fk_parents';
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE siebling, parent;
CREATE TABLE parent (i INT, j INT, PRIMARY KEY (i), UNIQUE u(i,j));
CREATE TABLE child (i INT, j INT, FOREIGN KEY (i, j) REFERENCES parent (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u TO u1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
CREATE TABLE parent (i INT, j INT, k INT, PRIMARY KEY (i), UNIQUE u(j), UNIQUE u1(i,j), UNIQUE u2(i,j,k));
CREATE TABLE child (i INT, j INT, k INT, FOREIGN KEY (i, j, k) REFERENCES parent (i, j, k));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u2 TO u3;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
CREATE TABLE parent (i INT, j INT,                     d INT GENERATED ALWAYS AS (i) VIRTUAL,                     e INT GENERATED ALWAYS AS (j) VIRTUAL,                     PRIMARY KEY (i), UNIQUE u(i,d), UNIQUE u1(i,j,e));
CREATE TABLE child (i INT, j INT, FOREIGN KEY (i, j) REFERENCES parent (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
CREATE TABLE parent (i INT, a VARCHAR(10), b VARCHAR(10),                     PRIMARY KEY (i), UNIQUE u(i,a(5)), UNIQUE u1(i,a,b(5)));
CREATE TABLE child (i INT, a VARCHAR(10), FOREIGN KEY (i, a) REFERENCES parent (i, a));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }  CREATE TABLE self (i INT, j INT, i2 INT, j2 INT, PRIMARY KEY (i), UNIQUE u(i,j),                   FOREIGN KEY (i2, j2) REFERENCES self (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u TO u1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
CREATE TABLE self (i INT, j INT, k INT, i2 INT, j2 INT, k2 INT,                   PRIMARY KEY (i), UNIQUE u(j), UNIQUE u1(i,j), UNIQUE u2(i,j,k),                   FOREIGN KEY (i2, j2, k2) REFERENCES self (i, j, k));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u2 TO u3;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
CREATE TABLE self (i INT, j INT, i2 INT, j2 INT,                   d INT GENERATED ALWAYS AS (i) VIRTUAL,                   e INT GENERATED ALWAYS AS (j) VIRTUAL,                     PRIMARY KEY (i), UNIQUE u(i,d), UNIQUE u1(i,j,e),                     FOREIGN KEY (i2, j2) REFERENCES self (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
CREATE TABLE self (i INT, a VARCHAR(10), b VARCHAR(10), i2 INT, a2 VARCHAR(10),                   PRIMARY KEY (i), UNIQUE u(i,a(5)), UNIQUE u1(i,a,b(5)),                   FOREIGN KEY (i2, a2) REFERENCES self (i, a));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
SET @@foreign_key_checks= DEFAULT;
SET SESSION debug= '-d,skip_dd_table_access_check';
connect (con1, localhost, root,,);
connection default;
CREATE TABLE parent (pk INT PRIMARY KEY);
CREATE TABLE child (fk INT);
SET DEBUG_SYNC="alter_table_inplace_after_lock_downgrade SIGNAL reached WAIT_FOR go";
SET FOREIGN_KEY_CHECKS=0;
connection con1;
SET DEBUG_SYNC="now WAIT_FOR reached";
INSERT INTO parent VALUES (1);
SET @old_lock_wait_timeout= @@lock_wait_timeout;
SET @@lock_wait_timeout= 1;
ALTER TABLE parent ADD COLUMN a INT;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SET DEBUG_SYNC="now SIGNAL go";
connection default;
SET FOREIGN_KEY_CHECKS=1;
ALTER TABLE child DROP FOREIGN KEY fk;
SET DEBUG_SYNC="alter_table_copy_after_lock_upgrade SIGNAL reached WAIT_FOR go";
connection con1;
SET DEBUG_SYNC="now WAIT_FOR reached";
INSERT INTO parent VALUES (2);
SET @old_lock_wait_timeout= @@lock_wait_timeout;
SET @@lock_wait_timeout= 1;
ALTER TABLE parent ADD COLUMN a INT;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SET DEBUG_SYNC="now SIGNAL go";
connection default;
SET DEBUG_SYNC="RESET";
ALTER TABLE child DROP FOREIGN KEY fk;
SET DEBUG_SYNC="alter_after_copy_table SIGNAL reached WAIT_FOR go";
connection con1;
SET DEBUG_SYNC="now WAIT_FOR reached";
SELECT * FROM parent;
SET @old_lock_wait_timeout= @@lock_wait_timeout;
SET @@lock_wait_timeout= 1;
DELETE FROM parent;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SET DEBUG_SYNC="now SIGNAL go";
connection default;
SET DEBUG_SYNC="RESET";
DROP TABLES child, parent;
connection con1;
disconnect con1;
connection default;
      SET @saved_binlog_format= @@SESSION.binlog_format;
SET SESSION debug= '+d,skip_dd_table_access_check';
SET @@foreign_key_checks= DEFAULT;
CREATE TABLE t1(a INT PRIMARY KEY);
CREATE TABLE t2(a INT PRIMARY KEY);
CREATE TABLE t3(a INT PRIMARY KEY, b INT, c INT);
ALTER TABLE t3 ADD FOREIGN KEY (b) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 ADD FOREIGN KEY (c) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 ADD FOREIGN KEY (b) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 DROP FOREIGN KEY t3_ibfk_1;
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 ADD FOREIGN KEY (b) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
DROP TABLE t3, t2, t1;
CREATE TABLE t1(a INT PRIMARY KEY);
CREATE TABLE name567890123456789012345678901234567890123456789012345678901234(a INT PRIMARY KEY, b INT);
ALTER TABLE name567890123456789012345678901234567890123456789012345678901234ADD FOREIGN KEY(b) REFERENCES t1(a);
DROP TABLE name567890123456789012345678901234567890123456789012345678901234, t1;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES child, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
SET @@foreign_key_checks= 1;
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES child, parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
CREATE TABLE child_copy LIKE child;
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child_copy');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES child, child_copy, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'parent');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
CREATE TABLE parent_base(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
CREATE TABLE parent LIKE parent_base;
SET @@foreign_key_checks= 1;
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLE child, parent_base, parent;
CREATE TABLE source(pk INTEGER PRIMARY KEY, j INTEGER);
INSERT INTO source VALUES (1, 1);
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key(j));
INSERT INTO parent VALUES (2, 1);
SET @@SESSION.binlog_format=STATEMENT;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j)) AS SELECT pk, j AS fk FROM source;
SET SESSION binlog_format= @saved_binlog_format;
SELECT * FROM child;
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES source, child, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE source(pk INTEGER PRIMARY KEY, j INTEGER);
INSERT INTO source VALUES (1, 1);
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
SET @@SESSION.binlog_format=STATEMENT;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key(j)) AS SELECT * FROM source;
SET SESSION binlog_format= @saved_binlog_format;
SELECT * FROM child;
SET @@foreign_key_checks= 1;
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES source, child, parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY parent_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, k INTEGER, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j), UNIQUE KEY child_key(k));
INSERT INTO child VALUES (1, 2, 3);
CREATE TABLE grandchild(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES child(k));
INSERT INTO grandchild VALUES (1, 2);
SET @@foreign_key_checks= 0;
CREATE TABLE orphan_grandchild(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES siebling(k));
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE child TO siebling;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
INSERT INTO siebling VALUES (1, 2, 3);
INSERT INTO grandchild VALUES (1, 2);
INSERT INTO orphan_grandchild VALUES (1, 2);
DROP TABLE grandchild;
DROP TABLE orphan_grandchild;
DROP TABLE siebling;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY parent_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j) ON DELETE CASCADE);
SET @@foreign_key_checks= 0;
LOCK TABLES parent WRITE;
SELECT OBJECT_TYPE, OBJECT_SCHEMA, OBJECT_NAME, COLUMN_NAME,  LOCK_TYPE FROM performance_schema.metadata_locks  WHERE OBJECT_NAME LIKE 'child'  ORDER BY OBJECT_TYPE, OBJECT_SCHEMA, OBJECT_NAME, COLUMN_NAME, LOCK_TYPE;
SET @@session.lock_wait_timeout= 1;
INSERT INTO child VALUES (1, 1);
UNLOCK TABLES;
SET @@foreign_key_checks= 1;
SELECT LOCK_TYPE FROM performance_schema.metadata_locks  WHERE OBJECT_NAME LIKE 'child';
DROP TABLE child;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY parent_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j) ON DELETE CASCADE);
PREPARE stmt FROM 'DELETE FROM parent WHERE pk = ?';
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
SET @a= 1;
EXECUTE stmt USING @a;
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
ALTER TABLE child ADD COLUMN (j INTEGER);
EXECUTE stmt USING @a;
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
EXECUTE stmt USING @a;
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
DROP TABLE child;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER, j INTEGER,  UNIQUE KEY parent_i_key(i), UNIQUE KEY parent_j_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER, fk_j INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i),  FOREIGN KEY (fk_j) REFERENCES parent(j));
ALTER TABLE child RENAME TO siebling;
DROP TABLES siebling, parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_key(i));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i));
RENAME TABLE parent TO mother, mother TO father;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE child TO sister, sister TO brother;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE father TO mother, brother TO sister, mother TO parent, sister TO child;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLES child, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES mother(i));
SET @@foreign_key_checks= 1;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_key(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE parent TO mother, mother TO father;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLES child, father;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER, j INTEGER,  UNIQUE KEY parent_i_key(i),  UNIQUE KEY parent_j_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER, fk_j INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i),  FOREIGN KEY (fk_j) REFERENCES parent(j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE parent TO mother;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLES child, mother;
CREATE TABLE self (pk INT PRIMARY KEY, fk INT, FOREIGN KEY(fk) REFERENCES self(pk));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME TO self2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self2 RENAME TO self3, ADD COLUMN i INT;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self3;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_i_key(i));
SET @@foreign_key_checks= 0;
CREATE TABLE grandchild(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES s1.child(i));
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
CREATE SCHEMA s1;
CREATE TABLE s1.child(pk INTEGER PRIMARY KEY, i INTEGER, fk_i INTEGER,  UNIQUE KEY child_i_key(i),  FOREIGN KEY (fk_i) REFERENCES test.parent(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
DROP SCHEMA s1;
SET @@foreign_key_checks= 0;
DROP SCHEMA s1;
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
CREATE SCHEMA s1;
CREATE TABLE s1.child(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY child_i_key(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
DROP SCHEMA s1;
SET @@foreign_key_checks= 0;
DROP SCHEMA s1;
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
DROP TABLE grandchild;
CREATE SCHEMA s1;
CREATE TABLE s1.child(pk INTEGER PRIMARY KEY, fk_i INTEGER);
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE s1.child ADD FOREIGN KEY (fk_i) REFERENCES test.parent(i);
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP SCHEMA s1;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_key(i));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
SET @@session.debug= '+d,fail_while_invalidating_fk_parents';
ALTER TABLE child RENAME TO siebling;
SET @@session.debug= '-d,fail_while_invalidating_fk_parents';
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE siebling, parent;
CREATE TABLE parent (i INT, j INT, PRIMARY KEY (i), UNIQUE u(i,j));
CREATE TABLE child (i INT, j INT, FOREIGN KEY (i, j) REFERENCES parent (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u TO u1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
CREATE TABLE parent (i INT, j INT, k INT, PRIMARY KEY (i), UNIQUE u(j), UNIQUE u1(i,j), UNIQUE u2(i,j,k));
CREATE TABLE child (i INT, j INT, k INT, FOREIGN KEY (i, j, k) REFERENCES parent (i, j, k));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u2 TO u3;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
CREATE TABLE parent (i INT, j INT,                     d INT GENERATED ALWAYS AS (i) VIRTUAL,                     e INT GENERATED ALWAYS AS (j) VIRTUAL,                     PRIMARY KEY (i), UNIQUE u(i,d), UNIQUE u1(i,j,e));
CREATE TABLE child (i INT, j INT, FOREIGN KEY (i, j) REFERENCES parent (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
CREATE TABLE parent (i INT, a VARCHAR(10), b VARCHAR(10),                     PRIMARY KEY (i), UNIQUE u(i,a(5)), UNIQUE u1(i,a,b(5)));
CREATE TABLE child (i INT, a VARCHAR(10), FOREIGN KEY (i, a) REFERENCES parent (i, a));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }  CREATE TABLE self (i INT, j INT, i2 INT, j2 INT, PRIMARY KEY (i), UNIQUE u(i,j),                   FOREIGN KEY (i2, j2) REFERENCES self (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u TO u1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
CREATE TABLE self (i INT, j INT, k INT, i2 INT, j2 INT, k2 INT,                   PRIMARY KEY (i), UNIQUE u(j), UNIQUE u1(i,j), UNIQUE u2(i,j,k),                   FOREIGN KEY (i2, j2, k2) REFERENCES self (i, j, k));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u2 TO u3;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
CREATE TABLE self (i INT, j INT, i2 INT, j2 INT,                   d INT GENERATED ALWAYS AS (i) VIRTUAL,                   e INT GENERATED ALWAYS AS (j) VIRTUAL,                     PRIMARY KEY (i), UNIQUE u(i,d), UNIQUE u1(i,j,e),                     FOREIGN KEY (i2, j2) REFERENCES self (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
CREATE TABLE self (i INT, a VARCHAR(10), b VARCHAR(10), i2 INT, a2 VARCHAR(10),                   PRIMARY KEY (i), UNIQUE u(i,a(5)), UNIQUE u1(i,a,b(5)),                   FOREIGN KEY (i2, a2) REFERENCES self (i, a));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
SET @@foreign_key_checks= DEFAULT;
SET SESSION debug= '-d,skip_dd_table_access_check';
connect (con1, localhost, root,,);
connection default;
CREATE TABLE parent (pk INT PRIMARY KEY);
CREATE TABLE child (fk INT);
SET DEBUG_SYNC="alter_table_inplace_after_lock_downgrade SIGNAL reached WAIT_FOR go";
SET FOREIGN_KEY_CHECKS=0;
connection con1;
SET DEBUG_SYNC="now WAIT_FOR reached";
INSERT INTO parent VALUES (1);
SET @old_lock_wait_timeout= @@lock_wait_timeout;
SET @@lock_wait_timeout= 1;
ALTER TABLE parent ADD COLUMN a INT;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SET DEBUG_SYNC="now SIGNAL go";
connection default;
SET FOREIGN_KEY_CHECKS=1;
ALTER TABLE child DROP FOREIGN KEY fk;
SET DEBUG_SYNC="alter_table_copy_after_lock_upgrade SIGNAL reached WAIT_FOR go";
connection con1;
SET DEBUG_SYNC="now WAIT_FOR reached";
INSERT INTO parent VALUES (2);
SET @old_lock_wait_timeout= @@lock_wait_timeout;
SET @@lock_wait_timeout= 1;
ALTER TABLE parent ADD COLUMN a INT;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SET DEBUG_SYNC="now SIGNAL go";
connection default;
SET DEBUG_SYNC="RESET";
ALTER TABLE child DROP FOREIGN KEY fk;
SET DEBUG_SYNC="alter_after_copy_table SIGNAL reached WAIT_FOR go";
connection con1;
SET DEBUG_SYNC="now WAIT_FOR reached";
SELECT * FROM parent;
SET @old_lock_wait_timeout= @@lock_wait_timeout;
SET @@lock_wait_timeout= 1;
DELETE FROM parent;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SET DEBUG_SYNC="now SIGNAL go";
connection default;
SET DEBUG_SYNC="RESET";
DROP TABLES child, parent;
connection con1;
disconnect con1;
connection default;
      SET @saved_binlog_format= @@SESSION.binlog_format;
SET SESSION debug= '+d,skip_dd_table_access_check';
SET @@foreign_key_checks= DEFAULT;
CREATE TABLE t1(a INT PRIMARY KEY);
CREATE TABLE t2(a INT PRIMARY KEY);
CREATE TABLE t3(a INT PRIMARY KEY, b INT, c INT);
ALTER TABLE t3 ADD FOREIGN KEY (b) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 ADD FOREIGN KEY (c) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 ADD FOREIGN KEY (b) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 DROP FOREIGN KEY t3_ibfk_1;
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 ADD FOREIGN KEY (b) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
DROP TABLE t3, t2, t1;
CREATE TABLE t1(a INT PRIMARY KEY);
CREATE TABLE name567890123456789012345678901234567890123456789012345678901234(a INT PRIMARY KEY, b INT);
ALTER TABLE name567890123456789012345678901234567890123456789012345678901234ADD FOREIGN KEY(b) REFERENCES t1(a);
DROP TABLE name567890123456789012345678901234567890123456789012345678901234, t1;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES child, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
SET @@foreign_key_checks= 1;
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES child, parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
CREATE TABLE child_copy LIKE child;
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child_copy');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES child, child_copy, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'parent');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
CREATE TABLE parent_base(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
CREATE TABLE parent LIKE parent_base;
SET @@foreign_key_checks= 1;
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLE child, parent_base, parent;
CREATE TABLE source(pk INTEGER PRIMARY KEY, j INTEGER);
INSERT INTO source VALUES (1, 1);
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key(j));
INSERT INTO parent VALUES (2, 1);
SET @@SESSION.binlog_format=STATEMENT;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j)) AS SELECT pk, j AS fk FROM source;
SET SESSION binlog_format= @saved_binlog_format;
SELECT * FROM child;
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES source, child, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE source(pk INTEGER PRIMARY KEY, j INTEGER);
INSERT INTO source VALUES (1, 1);
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
SET @@SESSION.binlog_format=STATEMENT;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key(j)) AS SELECT * FROM source;
SET SESSION binlog_format= @saved_binlog_format;
SELECT * FROM child;
SET @@foreign_key_checks= 1;
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES source, child, parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY parent_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, k INTEGER, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j), UNIQUE KEY child_key(k));
INSERT INTO child VALUES (1, 2, 3);
CREATE TABLE grandchild(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES child(k));
INSERT INTO grandchild VALUES (1, 2);
SET @@foreign_key_checks= 0;
CREATE TABLE orphan_grandchild(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES siebling(k));
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE child TO siebling;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
INSERT INTO siebling VALUES (1, 2, 3);
INSERT INTO grandchild VALUES (1, 2);
INSERT INTO orphan_grandchild VALUES (1, 2);
DROP TABLE grandchild;
DROP TABLE orphan_grandchild;
DROP TABLE siebling;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY parent_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j) ON DELETE CASCADE);
SET @@foreign_key_checks= 0;
LOCK TABLES parent WRITE;
SELECT OBJECT_TYPE, OBJECT_SCHEMA, OBJECT_NAME, COLUMN_NAME,  LOCK_TYPE FROM performance_schema.metadata_locks  WHERE OBJECT_NAME LIKE 'child'  ORDER BY OBJECT_TYPE, OBJECT_SCHEMA, OBJECT_NAME, COLUMN_NAME, LOCK_TYPE;
SET @@session.lock_wait_timeout= 1;
INSERT INTO child VALUES (1, 1);
UNLOCK TABLES;
SET @@foreign_key_checks= 1;
SELECT LOCK_TYPE FROM performance_schema.metadata_locks  WHERE OBJECT_NAME LIKE 'child';
DROP TABLE child;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY parent_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j) ON DELETE CASCADE);
PREPARE stmt FROM 'DELETE FROM parent WHERE pk = ?';
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
SET @a= 1;
EXECUTE stmt USING @a;
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
ALTER TABLE child ADD COLUMN (j INTEGER);
EXECUTE stmt USING @a;
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
EXECUTE stmt USING @a;
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
DROP TABLE child;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER, j INTEGER,  UNIQUE KEY parent_i_key(i), UNIQUE KEY parent_j_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER, fk_j INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i),  FOREIGN KEY (fk_j) REFERENCES parent(j));
ALTER TABLE child RENAME TO siebling;
DROP TABLES siebling, parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_key(i));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i));
RENAME TABLE parent TO mother, mother TO father;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE child TO sister, sister TO brother;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE father TO mother, brother TO sister, mother TO parent, sister TO child;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLES child, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES mother(i));
SET @@foreign_key_checks= 1;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_key(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE parent TO mother, mother TO father;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLES child, father;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER, j INTEGER,  UNIQUE KEY parent_i_key(i),  UNIQUE KEY parent_j_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER, fk_j INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i),  FOREIGN KEY (fk_j) REFERENCES parent(j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE parent TO mother;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLES child, mother;
CREATE TABLE self (pk INT PRIMARY KEY, fk INT, FOREIGN KEY(fk) REFERENCES self(pk));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME TO self2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self2 RENAME TO self3, ADD COLUMN i INT;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self3;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_i_key(i));
SET @@foreign_key_checks= 0;
CREATE TABLE grandchild(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES s1.child(i));
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
CREATE SCHEMA s1;
CREATE TABLE s1.child(pk INTEGER PRIMARY KEY, i INTEGER, fk_i INTEGER,  UNIQUE KEY child_i_key(i),  FOREIGN KEY (fk_i) REFERENCES test.parent(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
DROP SCHEMA s1;
SET @@foreign_key_checks= 0;
DROP SCHEMA s1;
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
CREATE SCHEMA s1;
CREATE TABLE s1.child(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY child_i_key(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
DROP SCHEMA s1;
SET @@foreign_key_checks= 0;
DROP SCHEMA s1;
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
DROP TABLE grandchild;
CREATE SCHEMA s1;
CREATE TABLE s1.child(pk INTEGER PRIMARY KEY, fk_i INTEGER);
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE s1.child ADD FOREIGN KEY (fk_i) REFERENCES test.parent(i);
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP SCHEMA s1;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_key(i));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
SET @@session.debug= '+d,fail_while_invalidating_fk_parents';
ALTER TABLE child RENAME TO siebling;
SET @@session.debug= '-d,fail_while_invalidating_fk_parents';
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE siebling, parent;
CREATE TABLE parent (i INT, j INT, PRIMARY KEY (i), UNIQUE u(i,j));
CREATE TABLE child (i INT, j INT, FOREIGN KEY (i, j) REFERENCES parent (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u TO u1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
CREATE TABLE parent (i INT, j INT, k INT, PRIMARY KEY (i), UNIQUE u(j), UNIQUE u1(i,j), UNIQUE u2(i,j,k));
CREATE TABLE child (i INT, j INT, k INT, FOREIGN KEY (i, j, k) REFERENCES parent (i, j, k));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u2 TO u3;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
CREATE TABLE parent (i INT, j INT,                     d INT GENERATED ALWAYS AS (i) VIRTUAL,                     e INT GENERATED ALWAYS AS (j) VIRTUAL,                     PRIMARY KEY (i), UNIQUE u(i,d), UNIQUE u1(i,j,e));
CREATE TABLE child (i INT, j INT, FOREIGN KEY (i, j) REFERENCES parent (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
CREATE TABLE parent (i INT, a VARCHAR(10), b VARCHAR(10),                     PRIMARY KEY (i), UNIQUE u(i,a(5)), UNIQUE u1(i,a,b(5)));
CREATE TABLE child (i INT, a VARCHAR(10), FOREIGN KEY (i, a) REFERENCES parent (i, a));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }  CREATE TABLE self (i INT, j INT, i2 INT, j2 INT, PRIMARY KEY (i), UNIQUE u(i,j),                   FOREIGN KEY (i2, j2) REFERENCES self (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u TO u1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
CREATE TABLE self (i INT, j INT, k INT, i2 INT, j2 INT, k2 INT,                   PRIMARY KEY (i), UNIQUE u(j), UNIQUE u1(i,j), UNIQUE u2(i,j,k),                   FOREIGN KEY (i2, j2, k2) REFERENCES self (i, j, k));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u2 TO u3;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
CREATE TABLE self (i INT, j INT, i2 INT, j2 INT,                   d INT GENERATED ALWAYS AS (i) VIRTUAL,                   e INT GENERATED ALWAYS AS (j) VIRTUAL,                     PRIMARY KEY (i), UNIQUE u(i,d), UNIQUE u1(i,j,e),                     FOREIGN KEY (i2, j2) REFERENCES self (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
CREATE TABLE self (i INT, a VARCHAR(10), b VARCHAR(10), i2 INT, a2 VARCHAR(10),                   PRIMARY KEY (i), UNIQUE u(i,a(5)), UNIQUE u1(i,a,b(5)),                   FOREIGN KEY (i2, a2) REFERENCES self (i, a));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
SET @@foreign_key_checks= DEFAULT;
SET SESSION debug= '-d,skip_dd_table_access_check';
connect (con1, localhost, root,,);
connection default;
CREATE TABLE parent (pk INT PRIMARY KEY);
CREATE TABLE child (fk INT);
SET DEBUG_SYNC="alter_table_inplace_after_lock_downgrade SIGNAL reached WAIT_FOR go";
SET FOREIGN_KEY_CHECKS=0;
connection con1;
SET DEBUG_SYNC="now WAIT_FOR reached";
INSERT INTO parent VALUES (1);
SET @old_lock_wait_timeout= @@lock_wait_timeout;
SET @@lock_wait_timeout= 1;
ALTER TABLE parent ADD COLUMN a INT;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SET DEBUG_SYNC="now SIGNAL go";
connection default;
SET FOREIGN_KEY_CHECKS=1;
ALTER TABLE child DROP FOREIGN KEY fk;
SET DEBUG_SYNC="alter_table_copy_after_lock_upgrade SIGNAL reached WAIT_FOR go";
connection con1;
SET DEBUG_SYNC="now WAIT_FOR reached";
INSERT INTO parent VALUES (2);
SET @old_lock_wait_timeout= @@lock_wait_timeout;
SET @@lock_wait_timeout= 1;
ALTER TABLE parent ADD COLUMN a INT;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SET DEBUG_SYNC="now SIGNAL go";
connection default;
SET DEBUG_SYNC="RESET";
ALTER TABLE child DROP FOREIGN KEY fk;
SET DEBUG_SYNC="alter_after_copy_table SIGNAL reached WAIT_FOR go";
connection con1;
SET DEBUG_SYNC="now WAIT_FOR reached";
SELECT * FROM parent;
SET @old_lock_wait_timeout= @@lock_wait_timeout;
SET @@lock_wait_timeout= 1;
DELETE FROM parent;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SET DEBUG_SYNC="now SIGNAL go";
connection default;
SET DEBUG_SYNC="RESET";
DROP TABLES child, parent;
connection con1;
disconnect con1;
connection default;
      SET @saved_binlog_format= @@SESSION.binlog_format;
SET SESSION debug= '+d,skip_dd_table_access_check';
SET @@foreign_key_checks= DEFAULT;
CREATE TABLE t1(a INT PRIMARY KEY);
CREATE TABLE t2(a INT PRIMARY KEY);
CREATE TABLE t3(a INT PRIMARY KEY, b INT, c INT);
ALTER TABLE t3 ADD FOREIGN KEY (b) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 ADD FOREIGN KEY (c) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 ADD FOREIGN KEY (b) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 DROP FOREIGN KEY t3_ibfk_1;
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
ALTER TABLE t3 ADD FOREIGN KEY (b) REFERENCES t1(a);
SHOW CREATE TABLE t3;
SELECT fk.name FROM mysql.foreign_keys AS fk, mysql.tables AS tWHERE fk.table_id = t.id AND t.name = 't3';
DROP TABLE t3, t2, t1;
CREATE TABLE t1(a INT PRIMARY KEY);
CREATE TABLE name567890123456789012345678901234567890123456789012345678901234(a INT PRIMARY KEY, b INT);
ALTER TABLE name567890123456789012345678901234567890123456789012345678901234ADD FOREIGN KEY(b) REFERENCES t1(a);
DROP TABLE name567890123456789012345678901234567890123456789012345678901234, t1;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES child, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
SET @@foreign_key_checks= 1;
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES child, parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
CREATE TABLE child_copy LIKE child;
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child_copy');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES child, child_copy, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'parent');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
CREATE TABLE parent_base(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key (j));
CREATE TABLE parent LIKE parent_base;
SET @@foreign_key_checks= 1;
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLE child, parent_base, parent;
CREATE TABLE source(pk INTEGER PRIMARY KEY, j INTEGER);
INSERT INTO source VALUES (1, 1);
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key(j));
INSERT INTO parent VALUES (2, 1);
SET @@SESSION.binlog_format=STATEMENT;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j)) AS SELECT pk, j AS fk FROM source;
SET SESSION binlog_format= @saved_binlog_format;
SELECT * FROM child;
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES source, child, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE source(pk INTEGER PRIMARY KEY, j INTEGER);
INSERT INTO source VALUES (1, 1);
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j));
SELECT name FROM mysql.indexes  WHERE table_id = (SELECT id from mysql.tables WHERE name LIKE 'child');
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
SET @@SESSION.binlog_format=STATEMENT;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY my_key(j)) AS SELECT * FROM source;
SET SESSION binlog_format= @saved_binlog_format;
SELECT * FROM child;
SET @@foreign_key_checks= 1;
SELECT unique_constraint_name FROM mysql.foreign_keys  WHERE referenced_table_name LIKE 'parent';
DROP TABLES source, child, parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY parent_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, k INTEGER, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j), UNIQUE KEY child_key(k));
INSERT INTO child VALUES (1, 2, 3);
CREATE TABLE grandchild(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES child(k));
INSERT INTO grandchild VALUES (1, 2);
SET @@foreign_key_checks= 0;
CREATE TABLE orphan_grandchild(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES siebling(k));
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE child TO siebling;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
INSERT INTO siebling VALUES (1, 2, 3);
INSERT INTO grandchild VALUES (1, 2);
INSERT INTO orphan_grandchild VALUES (1, 2);
DROP TABLE grandchild;
DROP TABLE orphan_grandchild;
DROP TABLE siebling;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY parent_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j) ON DELETE CASCADE);
SET @@foreign_key_checks= 0;
LOCK TABLES parent WRITE;
SELECT OBJECT_TYPE, OBJECT_SCHEMA, OBJECT_NAME, COLUMN_NAME,  LOCK_TYPE FROM performance_schema.metadata_locks  WHERE OBJECT_NAME LIKE 'child'  ORDER BY OBJECT_TYPE, OBJECT_SCHEMA, OBJECT_NAME, COLUMN_NAME, LOCK_TYPE;
SET @@session.lock_wait_timeout= 1;
INSERT INTO child VALUES (1, 1);
UNLOCK TABLES;
SET @@foreign_key_checks= 1;
SELECT LOCK_TYPE FROM performance_schema.metadata_locks  WHERE OBJECT_NAME LIKE 'child';
DROP TABLE child;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, j INTEGER,  UNIQUE KEY parent_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk INTEGER,  FOREIGN KEY (fk) REFERENCES parent(j) ON DELETE CASCADE);
PREPARE stmt FROM 'DELETE FROM parent WHERE pk = ?';
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
SET @a= 1;
EXECUTE stmt USING @a;
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
ALTER TABLE child ADD COLUMN (j INTEGER);
EXECUTE stmt USING @a;
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
EXECUTE stmt USING @a;
SELECT COUNT_REPREPARE, COUNT_EXECUTE  FROM performance_schema.prepared_statements_instances  WHERE STATEMENT_NAME LIKE 'stmt';
DROP TABLE child;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER, j INTEGER,  UNIQUE KEY parent_i_key(i), UNIQUE KEY parent_j_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER, fk_j INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i),  FOREIGN KEY (fk_j) REFERENCES parent(j));
ALTER TABLE child RENAME TO siebling;
DROP TABLES siebling, parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_key(i));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i));
RENAME TABLE parent TO mother, mother TO father;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE child TO sister, sister TO brother;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE father TO mother, brother TO sister, mother TO parent, sister TO child;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLES child, parent;
SET @@foreign_key_checks= 0;
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES mother(i));
SET @@foreign_key_checks= 1;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_key(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE parent TO mother, mother TO father;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLES child, father;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER, j INTEGER,  UNIQUE KEY parent_i_key(i),  UNIQUE KEY parent_j_key(j));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER, fk_j INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i),  FOREIGN KEY (fk_j) REFERENCES parent(j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
RENAME TABLE parent TO mother;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLES child, mother;
CREATE TABLE self (pk INT PRIMARY KEY, fk INT, FOREIGN KEY(fk) REFERENCES self(pk));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME TO self2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self2 RENAME TO self3, ADD COLUMN i INT;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self3;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_i_key(i));
SET @@foreign_key_checks= 0;
CREATE TABLE grandchild(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES s1.child(i));
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
CREATE SCHEMA s1;
CREATE TABLE s1.child(pk INTEGER PRIMARY KEY, i INTEGER, fk_i INTEGER,  UNIQUE KEY child_i_key(i),  FOREIGN KEY (fk_i) REFERENCES test.parent(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
DROP SCHEMA s1;
SET @@foreign_key_checks= 0;
DROP SCHEMA s1;
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
CREATE SCHEMA s1;
CREATE TABLE s1.child(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY child_i_key(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
DROP SCHEMA s1;
SET @@foreign_key_checks= 0;
DROP SCHEMA s1;
SET @@foreign_key_checks= 1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 's1';
DROP TABLE grandchild;
CREATE SCHEMA s1;
CREATE TABLE s1.child(pk INTEGER PRIMARY KEY, fk_i INTEGER);
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE s1.child ADD FOREIGN KEY (fk_i) REFERENCES test.parent(i);
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP SCHEMA s1;
DROP TABLE parent;
CREATE TABLE parent(pk INTEGER PRIMARY KEY, i INTEGER,  UNIQUE KEY parent_key(i));
CREATE TABLE child(pk INTEGER PRIMARY KEY, fk_i INTEGER,  FOREIGN KEY (fk_i) REFERENCES parent(i));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
SET @@session.debug= '+d,fail_while_invalidating_fk_parents';
ALTER TABLE child RENAME TO siebling;
SET @@session.debug= '-d,fail_while_invalidating_fk_parents';
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE siebling, parent;
CREATE TABLE parent (i INT, j INT, PRIMARY KEY (i), UNIQUE u(i,j));
CREATE TABLE child (i INT, j INT, FOREIGN KEY (i, j) REFERENCES parent (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u TO u1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
CREATE TABLE parent (i INT, j INT, k INT, PRIMARY KEY (i), UNIQUE u(j), UNIQUE u1(i,j), UNIQUE u2(i,j,k));
CREATE TABLE child (i INT, j INT, k INT, FOREIGN KEY (i, j, k) REFERENCES parent (i, j, k));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u2 TO u3;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
CREATE TABLE parent (i INT, j INT,                     d INT GENERATED ALWAYS AS (i) VIRTUAL,                     e INT GENERATED ALWAYS AS (j) VIRTUAL,                     PRIMARY KEY (i), UNIQUE u(i,d), UNIQUE u1(i,j,e));
CREATE TABLE child (i INT, j INT, FOREIGN KEY (i, j) REFERENCES parent (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
CREATE TABLE parent (i INT, a VARCHAR(10), b VARCHAR(10),                     PRIMARY KEY (i), UNIQUE u(i,a(5)), UNIQUE u1(i,a,b(5)));
CREATE TABLE child (i INT, a VARCHAR(10), FOREIGN KEY (i, a) REFERENCES parent (i, a));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE parent RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE child, parent;
  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }  CREATE TABLE self (i INT, j INT, i2 INT, j2 INT, PRIMARY KEY (i), UNIQUE u(i,j),                   FOREIGN KEY (i2, j2) REFERENCES self (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u TO u1;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
CREATE TABLE self (i INT, j INT, k INT, i2 INT, j2 INT, k2 INT,                   PRIMARY KEY (i), UNIQUE u(j), UNIQUE u1(i,j), UNIQUE u2(i,j,k),                   FOREIGN KEY (i2, j2, k2) REFERENCES self (i, j, k));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u2 TO u3;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
CREATE TABLE self (i INT, j INT, i2 INT, j2 INT,                   d INT GENERATED ALWAYS AS (i) VIRTUAL,                   e INT GENERATED ALWAYS AS (j) VIRTUAL,                     PRIMARY KEY (i), UNIQUE u(i,d), UNIQUE u1(i,j,e),                     FOREIGN KEY (i2, j2) REFERENCES self (i, j));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
CREATE TABLE self (i INT, a VARCHAR(10), b VARCHAR(10), i2 INT, a2 VARCHAR(10),                   PRIMARY KEY (i), UNIQUE u(i,a(5)), UNIQUE u1(i,a,b(5)),                   FOREIGN KEY (i2, a2) REFERENCES self (i, a));
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
ALTER TABLE self RENAME KEY u1 TO u2;
SELECT name, unique_constraint_name, referenced_table_schema, referenced_table_name  FROM mysql.foreign_keys  WHERE referenced_table_schema LIKE 'test';
DROP TABLE self;
SET @@foreign_key_checks= DEFAULT;
SET SESSION debug= '-d,skip_dd_table_access_check';
connect (con1, localhost, root,,);
connection default;
CREATE TABLE parent (pk INT PRIMARY KEY);
CREATE TABLE child (fk INT);
SET DEBUG_SYNC="alter_table_inplace_after_lock_downgrade SIGNAL reached WAIT_FOR go";
SET FOREIGN_KEY_CHECKS=0;
connection con1;
SET DEBUG_SYNC="now WAIT_FOR reached";
INSERT INTO parent VALUES (1);
SET @old_lock_wait_timeout= @@lock_wait_timeout;
SET @@lock_wait_timeout= 1;
ALTER TABLE parent ADD COLUMN a INT;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SET DEBUG_SYNC="now SIGNAL go";
connection default;
SET FOREIGN_KEY_CHECKS=1;
ALTER TABLE child DROP FOREIGN KEY fk;
SET DEBUG_SYNC="alter_table_copy_after_lock_upgrade SIGNAL reached WAIT_FOR go";
connection con1;
SET DEBUG_SYNC="now WAIT_FOR reached";
INSERT INTO parent VALUES (2);
SET @old_lock_wait_timeout= @@lock_wait_timeout;
SET @@lock_wait_timeout= 1;
ALTER TABLE parent ADD COLUMN a INT;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SET DEBUG_SYNC="now SIGNAL go";
connection default;
SET DEBUG_SYNC="RESET";
ALTER TABLE child DROP FOREIGN KEY fk;
SET DEBUG_SYNC="alter_after_copy_table SIGNAL reached WAIT_FOR go";
connection con1;
SET DEBUG_SYNC="now WAIT_FOR reached";
SELECT * FROM parent;
SET @old_lock_wait_timeout= @@lock_wait_timeout;
SET @@lock_wait_timeout= 1;
DELETE FROM parent;
SET @@lock_wait_timeout= @old_lock_wait_timeout;
SET DEBUG_SYNC="now SIGNAL go";
connection default;
SET DEBUG_SYNC="RESET";
DROP TABLES child, parent;
connection con1;
disconnect con1;
connection default;
