call mtr.add_suppression(".* Failed to activate default role .*");
CREATE ROLE role;
DROP ROLE role;
CREATE ROLE `ident with space`;
CREATE ROLE 'text string';
CREATE ROLE role@host;
DROP ROLE role@host;
CREATE ROLE 'role'@`host`;
CREATE ROLE IF NOT EXISTS 'role'@'host';
DROP ROLE 'role'@`host`;
CREATE ROLE `role`@host;
DROP ROLE `role`@host;
CREATE ROLE `role`@`host`;
DROP ROLE `role`@`host`;
CREATE ROLE role, role1, role2;
CREATE ROLE r1 IDENTIFIED BY 'test';
SELECT user,host, plugin,IF(account_locked = 'Y',"Account is locked","ERROR") FROM mysql.user u WHERE u.user NOT IN ('root', 'mysql.sys', 'mysql.session', 'mysql.infoschema');
CREATE ROLE IF NOT EXISTS role1, role2;
GRANT 'role' TO role1;
SHOW STATUS LIKE '%acl_cache%';
SELECT count_alloc - count_free FROM performance_schema.memory_summary_global_by_event_name WHERE event_name LIKE '%acl_map_cache';
CREATE USER user1, user2, user3@host3;
GRANT role1 TO user1;
CREATE ROLE role2@host2;
CREATE ROLE role3;
GRANT role1, `role2`@`host2`, role3 TO user1, user2, `user3`@`host3`;
GRANT sys_role TO peter@clickhost.net;
GRANT role1 TO peter@clickhost.net;
GRANT sys_role TO user1;
CREATE USER joan;
CREATE USER sally;
CREATE ROLE engineering;
CREATE ROLE consultants;
CREATE ROLE qa;
GRANT engineering TO joan;
GRANT engineering TO sally;
GRANT engineering, consultants TO joan, sally;
GRANT qa TO consultants;
CREATE ROLE `engineering`@`US`;
CREATE ROLE `engineering`@`INDIA`;
GRANT `engineering`@`US` TO `engineering`@`INDIA`;
CREATE ROLE `wp_administrators`;
CREATE USER `joe`@`localhost`;
GRANT wp_administrators TO joe@localhost WITH ADMIN OPTION;
GRANT SELECT ON test.* TO wp_administrators;
GRANT engineering ON *.*, SUPER ON *.* TO joan, sally;
GRANT SUPER, engineering ON *.* TO joan, sally;
GRANT engineering,SELECT ON *.* TO joan;
REVOKE engineering ON *.* FROM joan, sally;
REVOKE wp_administrators, engineering ON *.* FROM joan, sally;
GRANT 'role',engineering TO current_user();
SET ROLE 'role';
SELECT CURRENT_ROLE();
SET ROLE role1, role2;
SELECT CURRENT_ROLE();
SET ROLE `role`;
SELECT CURRENT_ROLE();
SET ROLE role1, role2;
SELECT CURRENT_ROLE();
SET ROLE NONE;
SELECT CURRENT_ROLE();
SET ROLE none;
SELECT CURRENT_ROLE();
SET ROLE engineering, 'role';
SELECT CURRENT_ROLE();
SET ROLE DEFAULT;
SELECT CURRENT_ROLE();
SET ROLE ALL;
SELECT CURRENT_ROLE();
SET ROLE ALL EXCEPT role1;
SELECT CURRENT_ROLE();
SHOW GRANTS FOR current_user() USING `engineering`@`%`,`role`@`%`;
GRANT role1 TO current_user();
SET ROLE ALL EXCEPT role1;
SELECT CURRENT_ROLE();
SET ROLE ALL;
SELECT CURRENT_ROLE();
SHOW STATUS LIKE '%acl_cache%';
REVOKE 'role' FROM role1;
REVOKE role1, `role2`@`host2`, role3 FROM user1, user2, `user3`@`host3`;
REVOKE engineering_role FROM foo@localhost;
REVOKE engineering FROM managers;
REVOKE engineering FROM joan;
REVOKE engineering, role1 FROM root@localhost;
SELECT ExtractValue(ROLES_GRAPHML(),'count(//node)') as num_nodes;
SELECT ExtractValue(ROLES_GRAPHML(),'count(//edge)') as num_edges;
SELECT * FROM mysql.role_edges;
SELECT * FROM mysql.default_roles;
DROP ROLE 'role';
DROP ROLE IF EXISTS 'role';
DROP ROLE IF EXISTS role1, role2;
DROP ROLE IF EXISTS `role`, `role`@`host`;
DROP ROLE 'role';
SELECT ExtractValue(ROLES_GRAPHML(),'count(//node)') as num_nodes;
SELECT ExtractValue(ROLES_GRAPHML(),'count(//edge)') as num_edges;
SELECT * FROM mysql.role_edges;
SELECT * FROM mysql.default_roles;
ALTER USER `joe`@`localhost` DEFAULT ROLE wp_administrators;
SELECT * FROM mysql.default_roles;
ALTER USER `joe`@`localhost` DEFAULT ROLE wp_administrators,engineering;
SELECT * FROM mysql.default_roles;
ALTER USER `joe`@`localhost` DEFAULT ROLE wp_administrators;
SELECT * FROM mysql.default_roles;
ALTER USER CURRENT_USER() DEFAULT ROLE NONE;
FLUSH PRIVILEGES;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
SHOW GRANTS FOR `wp_administrators`;
SHOW GRANTS FOR `joe`@`localhost`;
SHOW GRANTS FOR `joe`@`localhost` USING wp_administrators;
SHOW GRANTS FOR `joe`@`localhost` USING role1;
GRANT engineering TO joe@localhost;
GRANT UPDATE ON test.* TO engineering;
SHOW GRANTS FOR `joe`@`localhost` USING engineering;
SHOW GRANTS FOR `joe`@`localhost`;
GRANT consultants TO engineering WITH ADMIN OPTION;
CREATE TABLE t_external (c1 INT, c2 INT, c3 INT);
GRANT UPDATE(c1,c3), INSERT(c1) ON test.t_external TO consultants;
SHOW GRANTS FOR `joe`@`localhost` USING engineering;
SHOW GRANTS FOR sally USING engineering, consultants;
REVOKE consultants from engineering;
SHOW GRANTS FOR sally USING engineering, consultants;
SHOW GRANTS FOR sally USING consultants;
SHOW GRANTS FOR sally USING engineering;
REVOKE engineering FROM sally;
SHOW GRANTS FOR sally USING consultants;
SHOW GRANTS FOR sally USING engineering;
GRANT consultants TO engineering WITH ADMIN OPTION;
GRANT consultants TO sally WITH ADMIN OPTION;
SELECT ExtractValue(ROLES_GRAPHML(),'count(//node)') as num_nodes;
SELECT ExtractValue(ROLES_GRAPHML(),'count(//edge)') as num_edges;
DROP ROLE engineering;
SHOW GRANTS FOR sally USING engineering;
SELECT * FROM mysql.role_edges;
SELECT * FROM mysql.default_roles;
SELECT IF(USER='joe' AND HOST='localhost' and DEFAULT_ROLE_USER='wp_administrators', "ALL OK", "ERROR! WRONG DEFAULT ROLE!") AS Default_roles_check FROM mysql.default_roles;
ALTER USER joe@localhost IDENTIFIED BY 'joe';
CREATE ROLE `replication`;
GRANT `replication` TO joe@localhost;
GRANT UPDATE ON test.* TO `replication`;
GRANT SELECT ON test.t_external TO `replication`;
CREATE ROLE delete_stuff_privilege;
GRANT DELETE ON test.t_external TO delete_stuff_privilege;
GRANT delete_stuff_privilege TO `replication`;
SELECT CURRENT_USER(), CURRENT_ROLE();
SHOW GRANTS;
SHOW GRANTS FOR current_user() USING `replication`;
SHOW GRANTS FOR `joe`@`localhost` USING `replication`;
SHOW GRANTS FOR `root`@`localhost` USING `replication`;
SHOW STATUS LIKE '%acl_cache%';
DROP ROLE `replication`;
DROP ROLE `delete_stuff_privilege`;
DROP ROLE consultants;
DROP ROLE `ident with space`;
DROP ROLE joan;
DROP ROLE role3;
DROP ROLE qa;
DROP ROLE sally;
DROP ROLE `text string`;
DROP ROLE user1;
DROP ROLE user2;
DROP ROLE wp_administrators;
SELECT user, host from mysql.user where user='role';
DROP ROLE role2@host2;
DROP ROLE user3@host3;
DROP ROLE engineering@india;
DROP ROLE engineering@us;
DROP ROLE joe@localhost;
SELECT ExtractValue(ROLES_GRAPHML(),'count(//node)') as num_nodes;
SELECT ExtractValue(ROLES_GRAPHML(),'count(//edge)') as num_edges;
SELECT IF (COUNT(*) > 0, "ERROR! There shouldn't be any edges in the table", "ALL OK!") AS health_check FROM mysql.role_edges;
DROP TABLE t_external;
CREATE ROLE maintenance_admin;
CREATE ROLE user_admin;
CREATE ROLE security_admin;
CREATE ROLE schema_admin;
CREATE ROLE schema_designer;
CREATE ROLE db_admin;
CREATE ROLE replication_admin;
CREATE ROLE backup_admin;
CREATE ROLE process_admin;
CREATE ROLE monitor_admin;
GRANT schema_designer TO schema_admin;
GRANT user_admin TO security_admin;
GRANT monitor_admin TO security_admin;
GRANT replication_admin TO db_admin;
GRANT backup_admin TO db_admin;
GRANT schema_admin TO db_admin;
GRANT security_admin TO process_admin;
GRANT no_such_grant TO user_admin;
GRANT CREATE USER ON *.* TO user_admin;
GRANT UPDATE,INSERT,DELETE ON mysql.user TO security_admin;
GRANT UPDATE,INSERT,DELETE ON mysql.db TO security_admin;
GRANT UPDATE,INSERT,DELETE ON mysql.proxies_priv TO security_admin WITH GRANT OPTION;
GRANT UPDATE,INSERT,DELETE ON mysql.role_edges TO security_admin;
GRANT CREATE,INSERT,DELETE ON *.* TO schema_designer;
GRANT UPDATE ON test.* TO schema_designer;
GRANT DROP ON *.* TO schema_admin;
CREATE USER `joe_schema_designer`@`localhost` IDENTIFIED BY 'schmoo';
GRANT `schema_designer` TO `joe_schema_designer`@`localhost`;
GRANT `schema_admin` TO `joe_schema_designer`@`localhost`;
ALTER USER `joe_schema_designer`@`localhost` DEFAULT ROLE `schema_designer`;
SHOW GRANTS FOR 'joe_schema_designer'@'localhost' USING 'schema_designer';
SELECT CURRENT_USER(), CURRENT_ROLE();
CREATE TABLE t1 (c1 INT);
INSERT INTO t1 VALUES (1),(2);
UPDATE t1 SET c1=1;
DELETE FROM t1;
DROP TABLE t1;
DROP DATABASE joes;
SET ROLE `schema_admin`;
DROP TABLE t1;
CREATE DATABASE joes;
CREATE TABLE joes.t1 (c1 INT);
DROP TABLE joes.t1;
DROP DATABASE joes;
SELECT * FROM mysql.user;
CREATE TABLE t1 (c1 INT);
INSERT INTO t1 VALUES (1),(2);
UPDATE t1 SET c1=1;
DELETE FROM t1;
DROP TABLE t1;
DROP TABLE t1;
CREATE DATABASE db1;
CREATE TABLE db1.t1 (c1 int, c2 int);
CREATE TABLE db1.t2 (c1 int);
GRANT SELECT ON db1.t1 TO backup_admin;
GRANT UPDATE(c2) ON db1.t1 TO backup_admin;
INSERT INTO db1.t1 VALUES (1,2),(3,4);
INSERT INTO db1.t2 VALUES (1),(2),(3),(4);
GRANT db_admin to joe_schema_designer@localhost;
SHOW GRANTS FOR 'joe_schema_designer'@'localhost' USING 'db_admin';
SELECT * FROM db1.t1;
SET ROLE db_admin;
SELECT * FROM db1.t1;
UPDATE db1.t1 SET c1=1;
UPDATE db1.t1 SET c2=1;
SET ROLE NONE;
SELECT * FROM db1.t1;
SET ROLE db_admin;
SELECT * FROM db1.t1;
SELECT count_alloc - count_free FROM performance_schema.memory_summary_global_by_event_name WHERE event_name LIKE '%acl_map_cache';
CREATE PROCEDURE db1.sp1() BEGIN SELECT * FROM db1.t1; END;
CREATE PROCEDURE test.sp1() BEGIN SELECT * FROM db1.t1; END;
CREATE PROCEDURE db1.sp2() SQL SECURITY DEFINER BEGIN SELECT * FROM db1.t2; END;
GRANT EXECUTE ON PROCEDURE db1.sp1 TO `db_admin`;
GRANT EXECUTE ON PROCEDURE db1.sp2 TO `db_admin`;
SHOW GRANTS FOR CURRENT_USER() USING `db_admin`;
CALL db1.sp1();
CALL test.sp1();
SHOW STATUS LIKE '%acl_cache%';
GRANT EXECUTE ON test.* TO 'joe_schema_designer'@'localhost';
SET ROLE db_admin;
SELECT CURRENT_ROLE();
SHOW GRANTS FOR CURRENT_USER() USING db_admin;
CALL db1.sp1();
CALL test.sp1();
CALL db1.sp2();
SHOW STATUS LIKE '%acl_cache%';
SET ROLE db_admin;
SET ROLE db_admin;
SHOW STATUS LIKE '%acl_cache%';
FLUSH PRIVILEGES;
FLUSH PRIVILEGES;
SELECT * FROM mysql.role_edges;
SELECT * FROM mysql.default_roles;
DROP DATABASE db1;
DROP PROCEDURE test.sp1;
SELECT user,host FROM mysql.user WHERE user NOT IN ('root', 'mysql.sys', 'mysql.session', 'mysql.infoschema');
DROP ROLE maintenance_admin;
DROP ROLE user_admin;
DROP ROLE security_admin;
DROP ROLE schema_admin;
DROP ROLE schema_designer;
DROP ROLE db_admin;
DROP ROLE replication_admin;
DROP ROLE backup_admin;
DROP ROLE process_admin;
DROP ROLE monitor_admin;
DROP USER `joe_schema_designer`@`localhost`;
SHOW STATUS LIKE '%acl_cache%';
SELECT count_alloc - count_free FROM performance_schema.memory_summary_global_by_event_name WHERE event_name LIKE '%acl_map_cache';
CREATE ROLE r1;
CREATE USER `u1`@`%` IDENTIFIED BY 'foo';
SHOW GRANTS FOR u1@`%`;
GRANT SELECT ON *.* TO r1;
GRANT r1 TO u1@`%`;
SHOW GRANTS FOR u1@`%` USING r1;
SET ROLE r1;
DROP USER `u1`@`%`;
DROP ROLE r1;
CREATE USER hoho@localhost IDENTIFIED BY 'foo';
CREATE DATABASE haha;
CREATE ROLE rr;
GRANT rr TO hoho@localhost;
USE haha;
SET  ROLE rr;
USE haha;
GRANT ALL ON haha.* TO hoho@localhost;
USE haha;
DROP USER hoho@localhost;
DROP ROLE rr;
DROP DATABASE haha;
CREATE USER u1@localhost IDENTIFIED BY 'foo';
CREATE ROLE r1;
CREATE ROLE r2;
CREATE ROLE r3;
CREATE ROLE r4;
CREATE ROLE r5;
CREATE ROLE r6;
CREATE ROLE r7;
CREATE ROLE r8;
CREATE ROLE r9;
CREATE ROLE r10;
GRANT r1,r2,r3,r4,r5,r6,r7,r8,r9,r10 TO u1@localhost;
GRANT SELECT ON *.* TO r1;
SELECT * FROM mysql.default_roles;
ALTER USER u1@localhost DEFAULT ROLE ALL;
SELECT * FROM mysql.default_roles ORDER BY default_role_user;
ALTER USER u1@localhost DEFAULT ROLE NONE;
SELECT * FROM mysql.default_roles ORDER BY default_role_user;
ALTER USER u1@localhost DEFAULT ROLE ALL;
SELECT CURRENT_ROLE();
SET DEFAULT ROLE NONE TO 'u1'@'localhost';
SELECT * FROM mysql.default_roles ORDER BY default_role_user;
SET DEFAULT ROLE ALL TO u1@localhost;
SELECT * FROM mysql.default_roles ORDER BY default_role_user;
DROP USER u1@localhost;
DROP ROLE r1;
DROP ROLE r2;
DROP ROLE r3;
DROP ROLE r4;
DROP ROLE r5;
DROP ROLE r6;
DROP ROLE r7;
DROP ROLE r8;
DROP ROLE r9;
DROP ROLE r10;
SHOW PRIVILEGES;
CREATE USER u1@localhost IDENTIFIED BY 'foo';
CREATE ROLE r1;
GRANT r1 TO u1@localhost;
GRANT USAGE ON *.* TO u1@localhost;
GRANT CREATE ROLE, DROP ROLE ON *.* TO r1;
GRANT SELECT ON test.* TO r1;
ALTER USER u1@localhost DEFAULT ROLE r1;
CREATE ROLE r2;
DROP ROLE r2;
SET ROLE NONE;
CREATE ROLE r2;
DROP ROLE r1;
DROP USER u1@localhost;
CREATE USER u1@localhost IDENTIFIED BY 'foo';
GRANT SELECT ON test.* TO u1@localhost;
CREATE USER r1;
ALTER USER u1@localhost DEFAULT ROLE r1;
GRANT r1 TO u1@localhost;
ALTER USER u1@localhost DEFAULT ROLE r1;
GRANT UPDATE ON *.* TO r1;
SELECT * FROM mysql.default_roles;
SHOW GRANTS FOR u1@localhost;
SELECT CURRENT_ROLE();
SELECT CHARSET(CURRENT_ROLE());
SET ROLE DEFAULT;
SELECT CURRENT_ROLE();
SET ROLE DEFAULT;
SELECT CURRENT_ROLE();
REVOKE r1 FROM u1@localhost;
SELECT CURRENT_ROLE();
SHOW GRANTS;
DROP USER u1@localhost, r1;
CREATE DATABASE other;
USE other;
CREATE TABLE t1(a int);
INSERT INTO t1 VALUES (7);
CREATE USER u1@localhost IDENTIFIED BY 'foo';
CREATE USER r1;
GRANT SELECT ON other.t1 TO r1;
GRANT r1 TO u1@localhost;
ALTER USER u1@localhost DEFAULT ROLE r1;
GRANT SELECT ON test.* TO u1@localhost;
USE other;
SELECT * FROM other.t1;
GRANT SELECT ON other.t1 TO u1@localhost;
use other;
SET ROLE `no such role`;
SET DEFAULT ROLE `rrrrr` TO u1@localhost;
SET DEFAULT ROLE `rrrrr` TO u1@localhost;
SET ROLE DEFAULT;
ALTER USER u1@localhost DEFAULT ROLE `asdasd`;
ALTER USER u1@localhost DEFAULT ROLE `asdasd`;
SET ROLE DEFAULT;
SET ROLE ALL;
SET ROLE NONE;
DROP DATABASE other;
DROP USER u1@localhost;
DROP USER r1;
CREATE USER u1@localhost IDENTIFIED BY 'foo';
CREATE ROLE r1;
REVOKE r1 from u1@localhost;
DROP ROLE r1;
DROP USER u1@localhost;
CREATE USER u1@localhost IDENTIFIED BY 'foo';
CREATE USER r1, r11;
GRANT r1 TO r11;
GRANT r11 TO u1@localhost;
SET ROLE r1;
SET ROLE r11;
DROP USER u1@localhost, r1, r11;
CREATE USER u1@localhost IDENTIFIED BY 'foo';
CREATE ROLE r1@vilhelmina;
GRANT R1@Vilhelmina TO u1@localhost;
GRANT r1@Vilhelmina TO u1@localhost;
SET ROLE r1@Vilhelmina;
SET ROLE R1@vilhelmina;
SET ROLE R1@Vilhelmina;
DROP USER u1@localhost, r1@vilhelmina;
CREATE ROLE `u1234567890123456789012345678901`;
CREATE USER 'u1'@'localhost';
GRANT u1234567890123456789012345678901 TO u1@localhost;
GRANT SELECT, UPDATE ON *.* TO u1234567890123456789012345678901;
SHOW GRANTS FOR u1@localhost USING u1234567890123456789012345678901;
REVOKE u1234567890123456789012345678901 FROM u1@localhost;
DROP ROLE u1234567890123456789012345678901;
DROP USER u1@localhost;
CREATE ROLE `u12345678901234567890123456789012`;
CREATE ROLE `PUBLIC`,`EVENT_SCHEDULER`,`127.0.0.1`,`a b`;
DROP ROLE `PUBLIC`,`EVENT_SCHEDULER`,`127.0.0.1`,`a b`;
CREATE ROLE PUBLIC;
DROP ROLE PUBLIC;
CREATE USER u1@localhost IDENTIFIED BY 'foo';
CREATE ROLE r1;
GRANT r1 TO u1@localhost;
CREATE ROLE r2;
SHOW GRANTS;
ALTER USER u1@localhost DEFAULT ROLE r2;
ALTER USER u1@localhost DEFAULT ROLE r1;
DROP USER u1@localhost;
DROP ROLE r1,r2;
CREATE USER u1@localhost IDENTIFIED BY 'foo';
CREATE ROLE r1;
GRANT r1 TO u1@localhost;
CREATE ROLE r2;
GRANT r2 TO r1;
SELECT ExtractValue(ROLES_GRAPHML(),'//node[text()="`mysql.sys`@`localhost`"]');
SELECT ExtractValue(ROLES_GRAPHML(),'//node[text()="`mysql.session`@`localhost`"]');
SELECT ExtractValue(ROLES_GRAPHML(),'count(//node)') as num_nodes;
SELECT ExtractValue(ROLES_GRAPHML(),'count(//edge)') as num_edges;
SELECT ExtractValue(ROLES_GRAPHML(),'//node[text()="`mysql.sys`@`localhost`"]');
SELECT ExtractValue(ROLES_GRAPHML(),'//node[text()="`mysql.session`@`localhost`"]');
SELECT ExtractValue(ROLES_GRAPHML(),'count(//node)') as num_nodes;
SELECT ExtractValue(ROLES_GRAPHML(),'count(//edge)') as num_edges;
DROP USER u1@localhost;
DROP ROLE r1,r2;
CREATE USER u1@localhost IDENTIFIED BY 'foo';
CREATE ROLE r1,r2;
GRANT r2 TO u1@localhost;
GRANT ALL ON test.* TO r2;
ALTER USER u1@localhost DEFAULT ROLE r1,r2;
SELECT * FROM mysql.default_roles;
SELECT current_role();
SET ROLE DEFAULT;
DROP ROLE r1,r2;
DROP USER u1@localhost;
DROP TABLE IF EXISTS test.t5;
CREATE ROLE r1, r2;
GRANT CREATE ON test.* to r1 WITH GRANT OPTION;
GRANT r1 TO r2;
ALTER USER r2 DEFAULT ROLE r1;
ALTER USER r2 ACCOUNT UNLOCK;
SELECT CURRENT_ROLE();
SET PASSWORD='test';
SELECT CURRENT_ROLE();
CREATE TABLE test.t5(a int);
GRANT CREATE ON test.* to r2;
DROP ROLE r1, r2;
DROP TABLE test.t5;
DROP USER IF EXISTS baseuser, admin1, admin2, r1, r2;
CREATE USER baseuser IDENTIFIED WITH mysql_native_password, admin1 IDENTIFIED WITH mysql_native_password, admin2 IDENTIFIED WITH mysql_native_password;
GRANT PROXY ON baseuser TO admin1;
GRANT PROXY ON baseuser TO admin2;
SET @@global.check_proxy_users = ON;
SET @@global.mysql_native_password_proxy_users = ON;
CREATE ROLE r1, r2;
GRANT SELECT ON mysql.db to r1;
GRANT SELECT ON mysql.user to r2;
GRANT SELECT ON test.* to r2;
GRANT r1, r2 TO baseuser;
ALTER USER baseuser default role r2;
SELECT USER(), CURRENT_USER(), CURRENT_ROLE();
SET ROLE ALL;
SELECT CURRENT_USER();
SELECT USER(), CURRENT_USER(), CURRENT_ROLE();
SET ROLE ALL;
SELECT CURRENT_USER();
SELECT USER(), CURRENT_USER(), CURRENT_ROLE();
SET ROLE ALL;
SELECT CURRENT_USER();
DROP USER baseuser, admin1, admin2, r1, r2;
SET @@global.check_proxy_users = OFF;
SET @@global.mysql_native_password_proxy_users = OFF;
CREATE ROLE a,a@localhost,`b`,`b`@local,`c c`,`aaa`, `a`@`a`;
CREATE USER u1 IDENTIFIED BY 'foo' DEFAULT ROLE a,a@localhost,`b`,`b`@local,`c c`,`aaa`, `a`@`a`;
SHOW CREATE USER u1;
CREATE USER u1;
SHOW CREATE USER u1;
CREATE ROLE r1;
CREATE USER u2 DEFAULT ROLE r1 REQUIRE SSL ACCOUNT LOCK;
SHOW CREATE USER u2;
SELECT user,host FROM mysql.user;
SELECT * FROM mysql.default_roles;
DROP USER u1,u2;
DROP ROLE a,a@localhost,`b`,`b`@local,`c c`,`aaa`, `a`@`a`;
CREATE USER u1;
GRANT r1 TO u1;
ALTER USER u1 DEFAULT ROLE r1;
SHOW CREATE USER u1;
SELECT * FROM mysql.default_roles;
DROP USER u1;
DROP ROLE r1;
SELECT * FROM mysql.default_roles;
CREATE USER u1@localhost IDENTIFIED BY 'foo';
CREATE ROLE r1;
SET DEFAULT ROLE 'r1' TO u1@localhost;
ALTER USER u1@localhost DEFAULT ROLE 'r1';
GRANT r1 TO u1@localhost;
SET DEFAULT ROLE 'r1' TO u1@localhost;
ALTER USER u1@localhost DEFAULT ROLE 'r1';
DROP USER u1@localhost;
CREATE ROLE r2;
CREATE USER u1@localhost IDENTIFIED BY 'foo' DEFAULT ROLE 'rr1';
CREATE USER u1@localhost IDENTIFIED BY 'foo' DEFAULT ROLE 'r2';
GRANT r1 TO u1@localhost;
SELECT * FROM mysql.role_edges;
SELECT * FROM mysql.default_roles;
DROP ROLE r1,r2;
DROP USER u1@localhost;
CREATE USER foo@localhost IDENTIFIED BY 'foo';
CREATE ROLE r1;
GRANT r1 to foo@localhost;
SET DEFAULT ROLE ALL TO foo@localhost;
SELECT count(*) as 'ONE' FROM mysql.default_roles;
DROP ROLE r1;
SELECT count(*) as 'ZERO' FROM mysql.default_roles;
CREATE ROLE r1;
GRANT r1 TO foo@localhost;
SET DEFAULT ROLE ALL TO foo@localhost;
SELECT count(*) as 'ONE' FROM mysql.default_roles;
DROP USER foo@localhost;
SELECT count(*) as 'ZERO' FROM mysql.default_roles;
CREATE USER foo@localhost IDENTIFIED BY 'foo' DEFAULT ROLE r1;
SELECT count(*) as 'ONE' FROM mysql.default_roles;
REVOKE r1 FROM foo@localhost;
SELECT count(*) as 'ZERO' FROM mysql.default_roles;
GRANT CREATE USER ON *.* TO r1;
GRANT SELECT ON test.* TO r1;
GRANT r1 TO foo@localhost;
SET DEFAULT ROLE r1 TO foo@localhost;
SELECT CURRENT_USER(),CURRENT_ROLE();
CREATE USER 'ok' IDENTIFIED BY 'ok';
CREATE USER 'fail' IDENTIFIED BY 'fail' DEFAULT ROLE 'r1';
DROP USER foo@localhost,ok;
DROP ROLE r1;
CREATE USER foo@localhost;
CREATE ROLE r1;
GRANT r1 TO foo@localhost;
SET DEFAULT ROLE ALL TO foo@localhost;
SELECT count(*) as 'ONE' FROM mysql.default_roles;
SELECT * FROM mysql.role_edges;
DROP USER r1;
SELECT count(*) as 'ZERO' FROM mysql.default_roles;
SELECT * FROM mysql.role_edges;
DROP USER foo@localhost;
