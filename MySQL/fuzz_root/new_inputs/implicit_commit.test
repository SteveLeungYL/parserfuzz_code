source include/have_profiling.inc;
SET GLOBAL EVENT_SCHEDULER = OFF;
LET $OLD_DB= `SELECT DATABASE()`;
CREATE DATABASE db1;
USE db1;
CREATE TABLE t1 (a INT, KEY a(a)) ENGINE=INNODB;
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
CREATE TABLE t3 (a INT) ENGINE=InnoDB;
INSERT INTO t3 SELECT * FROM t1;
CREATE TABLE trans (a INT) ENGINE=INNODB;
DELIMITER |;
CREATE PROCEDURE test_if_commit()BEGIN  ROLLBACK;
  SELECT IF (COUNT(*) > 0, "YES", "NO") AS "IMPLICIT COMMIT" FROM trans;
  DELETE FROM trans;
  COMMIT;
END|DELIMITER ;|SET AUTOCOMMIT = FALSE;
  select 1 as res from t1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  create table t2 like t1;
source include/implicit_commit_helper.inc;
  show create table t2;
source include/implicit_commit_helper.inc;
  drop table t2;
source include/implicit_commit_helper.inc;
  create temporary table t2 as select * from t1;
source include/implicit_commit_helper.inc;
  drop temporary table t2;
source include/implicit_commit_helper.inc;
  create table t2 as select * from t1;
source include/implicit_commit_helper.inc;
  update t2 set a=a+1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  insert into t2 set a=((1) in (select * from t1));
source include/implicit_commit_helper.inc;
  insert into t2 select * from t1;
source include/implicit_commit_helper.inc;
  replace t2 set a=((1) in (select * from t1));
source include/implicit_commit_helper.inc;
  replace t2 select * from t1;
source include/implicit_commit_helper.inc;
  delete from t2 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  delete t2, t3 from t2, t3 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
select * from t2;
  update t2, t3 set t3.a=t2.a, t2.a=null where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
create table t4 (a varchar(100));
  load data infile '../../std_data/words.dat' into table t4;
source include/implicit_commit_helper.inc;
drop table t4;
  show databases where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show tables where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show fields from t1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show keys from t1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show variables where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show engine all mutex;
source include/implicit_commit_helper.inc;
  show processlist;
source include/implicit_commit_helper.inc;
  show engine all logs;
source include/implicit_commit_helper.inc;
  show engine all status;
source include/implicit_commit_helper.inc;
  show charset where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show collation where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show table status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show triggers where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show open tables where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show procedure status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show function status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  set @a=((1) in (select * from t1));
source include/implicit_commit_helper.inc;
  do ((1) in (select * from t1));
source include/implicit_commit_helper.inc;
create procedure p1(a int) begin end;
  call p1((1) in (select * from t1));
source include/implicit_commit_helper.inc;
drop procedure p1;
  create view v1 as select * from t1;
source include/implicit_commit_helper.inc;
  alter view v1 as select 2;
source include/implicit_commit_helper.inc;
  drop view v1;
source include/implicit_commit_helper.inc;
  create index idx1 on t1(a);
source include/implicit_commit_helper.inc;
  drop index idx1 on t1;
source include/implicit_commit_helper.inc;
  alter table t1 add column b int;
source include/implicit_commit_helper.inc;
  alter table t1 change b c int;
source include/implicit_commit_helper.inc;
  alter table t1 drop column c;
source include/implicit_commit_helper.inc;
create temporary table t4 (a int);
  alter table t1 add column b int;
source include/implicit_commit_helper.inc;
  alter table t1 change b c int;
source include/implicit_commit_helper.inc;
  alter table t1 drop column c;
source include/implicit_commit_helper.inc;
drop table t4;
insert into t2 select * from t1;
  truncate table t2;
source include/implicit_commit_helper.inc;
insert into t2 select * from t1;
create temporary table t4 as select * from t1;
  truncate table t4;
source include/implicit_commit_helper.inc;
drop temporary table t4;
  show master status;
source include/implicit_commit_helper.inc;
  show slave status;
source include/implicit_commit_helper.inc;
create user mysqltest_2@localhost;
  grant all on test.t1 to mysqltest_2@localhost with grant option;
source include/implicit_commit_helper.inc;
  revoke select on test.t1 from mysqltest_2@localhost;
source include/implicit_commit_helper.inc;
  revoke all on test.t1 from mysqltest_2@localhost;
source include/implicit_commit_helper.inc;
drop user mysqltest_2@localhost;
  show grants;
source include/implicit_commit_helper.inc;
  show grants for current_user();
source include/implicit_commit_helper.inc;
  lock tables t1 write, trans write;
source include/implicit_commit_helper.inc;
  unlock tables;
source include/implicit_commit_helper.inc;
  create database db2;
source include/implicit_commit_helper.inc;
create table db2.t1 (a int);
insert into db2.t1 values (1);
commit;
  use db2;
source include/implicit_commit_helper.inc;
  show create database db2;
source include/implicit_commit_helper.inc;
use db1;
  drop database db2;
source include/implicit_commit_helper.inc;
  repair table t2;
source include/implicit_commit_helper.inc;
  repair table t2 use_frm;
source include/implicit_commit_helper.inc;
  optimize table t1;
source include/implicit_commit_helper.inc;
  check table t1;
source include/implicit_commit_helper.inc;
  check table t1 extended;
source include/implicit_commit_helper.inc;
set global keycache.key_buffer_size=128*1024;
  cache index t3 in keycache;
source include/implicit_commit_helper.inc;
set global keycache.key_buffer_size=0;
  load index into cache t3;
source include/implicit_commit_helper.inc;
  flush local privileges;
source include/implicit_commit_helper.inc;
  flush privileges;
source include/implicit_commit_helper.inc;
  analyze table t1;
source include/implicit_commit_helper.inc;
  rollback;
source include/implicit_commit_helper.inc;
  commit;
source include/implicit_commit_helper.inc;
  savepoint sp1;
source include/implicit_commit_helper.inc;
  begin;
source include/implicit_commit_helper.inc;
  rename table t3 to t4;
source include/implicit_commit_helper.inc;
  rename table t4 to t3;
source include/implicit_commit_helper.inc;
  handler t1 open as ha1;
source include/implicit_commit_helper.inc;
  handler ha1 read a first;
source include/implicit_commit_helper.inc;
  handler ha1 close;
source include/implicit_commit_helper.inc;
  show slave hosts;
source include/implicit_commit_helper.inc;
  show binlog events;
source include/implicit_commit_helper.inc;
  show warnings;
source include/implicit_commit_helper.inc;
  show errors;
source include/implicit_commit_helper.inc;
  show engines;
source include/implicit_commit_helper.inc;
  show privileges;
source include/implicit_commit_helper.inc;
  help 'foo';
source include/implicit_commit_helper.inc;
  create user trxusr1;
source include/implicit_commit_helper.inc;
  rename user 'trxusr1' to 'trxusr2';
source include/implicit_commit_helper.inc;
  drop user trxusr2;
source include/implicit_commit_helper.inc;
  checksum table t1;
source include/implicit_commit_helper.inc;
  create procedure p1(a int) begin end;
source include/implicit_commit_helper.inc;
  alter procedure p1 comment 'foobar';
  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $wait_counter= `SELECT $wait_timeout * 10`;
    while ($wait_counter)    let $success= `$wait_condition`;
    inc $wait_condition_reps;
    if ($success)    {        let $wait_counter= 0;
    }    if (!$success)    {        sleep 0.1;
        dec $wait_counter;
    }  if (!$silent_failure)  {    echo Timeout in wait_condition.inc for $wait_condition;
  }  if ($show_rpl_debug_info)  {      }      SELECT @@global.event_scheduler;
                 SELECT COUNT(*) = 1 FROM information_schema.processlist  WHERE user = 'event_scheduler' AND command = 'Daemon';
source include/implicit_commit_helper.inc;
  show create procedure p1;
source include/implicit_commit_helper.inc;
  show procedure status;
source include/implicit_commit_helper.inc;
  show procedure code p1;
source include/implicit_commit_helper.inc;
  drop procedure p1;
source include/implicit_commit_helper.inc;
  create function f1() returns int return 69;
source include/implicit_commit_helper.inc;
  alter function f1 comment 'comment';
source include/implicit_commit_helper.inc;
  show create function f1;
source include/implicit_commit_helper.inc;
  show function status like '%f%';
source include/implicit_commit_helper.inc;
  show function code f1;
source include/implicit_commit_helper.inc;
  prepare stmt1 from "insert into t1 values (5)";
source include/implicit_commit_helper.inc;
  execute stmt1;
source include/implicit_commit_helper.inc;
  deallocate prepare stmt1;
source include/implicit_commit_helper.inc;
  create trigger trg1 before insert on t1 for each row set @a:=1;
source include/implicit_commit_helper.inc;
  show create trigger trg1;
source include/implicit_commit_helper.inc;
  drop trigger trg1;
source include/implicit_commit_helper.inc;
  CREATE TABLESPACE ts1 ADD DATAFILE './ts1.ibd' ENGINE=INNODB;
source include/implicit_commit_helper.inc;
  DROP TABLESPACE ts1  ENGINE=INNODB;
source include/implicit_commit_helper.inc;
  create event ev1 on schedule every 1 second do insert into t1 values (6);
source include/implicit_commit_helper.inc;
  alter event ev1 rename to ev2 disable;
source include/implicit_commit_helper.inc;
  show create event ev2;
source include/implicit_commit_helper.inc;
  show events;
source include/implicit_commit_helper.inc;
  drop event ev2;
source include/implicit_commit_helper.inc;
  show profile memory;
source include/implicit_commit_helper.inc;
  show profiles;
source include/implicit_commit_helper.inc;
DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;
eval USE $OLD_DB;
DROP DATABASE db1;
SET GLOBAL EVENT_SCHEDULER = ON;
source include/have_profiling.inc;
SET GLOBAL EVENT_SCHEDULER = OFF;
LET $OLD_DB= `SELECT DATABASE()`;
CREATE DATABASE db1;
USE db1;
CREATE TABLE t1 (a INT, KEY a(a)) ENGINE=INNODB;
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
CREATE TABLE t3 (a INT) ENGINE=InnoDB;
INSERT INTO t3 SELECT * FROM t1;
CREATE TABLE trans (a INT) ENGINE=INNODB;
DELIMITER |;
CREATE PROCEDURE test_if_commit()BEGIN  ROLLBACK;
  SELECT IF (COUNT(*) > 0, "YES", "NO") AS "IMPLICIT COMMIT" FROM trans;
  DELETE FROM trans;
  COMMIT;
END|DELIMITER ;|SET AUTOCOMMIT = FALSE;
  select 1 as res from t1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  create table t2 like t1;
source include/implicit_commit_helper.inc;
  show create table t2;
source include/implicit_commit_helper.inc;
  drop table t2;
source include/implicit_commit_helper.inc;
  create temporary table t2 as select * from t1;
source include/implicit_commit_helper.inc;
  drop temporary table t2;
source include/implicit_commit_helper.inc;
  create table t2 as select * from t1;
source include/implicit_commit_helper.inc;
  update t2 set a=a+1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  insert into t2 set a=((1) in (select * from t1));
source include/implicit_commit_helper.inc;
  insert into t2 select * from t1;
source include/implicit_commit_helper.inc;
  replace t2 set a=((1) in (select * from t1));
source include/implicit_commit_helper.inc;
  replace t2 select * from t1;
source include/implicit_commit_helper.inc;
  delete from t2 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  delete t2, t3 from t2, t3 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
select * from t2;
  update t2, t3 set t3.a=t2.a, t2.a=null where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
create table t4 (a varchar(100));
  load data infile '../../std_data/words.dat' into table t4;
source include/implicit_commit_helper.inc;
drop table t4;
  show databases where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show tables where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show fields from t1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show keys from t1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show variables where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show engine all mutex;
source include/implicit_commit_helper.inc;
  show processlist;
source include/implicit_commit_helper.inc;
  show engine all logs;
source include/implicit_commit_helper.inc;
  show engine all status;
source include/implicit_commit_helper.inc;
  show charset where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show collation where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show table status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show triggers where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show open tables where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show procedure status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show function status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  set @a=((1) in (select * from t1));
source include/implicit_commit_helper.inc;
  do ((1) in (select * from t1));
source include/implicit_commit_helper.inc;
create procedure p1(a int) begin end;
  call p1((1) in (select * from t1));
source include/implicit_commit_helper.inc;
drop procedure p1;
  create view v1 as select * from t1;
source include/implicit_commit_helper.inc;
  alter view v1 as select 2;
source include/implicit_commit_helper.inc;
  drop view v1;
source include/implicit_commit_helper.inc;
  create index idx1 on t1(a);
source include/implicit_commit_helper.inc;
  drop index idx1 on t1;
source include/implicit_commit_helper.inc;
  alter table t1 add column b int;
source include/implicit_commit_helper.inc;
  alter table t1 change b c int;
source include/implicit_commit_helper.inc;
  alter table t1 drop column c;
source include/implicit_commit_helper.inc;
create temporary table t4 (a int);
  alter table t1 add column b int;
source include/implicit_commit_helper.inc;
  alter table t1 change b c int;
source include/implicit_commit_helper.inc;
  alter table t1 drop column c;
source include/implicit_commit_helper.inc;
drop table t4;
insert into t2 select * from t1;
  truncate table t2;
source include/implicit_commit_helper.inc;
insert into t2 select * from t1;
create temporary table t4 as select * from t1;
  truncate table t4;
source include/implicit_commit_helper.inc;
drop temporary table t4;
  show master status;
source include/implicit_commit_helper.inc;
  show slave status;
source include/implicit_commit_helper.inc;
create user mysqltest_2@localhost;
  grant all on test.t1 to mysqltest_2@localhost with grant option;
source include/implicit_commit_helper.inc;
  revoke select on test.t1 from mysqltest_2@localhost;
source include/implicit_commit_helper.inc;
  revoke all on test.t1 from mysqltest_2@localhost;
source include/implicit_commit_helper.inc;
drop user mysqltest_2@localhost;
  show grants;
source include/implicit_commit_helper.inc;
  show grants for current_user();
source include/implicit_commit_helper.inc;
  lock tables t1 write, trans write;
source include/implicit_commit_helper.inc;
  unlock tables;
source include/implicit_commit_helper.inc;
  create database db2;
source include/implicit_commit_helper.inc;
create table db2.t1 (a int);
insert into db2.t1 values (1);
commit;
  use db2;
source include/implicit_commit_helper.inc;
  show create database db2;
source include/implicit_commit_helper.inc;
use db1;
  drop database db2;
source include/implicit_commit_helper.inc;
  repair table t2;
source include/implicit_commit_helper.inc;
  repair table t2 use_frm;
source include/implicit_commit_helper.inc;
  optimize table t1;
source include/implicit_commit_helper.inc;
  check table t1;
source include/implicit_commit_helper.inc;
  check table t1 extended;
source include/implicit_commit_helper.inc;
set global keycache.key_buffer_size=128*1024;
  cache index t3 in keycache;
source include/implicit_commit_helper.inc;
set global keycache.key_buffer_size=0;
  load index into cache t3;
source include/implicit_commit_helper.inc;
  flush local privileges;
source include/implicit_commit_helper.inc;
  flush privileges;
source include/implicit_commit_helper.inc;
  analyze table t1;
source include/implicit_commit_helper.inc;
  rollback;
source include/implicit_commit_helper.inc;
  commit;
source include/implicit_commit_helper.inc;
  savepoint sp1;
source include/implicit_commit_helper.inc;
  begin;
source include/implicit_commit_helper.inc;
  rename table t3 to t4;
source include/implicit_commit_helper.inc;
  rename table t4 to t3;
source include/implicit_commit_helper.inc;
  handler t1 open as ha1;
source include/implicit_commit_helper.inc;
  handler ha1 read a first;
source include/implicit_commit_helper.inc;
  handler ha1 close;
source include/implicit_commit_helper.inc;
  show slave hosts;
source include/implicit_commit_helper.inc;
  show binlog events;
source include/implicit_commit_helper.inc;
  show warnings;
source include/implicit_commit_helper.inc;
  show errors;
source include/implicit_commit_helper.inc;
  show engines;
source include/implicit_commit_helper.inc;
  show privileges;
source include/implicit_commit_helper.inc;
  help 'foo';
source include/implicit_commit_helper.inc;
  create user trxusr1;
source include/implicit_commit_helper.inc;
  rename user 'trxusr1' to 'trxusr2';
source include/implicit_commit_helper.inc;
  drop user trxusr2;
source include/implicit_commit_helper.inc;
  checksum table t1;
source include/implicit_commit_helper.inc;
  create procedure p1(a int) begin end;
source include/implicit_commit_helper.inc;
  alter procedure p1 comment 'foobar';
  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $wait_counter= `SELECT $wait_timeout * 10`;
    while ($wait_counter)    let $success= `$wait_condition`;
    inc $wait_condition_reps;
    if ($success)    {        let $wait_counter= 0;
    }    if (!$success)    {        sleep 0.1;
        dec $wait_counter;
    }  if (!$silent_failure)  {    echo Timeout in wait_condition.inc for $wait_condition;
  }  if ($show_rpl_debug_info)  {      }      SELECT @@global.event_scheduler;
                 SELECT COUNT(*) = 1 FROM information_schema.processlist  WHERE user = 'event_scheduler' AND command = 'Daemon';
source include/implicit_commit_helper.inc;
  show create procedure p1;
source include/implicit_commit_helper.inc;
  show procedure status;
source include/implicit_commit_helper.inc;
  show procedure code p1;
source include/implicit_commit_helper.inc;
  drop procedure p1;
source include/implicit_commit_helper.inc;
  create function f1() returns int return 69;
source include/implicit_commit_helper.inc;
  alter function f1 comment 'comment';
source include/implicit_commit_helper.inc;
  show create function f1;
source include/implicit_commit_helper.inc;
  show function status like '%f%';
source include/implicit_commit_helper.inc;
  show function code f1;
source include/implicit_commit_helper.inc;
  prepare stmt1 from "insert into t1 values (5)";
source include/implicit_commit_helper.inc;
  execute stmt1;
source include/implicit_commit_helper.inc;
  deallocate prepare stmt1;
source include/implicit_commit_helper.inc;
  create trigger trg1 before insert on t1 for each row set @a:=1;
source include/implicit_commit_helper.inc;
  show create trigger trg1;
source include/implicit_commit_helper.inc;
  drop trigger trg1;
source include/implicit_commit_helper.inc;
  CREATE TABLESPACE ts1 ADD DATAFILE './ts1.ibd' ENGINE=INNODB;
source include/implicit_commit_helper.inc;
  DROP TABLESPACE ts1  ENGINE=INNODB;
source include/implicit_commit_helper.inc;
  create event ev1 on schedule every 1 second do insert into t1 values (6);
source include/implicit_commit_helper.inc;
  alter event ev1 rename to ev2 disable;
source include/implicit_commit_helper.inc;
  show create event ev2;
source include/implicit_commit_helper.inc;
  show events;
source include/implicit_commit_helper.inc;
  drop event ev2;
source include/implicit_commit_helper.inc;
  show profile memory;
source include/implicit_commit_helper.inc;
  show profiles;
source include/implicit_commit_helper.inc;
DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;
eval USE $OLD_DB;
DROP DATABASE db1;
SET GLOBAL EVENT_SCHEDULER = ON;
source include/have_profiling.inc;
SET GLOBAL EVENT_SCHEDULER = OFF;
LET $OLD_DB= `SELECT DATABASE()`;
CREATE DATABASE db1;
USE db1;
CREATE TABLE t1 (a INT, KEY a(a)) ENGINE=INNODB;
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
CREATE TABLE t3 (a INT) ENGINE=InnoDB;
INSERT INTO t3 SELECT * FROM t1;
CREATE TABLE trans (a INT) ENGINE=INNODB;
DELIMITER |;
CREATE PROCEDURE test_if_commit()BEGIN  ROLLBACK;
  SELECT IF (COUNT(*) > 0, "YES", "NO") AS "IMPLICIT COMMIT" FROM trans;
  DELETE FROM trans;
  COMMIT;
END|DELIMITER ;|SET AUTOCOMMIT = FALSE;
  select 1 as res from t1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  create table t2 like t1;
source include/implicit_commit_helper.inc;
  show create table t2;
source include/implicit_commit_helper.inc;
  drop table t2;
source include/implicit_commit_helper.inc;
  create temporary table t2 as select * from t1;
source include/implicit_commit_helper.inc;
  drop temporary table t2;
source include/implicit_commit_helper.inc;
  create table t2 as select * from t1;
source include/implicit_commit_helper.inc;
  update t2 set a=a+1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  insert into t2 set a=((1) in (select * from t1));
source include/implicit_commit_helper.inc;
  insert into t2 select * from t1;
source include/implicit_commit_helper.inc;
  replace t2 set a=((1) in (select * from t1));
source include/implicit_commit_helper.inc;
  replace t2 select * from t1;
source include/implicit_commit_helper.inc;
  delete from t2 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  delete t2, t3 from t2, t3 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
select * from t2;
  update t2, t3 set t3.a=t2.a, t2.a=null where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
create table t4 (a varchar(100));
  load data infile '../../std_data/words.dat' into table t4;
source include/implicit_commit_helper.inc;
drop table t4;
  show databases where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show tables where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show fields from t1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show keys from t1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show variables where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show engine all mutex;
source include/implicit_commit_helper.inc;
  show processlist;
source include/implicit_commit_helper.inc;
  show engine all logs;
source include/implicit_commit_helper.inc;
  show engine all status;
source include/implicit_commit_helper.inc;
  show charset where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show collation where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show table status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show triggers where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show open tables where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show procedure status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show function status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  set @a=((1) in (select * from t1));
source include/implicit_commit_helper.inc;
  do ((1) in (select * from t1));
source include/implicit_commit_helper.inc;
create procedure p1(a int) begin end;
  call p1((1) in (select * from t1));
source include/implicit_commit_helper.inc;
drop procedure p1;
  create view v1 as select * from t1;
source include/implicit_commit_helper.inc;
  alter view v1 as select 2;
source include/implicit_commit_helper.inc;
  drop view v1;
source include/implicit_commit_helper.inc;
  create index idx1 on t1(a);
source include/implicit_commit_helper.inc;
  drop index idx1 on t1;
source include/implicit_commit_helper.inc;
  alter table t1 add column b int;
source include/implicit_commit_helper.inc;
  alter table t1 change b c int;
source include/implicit_commit_helper.inc;
  alter table t1 drop column c;
source include/implicit_commit_helper.inc;
create temporary table t4 (a int);
  alter table t1 add column b int;
source include/implicit_commit_helper.inc;
  alter table t1 change b c int;
source include/implicit_commit_helper.inc;
  alter table t1 drop column c;
source include/implicit_commit_helper.inc;
drop table t4;
insert into t2 select * from t1;
  truncate table t2;
source include/implicit_commit_helper.inc;
insert into t2 select * from t1;
create temporary table t4 as select * from t1;
  truncate table t4;
source include/implicit_commit_helper.inc;
drop temporary table t4;
  show master status;
source include/implicit_commit_helper.inc;
  show slave status;
source include/implicit_commit_helper.inc;
create user mysqltest_2@localhost;
  grant all on test.t1 to mysqltest_2@localhost with grant option;
source include/implicit_commit_helper.inc;
  revoke select on test.t1 from mysqltest_2@localhost;
source include/implicit_commit_helper.inc;
  revoke all on test.t1 from mysqltest_2@localhost;
source include/implicit_commit_helper.inc;
drop user mysqltest_2@localhost;
  show grants;
source include/implicit_commit_helper.inc;
  show grants for current_user();
source include/implicit_commit_helper.inc;
  lock tables t1 write, trans write;
source include/implicit_commit_helper.inc;
  unlock tables;
source include/implicit_commit_helper.inc;
  create database db2;
source include/implicit_commit_helper.inc;
create table db2.t1 (a int);
insert into db2.t1 values (1);
commit;
  use db2;
source include/implicit_commit_helper.inc;
  show create database db2;
source include/implicit_commit_helper.inc;
use db1;
  drop database db2;
source include/implicit_commit_helper.inc;
  repair table t2;
source include/implicit_commit_helper.inc;
  repair table t2 use_frm;
source include/implicit_commit_helper.inc;
  optimize table t1;
source include/implicit_commit_helper.inc;
  check table t1;
source include/implicit_commit_helper.inc;
  check table t1 extended;
source include/implicit_commit_helper.inc;
set global keycache.key_buffer_size=128*1024;
  cache index t3 in keycache;
source include/implicit_commit_helper.inc;
set global keycache.key_buffer_size=0;
  load index into cache t3;
source include/implicit_commit_helper.inc;
  flush local privileges;
source include/implicit_commit_helper.inc;
  flush privileges;
source include/implicit_commit_helper.inc;
  analyze table t1;
source include/implicit_commit_helper.inc;
  rollback;
source include/implicit_commit_helper.inc;
  commit;
source include/implicit_commit_helper.inc;
  savepoint sp1;
source include/implicit_commit_helper.inc;
  begin;
source include/implicit_commit_helper.inc;
  rename table t3 to t4;
source include/implicit_commit_helper.inc;
  rename table t4 to t3;
source include/implicit_commit_helper.inc;
  handler t1 open as ha1;
source include/implicit_commit_helper.inc;
  handler ha1 read a first;
source include/implicit_commit_helper.inc;
  handler ha1 close;
source include/implicit_commit_helper.inc;
  show slave hosts;
source include/implicit_commit_helper.inc;
  show binlog events;
source include/implicit_commit_helper.inc;
  show warnings;
source include/implicit_commit_helper.inc;
  show errors;
source include/implicit_commit_helper.inc;
  show engines;
source include/implicit_commit_helper.inc;
  show privileges;
source include/implicit_commit_helper.inc;
  help 'foo';
source include/implicit_commit_helper.inc;
  create user trxusr1;
source include/implicit_commit_helper.inc;
  rename user 'trxusr1' to 'trxusr2';
source include/implicit_commit_helper.inc;
  drop user trxusr2;
source include/implicit_commit_helper.inc;
  checksum table t1;
source include/implicit_commit_helper.inc;
  create procedure p1(a int) begin end;
source include/implicit_commit_helper.inc;
  alter procedure p1 comment 'foobar';
  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $wait_counter= `SELECT $wait_timeout * 10`;
    while ($wait_counter)    let $success= `$wait_condition`;
    inc $wait_condition_reps;
    if ($success)    {        let $wait_counter= 0;
    }    if (!$success)    {        sleep 0.1;
        dec $wait_counter;
    }  if (!$silent_failure)  {    echo Timeout in wait_condition.inc for $wait_condition;
  }  if ($show_rpl_debug_info)  {      }      SELECT @@global.event_scheduler;
                 SELECT COUNT(*) = 1 FROM information_schema.processlist  WHERE user = 'event_scheduler' AND command = 'Daemon';
source include/implicit_commit_helper.inc;
  show create procedure p1;
source include/implicit_commit_helper.inc;
  show procedure status;
source include/implicit_commit_helper.inc;
  show procedure code p1;
source include/implicit_commit_helper.inc;
  drop procedure p1;
source include/implicit_commit_helper.inc;
  create function f1() returns int return 69;
source include/implicit_commit_helper.inc;
  alter function f1 comment 'comment';
source include/implicit_commit_helper.inc;
  show create function f1;
source include/implicit_commit_helper.inc;
  show function status like '%f%';
source include/implicit_commit_helper.inc;
  show function code f1;
source include/implicit_commit_helper.inc;
  prepare stmt1 from "insert into t1 values (5)";
source include/implicit_commit_helper.inc;
  execute stmt1;
source include/implicit_commit_helper.inc;
  deallocate prepare stmt1;
source include/implicit_commit_helper.inc;
  create trigger trg1 before insert on t1 for each row set @a:=1;
source include/implicit_commit_helper.inc;
  show create trigger trg1;
source include/implicit_commit_helper.inc;
  drop trigger trg1;
source include/implicit_commit_helper.inc;
  CREATE TABLESPACE ts1 ADD DATAFILE './ts1.ibd' ENGINE=INNODB;
source include/implicit_commit_helper.inc;
  DROP TABLESPACE ts1  ENGINE=INNODB;
source include/implicit_commit_helper.inc;
  create event ev1 on schedule every 1 second do insert into t1 values (6);
source include/implicit_commit_helper.inc;
  alter event ev1 rename to ev2 disable;
source include/implicit_commit_helper.inc;
  show create event ev2;
source include/implicit_commit_helper.inc;
  show events;
source include/implicit_commit_helper.inc;
  drop event ev2;
source include/implicit_commit_helper.inc;
  show profile memory;
source include/implicit_commit_helper.inc;
  show profiles;
source include/implicit_commit_helper.inc;
DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;
eval USE $OLD_DB;
DROP DATABASE db1;
SET GLOBAL EVENT_SCHEDULER = ON;
source include/have_profiling.inc;
SET GLOBAL EVENT_SCHEDULER = OFF;
LET $OLD_DB= `SELECT DATABASE()`;
CREATE DATABASE db1;
USE db1;
CREATE TABLE t1 (a INT, KEY a(a)) ENGINE=INNODB;
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
CREATE TABLE t3 (a INT) ENGINE=InnoDB;
INSERT INTO t3 SELECT * FROM t1;
CREATE TABLE trans (a INT) ENGINE=INNODB;
DELIMITER |;
CREATE PROCEDURE test_if_commit()BEGIN  ROLLBACK;
  SELECT IF (COUNT(*) > 0, "YES", "NO") AS "IMPLICIT COMMIT" FROM trans;
  DELETE FROM trans;
  COMMIT;
END|DELIMITER ;|SET AUTOCOMMIT = FALSE;
  select 1 as res from t1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  create table t2 like t1;
source include/implicit_commit_helper.inc;
  show create table t2;
source include/implicit_commit_helper.inc;
  drop table t2;
source include/implicit_commit_helper.inc;
  create temporary table t2 as select * from t1;
source include/implicit_commit_helper.inc;
  drop temporary table t2;
source include/implicit_commit_helper.inc;
  create table t2 as select * from t1;
source include/implicit_commit_helper.inc;
  update t2 set a=a+1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  insert into t2 set a=((1) in (select * from t1));
source include/implicit_commit_helper.inc;
  insert into t2 select * from t1;
source include/implicit_commit_helper.inc;
  replace t2 set a=((1) in (select * from t1));
source include/implicit_commit_helper.inc;
  replace t2 select * from t1;
source include/implicit_commit_helper.inc;
  delete from t2 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  delete t2, t3 from t2, t3 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
select * from t2;
  update t2, t3 set t3.a=t2.a, t2.a=null where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
create table t4 (a varchar(100));
  load data infile '../../std_data/words.dat' into table t4;
source include/implicit_commit_helper.inc;
drop table t4;
  show databases where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show tables where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show fields from t1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show keys from t1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show variables where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show engine all mutex;
source include/implicit_commit_helper.inc;
  show processlist;
source include/implicit_commit_helper.inc;
  show engine all logs;
source include/implicit_commit_helper.inc;
  show engine all status;
source include/implicit_commit_helper.inc;
  show charset where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show collation where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show table status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show triggers where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show open tables where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show procedure status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show function status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  set @a=((1) in (select * from t1));
source include/implicit_commit_helper.inc;
  do ((1) in (select * from t1));
source include/implicit_commit_helper.inc;
create procedure p1(a int) begin end;
  call p1((1) in (select * from t1));
source include/implicit_commit_helper.inc;
drop procedure p1;
  create view v1 as select * from t1;
source include/implicit_commit_helper.inc;
  alter view v1 as select 2;
source include/implicit_commit_helper.inc;
  drop view v1;
source include/implicit_commit_helper.inc;
  create index idx1 on t1(a);
source include/implicit_commit_helper.inc;
  drop index idx1 on t1;
source include/implicit_commit_helper.inc;
  alter table t1 add column b int;
source include/implicit_commit_helper.inc;
  alter table t1 change b c int;
source include/implicit_commit_helper.inc;
  alter table t1 drop column c;
source include/implicit_commit_helper.inc;
create temporary table t4 (a int);
  alter table t1 add column b int;
source include/implicit_commit_helper.inc;
  alter table t1 change b c int;
source include/implicit_commit_helper.inc;
  alter table t1 drop column c;
source include/implicit_commit_helper.inc;
drop table t4;
insert into t2 select * from t1;
  truncate table t2;
source include/implicit_commit_helper.inc;
insert into t2 select * from t1;
create temporary table t4 as select * from t1;
  truncate table t4;
source include/implicit_commit_helper.inc;
drop temporary table t4;
  show master status;
source include/implicit_commit_helper.inc;
  show slave status;
source include/implicit_commit_helper.inc;
create user mysqltest_2@localhost;
  grant all on test.t1 to mysqltest_2@localhost with grant option;
source include/implicit_commit_helper.inc;
  revoke select on test.t1 from mysqltest_2@localhost;
source include/implicit_commit_helper.inc;
  revoke all on test.t1 from mysqltest_2@localhost;
source include/implicit_commit_helper.inc;
drop user mysqltest_2@localhost;
  show grants;
source include/implicit_commit_helper.inc;
  show grants for current_user();
source include/implicit_commit_helper.inc;
  lock tables t1 write, trans write;
source include/implicit_commit_helper.inc;
  unlock tables;
source include/implicit_commit_helper.inc;
  create database db2;
source include/implicit_commit_helper.inc;
create table db2.t1 (a int);
insert into db2.t1 values (1);
commit;
  use db2;
source include/implicit_commit_helper.inc;
  show create database db2;
source include/implicit_commit_helper.inc;
use db1;
  drop database db2;
source include/implicit_commit_helper.inc;
  repair table t2;
source include/implicit_commit_helper.inc;
  repair table t2 use_frm;
source include/implicit_commit_helper.inc;
  optimize table t1;
source include/implicit_commit_helper.inc;
  check table t1;
source include/implicit_commit_helper.inc;
  check table t1 extended;
source include/implicit_commit_helper.inc;
set global keycache.key_buffer_size=128*1024;
  cache index t3 in keycache;
source include/implicit_commit_helper.inc;
set global keycache.key_buffer_size=0;
  load index into cache t3;
source include/implicit_commit_helper.inc;
  flush local privileges;
source include/implicit_commit_helper.inc;
  flush privileges;
source include/implicit_commit_helper.inc;
  analyze table t1;
source include/implicit_commit_helper.inc;
  rollback;
source include/implicit_commit_helper.inc;
  commit;
source include/implicit_commit_helper.inc;
  savepoint sp1;
source include/implicit_commit_helper.inc;
  begin;
source include/implicit_commit_helper.inc;
  rename table t3 to t4;
source include/implicit_commit_helper.inc;
  rename table t4 to t3;
source include/implicit_commit_helper.inc;
  handler t1 open as ha1;
source include/implicit_commit_helper.inc;
  handler ha1 read a first;
source include/implicit_commit_helper.inc;
  handler ha1 close;
source include/implicit_commit_helper.inc;
  show slave hosts;
source include/implicit_commit_helper.inc;
  show binlog events;
source include/implicit_commit_helper.inc;
  show warnings;
source include/implicit_commit_helper.inc;
  show errors;
source include/implicit_commit_helper.inc;
  show engines;
source include/implicit_commit_helper.inc;
  show privileges;
source include/implicit_commit_helper.inc;
  help 'foo';
source include/implicit_commit_helper.inc;
  create user trxusr1;
source include/implicit_commit_helper.inc;
  rename user 'trxusr1' to 'trxusr2';
source include/implicit_commit_helper.inc;
  drop user trxusr2;
source include/implicit_commit_helper.inc;
  checksum table t1;
source include/implicit_commit_helper.inc;
  create procedure p1(a int) begin end;
source include/implicit_commit_helper.inc;
  alter procedure p1 comment 'foobar';
  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $wait_counter= `SELECT $wait_timeout * 10`;
    while ($wait_counter)    let $success= `$wait_condition`;
    inc $wait_condition_reps;
    if ($success)    {        let $wait_counter= 0;
    }    if (!$success)    {        sleep 0.1;
        dec $wait_counter;
    }  if (!$silent_failure)  {    echo Timeout in wait_condition.inc for $wait_condition;
  }  if ($show_rpl_debug_info)  {      }      SELECT @@global.event_scheduler;
                 SELECT COUNT(*) = 1 FROM information_schema.processlist  WHERE user = 'event_scheduler' AND command = 'Daemon';
source include/implicit_commit_helper.inc;
  show create procedure p1;
source include/implicit_commit_helper.inc;
  show procedure status;
source include/implicit_commit_helper.inc;
  show procedure code p1;
source include/implicit_commit_helper.inc;
  drop procedure p1;
source include/implicit_commit_helper.inc;
  create function f1() returns int return 69;
source include/implicit_commit_helper.inc;
  alter function f1 comment 'comment';
source include/implicit_commit_helper.inc;
  show create function f1;
source include/implicit_commit_helper.inc;
  show function status like '%f%';
source include/implicit_commit_helper.inc;
  show function code f1;
source include/implicit_commit_helper.inc;
  prepare stmt1 from "insert into t1 values (5)";
source include/implicit_commit_helper.inc;
  execute stmt1;
source include/implicit_commit_helper.inc;
  deallocate prepare stmt1;
source include/implicit_commit_helper.inc;
  create trigger trg1 before insert on t1 for each row set @a:=1;
source include/implicit_commit_helper.inc;
  show create trigger trg1;
source include/implicit_commit_helper.inc;
  drop trigger trg1;
source include/implicit_commit_helper.inc;
  CREATE TABLESPACE ts1 ADD DATAFILE './ts1.ibd' ENGINE=INNODB;
source include/implicit_commit_helper.inc;
  DROP TABLESPACE ts1  ENGINE=INNODB;
source include/implicit_commit_helper.inc;
  create event ev1 on schedule every 1 second do insert into t1 values (6);
source include/implicit_commit_helper.inc;
  alter event ev1 rename to ev2 disable;
source include/implicit_commit_helper.inc;
  show create event ev2;
source include/implicit_commit_helper.inc;
  show events;
source include/implicit_commit_helper.inc;
  drop event ev2;
source include/implicit_commit_helper.inc;
  show profile memory;
source include/implicit_commit_helper.inc;
  show profiles;
source include/implicit_commit_helper.inc;
DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;
eval USE $OLD_DB;
DROP DATABASE db1;
SET GLOBAL EVENT_SCHEDULER = ON;
source include/have_profiling.inc;
SET GLOBAL EVENT_SCHEDULER = OFF;
LET $OLD_DB= `SELECT DATABASE()`;
CREATE DATABASE db1;
USE db1;
CREATE TABLE t1 (a INT, KEY a(a)) ENGINE=INNODB;
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
CREATE TABLE t3 (a INT) ENGINE=InnoDB;
INSERT INTO t3 SELECT * FROM t1;
CREATE TABLE trans (a INT) ENGINE=INNODB;
DELIMITER |;
CREATE PROCEDURE test_if_commit()BEGIN  ROLLBACK;
  SELECT IF (COUNT(*) > 0, "YES", "NO") AS "IMPLICIT COMMIT" FROM trans;
  DELETE FROM trans;
  COMMIT;
END|DELIMITER ;|SET AUTOCOMMIT = FALSE;
  select 1 as res from t1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  create table t2 like t1;
source include/implicit_commit_helper.inc;
  show create table t2;
source include/implicit_commit_helper.inc;
  drop table t2;
source include/implicit_commit_helper.inc;
  create temporary table t2 as select * from t1;
source include/implicit_commit_helper.inc;
  drop temporary table t2;
source include/implicit_commit_helper.inc;
  create table t2 as select * from t1;
source include/implicit_commit_helper.inc;
  update t2 set a=a+1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  insert into t2 set a=((1) in (select * from t1));
source include/implicit_commit_helper.inc;
  insert into t2 select * from t1;
source include/implicit_commit_helper.inc;
  replace t2 set a=((1) in (select * from t1));
source include/implicit_commit_helper.inc;
  replace t2 select * from t1;
source include/implicit_commit_helper.inc;
  delete from t2 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  delete t2, t3 from t2, t3 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
select * from t2;
  update t2, t3 set t3.a=t2.a, t2.a=null where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
create table t4 (a varchar(100));
  load data infile '../../std_data/words.dat' into table t4;
source include/implicit_commit_helper.inc;
drop table t4;
  show databases where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show tables where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show fields from t1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show keys from t1 where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show variables where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show engine all mutex;
source include/implicit_commit_helper.inc;
  show processlist;
source include/implicit_commit_helper.inc;
  show engine all logs;
source include/implicit_commit_helper.inc;
  show engine all status;
source include/implicit_commit_helper.inc;
  show charset where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show collation where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show table status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show triggers where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show open tables where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show procedure status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  show function status where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
  set @a=((1) in (select * from t1));
source include/implicit_commit_helper.inc;
  do ((1) in (select * from t1));
source include/implicit_commit_helper.inc;
create procedure p1(a int) begin end;
  call p1((1) in (select * from t1));
source include/implicit_commit_helper.inc;
drop procedure p1;
  create view v1 as select * from t1;
source include/implicit_commit_helper.inc;
  alter view v1 as select 2;
source include/implicit_commit_helper.inc;
  drop view v1;
source include/implicit_commit_helper.inc;
  create index idx1 on t1(a);
source include/implicit_commit_helper.inc;
  drop index idx1 on t1;
source include/implicit_commit_helper.inc;
  alter table t1 add column b int;
source include/implicit_commit_helper.inc;
  alter table t1 change b c int;
source include/implicit_commit_helper.inc;
  alter table t1 drop column c;
source include/implicit_commit_helper.inc;
create temporary table t4 (a int);
  alter table t1 add column b int;
source include/implicit_commit_helper.inc;
  alter table t1 change b c int;
source include/implicit_commit_helper.inc;
  alter table t1 drop column c;
source include/implicit_commit_helper.inc;
drop table t4;
insert into t2 select * from t1;
  truncate table t2;
source include/implicit_commit_helper.inc;
insert into t2 select * from t1;
create temporary table t4 as select * from t1;
  truncate table t4;
source include/implicit_commit_helper.inc;
drop temporary table t4;
  show master status;
source include/implicit_commit_helper.inc;
  show slave status;
source include/implicit_commit_helper.inc;
create user mysqltest_2@localhost;
  grant all on test.t1 to mysqltest_2@localhost with grant option;
source include/implicit_commit_helper.inc;
  revoke select on test.t1 from mysqltest_2@localhost;
source include/implicit_commit_helper.inc;
  revoke all on test.t1 from mysqltest_2@localhost;
source include/implicit_commit_helper.inc;
drop user mysqltest_2@localhost;
  show grants;
source include/implicit_commit_helper.inc;
  show grants for current_user();
source include/implicit_commit_helper.inc;
  lock tables t1 write, trans write;
source include/implicit_commit_helper.inc;
  unlock tables;
source include/implicit_commit_helper.inc;
  create database db2;
source include/implicit_commit_helper.inc;
create table db2.t1 (a int);
insert into db2.t1 values (1);
commit;
  use db2;
source include/implicit_commit_helper.inc;
  show create database db2;
source include/implicit_commit_helper.inc;
use db1;
  drop database db2;
source include/implicit_commit_helper.inc;
  repair table t2;
source include/implicit_commit_helper.inc;
  repair table t2 use_frm;
source include/implicit_commit_helper.inc;
  optimize table t1;
source include/implicit_commit_helper.inc;
  check table t1;
source include/implicit_commit_helper.inc;
  check table t1 extended;
source include/implicit_commit_helper.inc;
set global keycache.key_buffer_size=128*1024;
  cache index t3 in keycache;
source include/implicit_commit_helper.inc;
set global keycache.key_buffer_size=0;
  load index into cache t3;
source include/implicit_commit_helper.inc;
  flush local privileges;
source include/implicit_commit_helper.inc;
  flush privileges;
source include/implicit_commit_helper.inc;
  analyze table t1;
source include/implicit_commit_helper.inc;
  rollback;
source include/implicit_commit_helper.inc;
  commit;
source include/implicit_commit_helper.inc;
  savepoint sp1;
source include/implicit_commit_helper.inc;
  begin;
source include/implicit_commit_helper.inc;
  rename table t3 to t4;
source include/implicit_commit_helper.inc;
  rename table t4 to t3;
source include/implicit_commit_helper.inc;
  handler t1 open as ha1;
source include/implicit_commit_helper.inc;
  handler ha1 read a first;
source include/implicit_commit_helper.inc;
  handler ha1 close;
source include/implicit_commit_helper.inc;
  show slave hosts;
source include/implicit_commit_helper.inc;
  show binlog events;
source include/implicit_commit_helper.inc;
  show warnings;
source include/implicit_commit_helper.inc;
  show errors;
source include/implicit_commit_helper.inc;
  show engines;
source include/implicit_commit_helper.inc;
  show privileges;
source include/implicit_commit_helper.inc;
  help 'foo';
source include/implicit_commit_helper.inc;
  create user trxusr1;
source include/implicit_commit_helper.inc;
  rename user 'trxusr1' to 'trxusr2';
source include/implicit_commit_helper.inc;
  drop user trxusr2;
source include/implicit_commit_helper.inc;
  checksum table t1;
source include/implicit_commit_helper.inc;
  create procedure p1(a int) begin end;
source include/implicit_commit_helper.inc;
  alter procedure p1 comment 'foobar';
  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $wait_counter= `SELECT $wait_timeout * 10`;
    while ($wait_counter)    let $success= `$wait_condition`;
    inc $wait_condition_reps;
    if ($success)    {        let $wait_counter= 0;
    }    if (!$success)    {        sleep 0.1;
        dec $wait_counter;
    }  if (!$silent_failure)  {    echo Timeout in wait_condition.inc for $wait_condition;
  }  if ($show_rpl_debug_info)  {      }      SELECT @@global.event_scheduler;
                 SELECT COUNT(*) = 1 FROM information_schema.processlist  WHERE user = 'event_scheduler' AND command = 'Daemon';
source include/implicit_commit_helper.inc;
  show create procedure p1;
source include/implicit_commit_helper.inc;
  show procedure status;
source include/implicit_commit_helper.inc;
  show procedure code p1;
source include/implicit_commit_helper.inc;
  drop procedure p1;
source include/implicit_commit_helper.inc;
  create function f1() returns int return 69;
source include/implicit_commit_helper.inc;
  alter function f1 comment 'comment';
source include/implicit_commit_helper.inc;
  show create function f1;
source include/implicit_commit_helper.inc;
  show function status like '%f%';
source include/implicit_commit_helper.inc;
  show function code f1;
source include/implicit_commit_helper.inc;
  prepare stmt1 from "insert into t1 values (5)";
source include/implicit_commit_helper.inc;
  execute stmt1;
source include/implicit_commit_helper.inc;
  deallocate prepare stmt1;
source include/implicit_commit_helper.inc;
  create trigger trg1 before insert on t1 for each row set @a:=1;
source include/implicit_commit_helper.inc;
  show create trigger trg1;
source include/implicit_commit_helper.inc;
  drop trigger trg1;
source include/implicit_commit_helper.inc;
  CREATE TABLESPACE ts1 ADD DATAFILE './ts1.ibd' ENGINE=INNODB;
source include/implicit_commit_helper.inc;
  DROP TABLESPACE ts1  ENGINE=INNODB;
source include/implicit_commit_helper.inc;
  create event ev1 on schedule every 1 second do insert into t1 values (6);
source include/implicit_commit_helper.inc;
  alter event ev1 rename to ev2 disable;
source include/implicit_commit_helper.inc;
  show create event ev2;
source include/implicit_commit_helper.inc;
  show events;
source include/implicit_commit_helper.inc;
  drop event ev2;
source include/implicit_commit_helper.inc;
  show profile memory;
source include/implicit_commit_helper.inc;
  show profiles;
source include/implicit_commit_helper.inc;
DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;
eval USE $OLD_DB;
DROP DATABASE db1;
SET GLOBAL EVENT_SCHEDULER = ON;
