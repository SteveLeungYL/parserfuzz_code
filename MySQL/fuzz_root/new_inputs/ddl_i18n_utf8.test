SHOW CREATE VIEW v1|SHOW CREATE VIEW v2|SHOW CREATE VIEW v3|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v1'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v2'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v3'|SELECT COLLATION(c1), COLLATION(c2) FROM v1|SELECT COLLATION(c1) FROM v2|SELECT * FROM v3|SHOW CREATE VIEW v1|SHOW CREATE VIEW v2|SHOW CREATE VIEW v3|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v1'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v2'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v3'|SELECT COLLATION(c1), COLLATION(c2) FROM v1|SELECT COLLATION(c1) FROM v2|SELECT * FROM v3|SHOW CREATE VIEW v1|SHOW CREATE VIEW v2|SHOW CREATE VIEW v3|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v1'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v2'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v3'|SELECT COLLATION(c1), COLLATION(c2) FROM v1|SELECT COLLATION(c1) FROM v2|SELECT * FROM v3|SHOW CREATE PROCEDURE p1|SHOW CREATE PROCEDURE p2|SHOW CREATE PROCEDURE mysqltest2.p3|SHOW CREATE PROCEDURE mysqltest2.p4|SHOW PROCEDURE STATUS LIKE 'p1'|SHOW PROCEDURE STATUS LIKE 'p2'|SHOW PROCEDURE STATUS LIKE 'p3'|SHOW PROCEDURE STATUS LIKE 'p4'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p1'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p2'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p3'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p4'|SET @a = '1'|SET @b = '2'|CALL p1(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL p2(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p3(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p4(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|SHOW CREATE PROCEDURE p1|SHOW CREATE PROCEDURE p2|SHOW CREATE PROCEDURE mysqltest2.p3|SHOW CREATE PROCEDURE mysqltest2.p4|SHOW PROCEDURE STATUS LIKE 'p1'|SHOW PROCEDURE STATUS LIKE 'p2'|SHOW PROCEDURE STATUS LIKE 'p3'|SHOW PROCEDURE STATUS LIKE 'p4'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p1'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p2'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p3'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p4'|SET @a = '1'|SET @b = '2'|CALL p1(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL p2(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p3(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p4(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|SHOW CREATE PROCEDURE p1|SHOW CREATE PROCEDURE p2|SHOW CREATE PROCEDURE mysqltest2.p3|SHOW CREATE PROCEDURE mysqltest2.p4|SHOW PROCEDURE STATUS LIKE 'p1'|SHOW PROCEDURE STATUS LIKE 'p2'|SHOW PROCEDURE STATUS LIKE 'p3'|SHOW PROCEDURE STATUS LIKE 'p4'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p1'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p2'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p3'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p4'|SET @a = '1'|SET @b = '2'|CALL p1(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL p2(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p3(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p4(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|SHOW CREATE TRIGGER trg1|SHOW CREATE TRIGGER trg2|SHOW CREATE TRIGGER mysqltest2.trg3|SHOW CREATE TRIGGER mysqltest2.trg4|SHOW TRIGGERS|use mysqltest2|SHOW TRIGGERS|use mysqltest1|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg1'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg2'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg3'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg4'|SET @a1 = '1'|SET @a2 = '1'|SET @a3 = '1'|SET @b1 = '2'|SET @b2 = '2'|SET @b3 = '2'|INSERT INTO t1 VALUES(1)|SELECT msg FROM log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM log|INSERT INTO mysqltest2.t1 VALUES(1)|SELECT msg FROM mysqltest2.log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM mysqltest2.log|SHOW CREATE TRIGGER trg1|SHOW CREATE TRIGGER trg2|SHOW CREATE TRIGGER mysqltest2.trg3|SHOW CREATE TRIGGER mysqltest2.trg4|SHOW TRIGGERS|use mysqltest2|SHOW TRIGGERS|use mysqltest1|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg1'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg2'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg3'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg4'|SET @a1 = '1'|SET @a2 = '1'|SET @a3 = '1'|SET @b1 = '2'|SET @b2 = '2'|SET @b3 = '2'|INSERT INTO t1 VALUES(1)|SELECT msg FROM log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM log|INSERT INTO mysqltest2.t1 VALUES(1)|SELECT msg FROM mysqltest2.log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM mysqltest2.log|SHOW CREATE TRIGGER trg1|SHOW CREATE TRIGGER trg2|SHOW CREATE TRIGGER mysqltest2.trg3|SHOW CREATE TRIGGER mysqltest2.trg4|SHOW TRIGGERS|use mysqltest2|SHOW TRIGGERS|use mysqltest1|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg1'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg2'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg3'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg4'|SET @a1 = '1'|SET @a2 = '1'|SET @a3 = '1'|SET @b1 = '2'|SET @b2 = '2'|SET @b3 = '2'|INSERT INTO t1 VALUES(1)|SELECT msg FROM log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM log|INSERT INTO mysqltest2.t1 VALUES(1)|SELECT msg FROM mysqltest2.log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM mysqltest2.log|set names utf8;
delimiter |;
DROP DATABASE IF EXISTS mysqltest1|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE TABLE t1(кол INT)|INSERT INTO t1 VALUES(1)|CREATE VIEW v1 AS  SELECT 'тест' AS c1, кол AS c2  FROM t1|CREATE VIEW v2 AS SELECT _koi8r'' as c1|CREATE VIEW v3 AS SELECT _koi8r''|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SELECT * FROM mysqltest1.v1|SELECT * FROM mysqltest1.v2|SELECT * FROM mysqltest1.v3|use mysqltest1|set names utf8|DROP DATABASE mysqltest1|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SELECT * FROM mysqltest1.v1|SELECT * FROM mysqltest1.v2|SELECT * FROM mysqltest1.v3|use mysqltest1|set names utf8|use test|DROP DATABASE mysqltest1|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE PROCEDURE p1(  INOUT парам1 CHAR(10),  OUT парам2 CHAR(10))BEGIN  DECLARE перем1 CHAR(10);
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|CREATE PROCEDURE p2(  INOUT парам1 CHAR(10) CHARACTER SET utf8,  OUT парам2 CHAR(10) CHARACTER SET utf8)BEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|CREATE PROCEDURE mysqltest2.p3(  INOUT парам1 CHAR(10),  OUT парам2 CHAR(10))BEGIN  DECLARE перем1 CHAR(10);
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|CREATE PROCEDURE mysqltest2.p4(  INOUT парам1 CHAR(10) CHARACTER SET utf8,  OUT парам2 CHAR(10) CHARACTER SET utf8)BEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|ALTER DATABASE mysqltest2 COLLATE cp866_general_ci|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|CALL p1(@a, @b)|CALL p2(@a, @b)|CALL mysqltest2.p3(@a, @b)|CALL mysqltest2.p4(@a, @b)|set names utf8|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|CALL p1(@a, @b)|CALL p2(@a, @b)|CALL mysqltest2.p3(@a, @b)|CALL mysqltest2.p4(@a, @b)|set names utf8|use test|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE TABLE t1(c INT)|CREATE TABLE mysqltest2.t1(c INT)|CREATE TABLE log(msg VARCHAR(255))|CREATE TABLE mysqltest2.log(msg VARCHAR(255))|CREATE TRIGGER trg1 BEFORE INSERT ON t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10);
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @a1 = 'текст';
  SET @a2 = _utf8 'текст';
  SET @a3 = _koi8r    '';
END|CREATE TRIGGER trg2 AFTER INSERT ON t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @b1 = 'текст';
  SET @b2 = _utf8 'текст';
  SET @b3 = _koi8r    '';
END|CREATE TRIGGER mysqltest2.trg3 BEFORE INSERT ON mysqltest2.t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10);
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @a1 = 'текст';
  SET @a2 = _utf8 'текст';
  SET @a3 = _koi8r    '';
END|CREATE TRIGGER mysqltest2.trg4 AFTER INSERT ON mysqltest2.t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @b1 = 'текст';
  SET @b2 = _utf8 'текст';
  SET @b3 = _koi8r    '';
END|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|ALTER DATABASE mysqltest2 COLLATE cp866_general_ci|ALTER TABLE t1 ADD COLUMN fake INT|ALTER TABLE t1 DROP COLUMN fake|ALTER TABLE mysqltest2.t1 ADD COLUMN fake INT|ALTER TABLE mysqltest2.t1 DROP COLUMN fake|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|INSERT INTO mysqltest1.t1 VALUES(0)|INSERT INTO mysqltest2.t1 VALUES(0)|DELETE FROM mysqltest1.log|DELETE FROM mysqltest2.log|set names utf8|use mysqltest1|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|ALTER TABLE mysqltest1.t1 ADD COLUMN fake INT|ALTER TABLE mysqltest1.t1 DROP COLUMN fake|ALTER TABLE mysqltest2.t1 ADD COLUMN fake INT|ALTER TABLE mysqltest2.t1 DROP COLUMN fake|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|INSERT INTO mysqltest1.t1 VALUES(0)|INSERT INTO mysqltest2.t1 VALUES(0)|DELETE FROM mysqltest1.log|DELETE FROM mysqltest2.log|set names utf8|use mysqltest1|use test|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE EVENT ev1 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10);
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,    @@character_set_client AS c6;
END|CREATE EVENT ev2 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev3|SHOW EVENTS LIKE 'ev1'|SHOW EVENTS LIKE 'ev2'|SHOW EVENTS LIKE 'ev3'|SHOW EVENTS LIKE 'ev4'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev1'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev2'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev3'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev4'|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev3|SHOW EVENTS LIKE 'ev1'|SHOW EVENTS LIKE 'ev2'|SHOW EVENTS LIKE 'ev3'|SHOW EVENTS LIKE 'ev4'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev1'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev2'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev3'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev4'|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev3|SHOW EVENTS LIKE 'ev1'|SHOW EVENTS LIKE 'ev2'|SHOW EVENTS LIKE 'ev3'|SHOW EVENTS LIKE 'ev4'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev1'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev2'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev3'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev4'|  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }      @@character_set_client AS c6;
END|CREATE EVENT mysqltest2.ev3 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,    @@character_set_client AS c6;
END|CREATE EVENT mysqltest2.ev4 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,    @@character_set_client AS c6;
END|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|ALTER DATABASE mysqltest2 COLLATE cp866_general_ci|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev4|set names utf8|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev4|set names utf8|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE PROCEDURE p1()BEGIN  CREATE TABLE t1(col1 VARCHAR(10));
  SHOW CREATE TABLE t1;
END|CREATE PROCEDURE mysqltest2.p2()BEGIN  CREATE TABLE t2(col1 VARCHAR(10));
  SHOW CREATE TABLE t2;
END|CALL p1()|SHOW CREATE TABLE t1|CALL mysqltest2.p2()|SHOW CREATE TABLE mysqltest2.t2|ALTER DATABASE mysqltest1 COLLATE cp1251_general_cs|ALTER DATABASE mysqltest2 COLLATE cp1251_general_cs|DROP TABLE t1|DROP TABLE mysqltest2.t2|CALL p1()|SHOW CREATE TABLE t1|CALL mysqltest2.p2()|SHOW CREATE TABLE mysqltest2.t2|delimiter ;|USE test;
DROP DATABASE mysqltest1;
DROP DATABASE mysqltest2;
SHOW CREATE VIEW v1|SHOW CREATE VIEW v2|SHOW CREATE VIEW v3|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v1'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v2'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v3'|SELECT COLLATION(c1), COLLATION(c2) FROM v1|SELECT COLLATION(c1) FROM v2|SELECT * FROM v3|SHOW CREATE VIEW v1|SHOW CREATE VIEW v2|SHOW CREATE VIEW v3|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v1'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v2'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v3'|SELECT COLLATION(c1), COLLATION(c2) FROM v1|SELECT COLLATION(c1) FROM v2|SELECT * FROM v3|SHOW CREATE VIEW v1|SHOW CREATE VIEW v2|SHOW CREATE VIEW v3|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v1'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v2'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v3'|SELECT COLLATION(c1), COLLATION(c2) FROM v1|SELECT COLLATION(c1) FROM v2|SELECT * FROM v3|SHOW CREATE PROCEDURE p1|SHOW CREATE PROCEDURE p2|SHOW CREATE PROCEDURE mysqltest2.p3|SHOW CREATE PROCEDURE mysqltest2.p4|SHOW PROCEDURE STATUS LIKE 'p1'|SHOW PROCEDURE STATUS LIKE 'p2'|SHOW PROCEDURE STATUS LIKE 'p3'|SHOW PROCEDURE STATUS LIKE 'p4'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p1'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p2'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p3'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p4'|SET @a = '1'|SET @b = '2'|CALL p1(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL p2(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p3(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p4(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|SHOW CREATE PROCEDURE p1|SHOW CREATE PROCEDURE p2|SHOW CREATE PROCEDURE mysqltest2.p3|SHOW CREATE PROCEDURE mysqltest2.p4|SHOW PROCEDURE STATUS LIKE 'p1'|SHOW PROCEDURE STATUS LIKE 'p2'|SHOW PROCEDURE STATUS LIKE 'p3'|SHOW PROCEDURE STATUS LIKE 'p4'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p1'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p2'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p3'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p4'|SET @a = '1'|SET @b = '2'|CALL p1(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL p2(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p3(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p4(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|SHOW CREATE PROCEDURE p1|SHOW CREATE PROCEDURE p2|SHOW CREATE PROCEDURE mysqltest2.p3|SHOW CREATE PROCEDURE mysqltest2.p4|SHOW PROCEDURE STATUS LIKE 'p1'|SHOW PROCEDURE STATUS LIKE 'p2'|SHOW PROCEDURE STATUS LIKE 'p3'|SHOW PROCEDURE STATUS LIKE 'p4'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p1'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p2'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p3'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p4'|SET @a = '1'|SET @b = '2'|CALL p1(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL p2(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p3(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p4(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|SHOW CREATE TRIGGER trg1|SHOW CREATE TRIGGER trg2|SHOW CREATE TRIGGER mysqltest2.trg3|SHOW CREATE TRIGGER mysqltest2.trg4|SHOW TRIGGERS|use mysqltest2|SHOW TRIGGERS|use mysqltest1|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg1'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg2'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg3'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg4'|SET @a1 = '1'|SET @a2 = '1'|SET @a3 = '1'|SET @b1 = '2'|SET @b2 = '2'|SET @b3 = '2'|INSERT INTO t1 VALUES(1)|SELECT msg FROM log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM log|INSERT INTO mysqltest2.t1 VALUES(1)|SELECT msg FROM mysqltest2.log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM mysqltest2.log|SHOW CREATE TRIGGER trg1|SHOW CREATE TRIGGER trg2|SHOW CREATE TRIGGER mysqltest2.trg3|SHOW CREATE TRIGGER mysqltest2.trg4|SHOW TRIGGERS|use mysqltest2|SHOW TRIGGERS|use mysqltest1|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg1'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg2'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg3'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg4'|SET @a1 = '1'|SET @a2 = '1'|SET @a3 = '1'|SET @b1 = '2'|SET @b2 = '2'|SET @b3 = '2'|INSERT INTO t1 VALUES(1)|SELECT msg FROM log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM log|INSERT INTO mysqltest2.t1 VALUES(1)|SELECT msg FROM mysqltest2.log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM mysqltest2.log|SHOW CREATE TRIGGER trg1|SHOW CREATE TRIGGER trg2|SHOW CREATE TRIGGER mysqltest2.trg3|SHOW CREATE TRIGGER mysqltest2.trg4|SHOW TRIGGERS|use mysqltest2|SHOW TRIGGERS|use mysqltest1|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg1'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg2'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg3'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg4'|SET @a1 = '1'|SET @a2 = '1'|SET @a3 = '1'|SET @b1 = '2'|SET @b2 = '2'|SET @b3 = '2'|INSERT INTO t1 VALUES(1)|SELECT msg FROM log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM log|INSERT INTO mysqltest2.t1 VALUES(1)|SELECT msg FROM mysqltest2.log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM mysqltest2.log|set names utf8;
delimiter |;
DROP DATABASE IF EXISTS mysqltest1|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE TABLE t1(кол INT)|INSERT INTO t1 VALUES(1)|CREATE VIEW v1 AS  SELECT 'тест' AS c1, кол AS c2  FROM t1|CREATE VIEW v2 AS SELECT _koi8r'' as c1|CREATE VIEW v3 AS SELECT _koi8r''|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SELECT * FROM mysqltest1.v1|SELECT * FROM mysqltest1.v2|SELECT * FROM mysqltest1.v3|use mysqltest1|set names utf8|DROP DATABASE mysqltest1|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SELECT * FROM mysqltest1.v1|SELECT * FROM mysqltest1.v2|SELECT * FROM mysqltest1.v3|use mysqltest1|set names utf8|use test|DROP DATABASE mysqltest1|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE PROCEDURE p1(  INOUT парам1 CHAR(10),  OUT парам2 CHAR(10))BEGIN  DECLARE перем1 CHAR(10);
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|CREATE PROCEDURE p2(  INOUT парам1 CHAR(10) CHARACTER SET utf8,  OUT парам2 CHAR(10) CHARACTER SET utf8)BEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|CREATE PROCEDURE mysqltest2.p3(  INOUT парам1 CHAR(10),  OUT парам2 CHAR(10))BEGIN  DECLARE перем1 CHAR(10);
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|CREATE PROCEDURE mysqltest2.p4(  INOUT парам1 CHAR(10) CHARACTER SET utf8,  OUT парам2 CHAR(10) CHARACTER SET utf8)BEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|ALTER DATABASE mysqltest2 COLLATE cp866_general_ci|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|CALL p1(@a, @b)|CALL p2(@a, @b)|CALL mysqltest2.p3(@a, @b)|CALL mysqltest2.p4(@a, @b)|set names utf8|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|CALL p1(@a, @b)|CALL p2(@a, @b)|CALL mysqltest2.p3(@a, @b)|CALL mysqltest2.p4(@a, @b)|set names utf8|use test|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE TABLE t1(c INT)|CREATE TABLE mysqltest2.t1(c INT)|CREATE TABLE log(msg VARCHAR(255))|CREATE TABLE mysqltest2.log(msg VARCHAR(255))|CREATE TRIGGER trg1 BEFORE INSERT ON t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10);
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @a1 = 'текст';
  SET @a2 = _utf8 'текст';
  SET @a3 = _koi8r    '';
END|CREATE TRIGGER trg2 AFTER INSERT ON t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @b1 = 'текст';
  SET @b2 = _utf8 'текст';
  SET @b3 = _koi8r    '';
END|CREATE TRIGGER mysqltest2.trg3 BEFORE INSERT ON mysqltest2.t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10);
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @a1 = 'текст';
  SET @a2 = _utf8 'текст';
  SET @a3 = _koi8r    '';
END|CREATE TRIGGER mysqltest2.trg4 AFTER INSERT ON mysqltest2.t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @b1 = 'текст';
  SET @b2 = _utf8 'текст';
  SET @b3 = _koi8r    '';
END|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|ALTER DATABASE mysqltest2 COLLATE cp866_general_ci|ALTER TABLE t1 ADD COLUMN fake INT|ALTER TABLE t1 DROP COLUMN fake|ALTER TABLE mysqltest2.t1 ADD COLUMN fake INT|ALTER TABLE mysqltest2.t1 DROP COLUMN fake|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|INSERT INTO mysqltest1.t1 VALUES(0)|INSERT INTO mysqltest2.t1 VALUES(0)|DELETE FROM mysqltest1.log|DELETE FROM mysqltest2.log|set names utf8|use mysqltest1|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|ALTER TABLE mysqltest1.t1 ADD COLUMN fake INT|ALTER TABLE mysqltest1.t1 DROP COLUMN fake|ALTER TABLE mysqltest2.t1 ADD COLUMN fake INT|ALTER TABLE mysqltest2.t1 DROP COLUMN fake|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|INSERT INTO mysqltest1.t1 VALUES(0)|INSERT INTO mysqltest2.t1 VALUES(0)|DELETE FROM mysqltest1.log|DELETE FROM mysqltest2.log|set names utf8|use mysqltest1|use test|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE EVENT ev1 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10);
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,    @@character_set_client AS c6;
END|CREATE EVENT ev2 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev3|SHOW EVENTS LIKE 'ev1'|SHOW EVENTS LIKE 'ev2'|SHOW EVENTS LIKE 'ev3'|SHOW EVENTS LIKE 'ev4'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev1'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev2'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev3'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev4'|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev3|SHOW EVENTS LIKE 'ev1'|SHOW EVENTS LIKE 'ev2'|SHOW EVENTS LIKE 'ev3'|SHOW EVENTS LIKE 'ev4'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev1'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev2'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev3'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev4'|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev3|SHOW EVENTS LIKE 'ev1'|SHOW EVENTS LIKE 'ev2'|SHOW EVENTS LIKE 'ev3'|SHOW EVENTS LIKE 'ev4'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev1'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev2'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev3'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev4'|  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }      @@character_set_client AS c6;
END|CREATE EVENT mysqltest2.ev3 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,    @@character_set_client AS c6;
END|CREATE EVENT mysqltest2.ev4 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,    @@character_set_client AS c6;
END|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|ALTER DATABASE mysqltest2 COLLATE cp866_general_ci|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev4|set names utf8|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev4|set names utf8|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE PROCEDURE p1()BEGIN  CREATE TABLE t1(col1 VARCHAR(10));
  SHOW CREATE TABLE t1;
END|CREATE PROCEDURE mysqltest2.p2()BEGIN  CREATE TABLE t2(col1 VARCHAR(10));
  SHOW CREATE TABLE t2;
END|CALL p1()|SHOW CREATE TABLE t1|CALL mysqltest2.p2()|SHOW CREATE TABLE mysqltest2.t2|ALTER DATABASE mysqltest1 COLLATE cp1251_general_cs|ALTER DATABASE mysqltest2 COLLATE cp1251_general_cs|DROP TABLE t1|DROP TABLE mysqltest2.t2|CALL p1()|SHOW CREATE TABLE t1|CALL mysqltest2.p2()|SHOW CREATE TABLE mysqltest2.t2|delimiter ;|USE test;
DROP DATABASE mysqltest1;
DROP DATABASE mysqltest2;
SHOW CREATE VIEW v1|SHOW CREATE VIEW v2|SHOW CREATE VIEW v3|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v1'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v2'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v3'|SELECT COLLATION(c1), COLLATION(c2) FROM v1|SELECT COLLATION(c1) FROM v2|SELECT * FROM v3|SHOW CREATE VIEW v1|SHOW CREATE VIEW v2|SHOW CREATE VIEW v3|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v1'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v2'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v3'|SELECT COLLATION(c1), COLLATION(c2) FROM v1|SELECT COLLATION(c1) FROM v2|SELECT * FROM v3|SHOW CREATE VIEW v1|SHOW CREATE VIEW v2|SHOW CREATE VIEW v3|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v1'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v2'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v3'|SELECT COLLATION(c1), COLLATION(c2) FROM v1|SELECT COLLATION(c1) FROM v2|SELECT * FROM v3|SHOW CREATE PROCEDURE p1|SHOW CREATE PROCEDURE p2|SHOW CREATE PROCEDURE mysqltest2.p3|SHOW CREATE PROCEDURE mysqltest2.p4|SHOW PROCEDURE STATUS LIKE 'p1'|SHOW PROCEDURE STATUS LIKE 'p2'|SHOW PROCEDURE STATUS LIKE 'p3'|SHOW PROCEDURE STATUS LIKE 'p4'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p1'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p2'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p3'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p4'|SET @a = '1'|SET @b = '2'|CALL p1(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL p2(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p3(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p4(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|SHOW CREATE PROCEDURE p1|SHOW CREATE PROCEDURE p2|SHOW CREATE PROCEDURE mysqltest2.p3|SHOW CREATE PROCEDURE mysqltest2.p4|SHOW PROCEDURE STATUS LIKE 'p1'|SHOW PROCEDURE STATUS LIKE 'p2'|SHOW PROCEDURE STATUS LIKE 'p3'|SHOW PROCEDURE STATUS LIKE 'p4'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p1'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p2'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p3'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p4'|SET @a = '1'|SET @b = '2'|CALL p1(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL p2(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p3(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p4(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|SHOW CREATE PROCEDURE p1|SHOW CREATE PROCEDURE p2|SHOW CREATE PROCEDURE mysqltest2.p3|SHOW CREATE PROCEDURE mysqltest2.p4|SHOW PROCEDURE STATUS LIKE 'p1'|SHOW PROCEDURE STATUS LIKE 'p2'|SHOW PROCEDURE STATUS LIKE 'p3'|SHOW PROCEDURE STATUS LIKE 'p4'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p1'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p2'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p3'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p4'|SET @a = '1'|SET @b = '2'|CALL p1(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL p2(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p3(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p4(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|SHOW CREATE TRIGGER trg1|SHOW CREATE TRIGGER trg2|SHOW CREATE TRIGGER mysqltest2.trg3|SHOW CREATE TRIGGER mysqltest2.trg4|SHOW TRIGGERS|use mysqltest2|SHOW TRIGGERS|use mysqltest1|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg1'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg2'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg3'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg4'|SET @a1 = '1'|SET @a2 = '1'|SET @a3 = '1'|SET @b1 = '2'|SET @b2 = '2'|SET @b3 = '2'|INSERT INTO t1 VALUES(1)|SELECT msg FROM log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM log|INSERT INTO mysqltest2.t1 VALUES(1)|SELECT msg FROM mysqltest2.log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM mysqltest2.log|SHOW CREATE TRIGGER trg1|SHOW CREATE TRIGGER trg2|SHOW CREATE TRIGGER mysqltest2.trg3|SHOW CREATE TRIGGER mysqltest2.trg4|SHOW TRIGGERS|use mysqltest2|SHOW TRIGGERS|use mysqltest1|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg1'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg2'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg3'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg4'|SET @a1 = '1'|SET @a2 = '1'|SET @a3 = '1'|SET @b1 = '2'|SET @b2 = '2'|SET @b3 = '2'|INSERT INTO t1 VALUES(1)|SELECT msg FROM log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM log|INSERT INTO mysqltest2.t1 VALUES(1)|SELECT msg FROM mysqltest2.log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM mysqltest2.log|SHOW CREATE TRIGGER trg1|SHOW CREATE TRIGGER trg2|SHOW CREATE TRIGGER mysqltest2.trg3|SHOW CREATE TRIGGER mysqltest2.trg4|SHOW TRIGGERS|use mysqltest2|SHOW TRIGGERS|use mysqltest1|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg1'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg2'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg3'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg4'|SET @a1 = '1'|SET @a2 = '1'|SET @a3 = '1'|SET @b1 = '2'|SET @b2 = '2'|SET @b3 = '2'|INSERT INTO t1 VALUES(1)|SELECT msg FROM log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM log|INSERT INTO mysqltest2.t1 VALUES(1)|SELECT msg FROM mysqltest2.log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM mysqltest2.log|set names utf8;
delimiter |;
DROP DATABASE IF EXISTS mysqltest1|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE TABLE t1(кол INT)|INSERT INTO t1 VALUES(1)|CREATE VIEW v1 AS  SELECT 'тест' AS c1, кол AS c2  FROM t1|CREATE VIEW v2 AS SELECT _koi8r'' as c1|CREATE VIEW v3 AS SELECT _koi8r''|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SELECT * FROM mysqltest1.v1|SELECT * FROM mysqltest1.v2|SELECT * FROM mysqltest1.v3|use mysqltest1|set names utf8|DROP DATABASE mysqltest1|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SELECT * FROM mysqltest1.v1|SELECT * FROM mysqltest1.v2|SELECT * FROM mysqltest1.v3|use mysqltest1|set names utf8|use test|DROP DATABASE mysqltest1|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE PROCEDURE p1(  INOUT парам1 CHAR(10),  OUT парам2 CHAR(10))BEGIN  DECLARE перем1 CHAR(10);
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|CREATE PROCEDURE p2(  INOUT парам1 CHAR(10) CHARACTER SET utf8,  OUT парам2 CHAR(10) CHARACTER SET utf8)BEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|CREATE PROCEDURE mysqltest2.p3(  INOUT парам1 CHAR(10),  OUT парам2 CHAR(10))BEGIN  DECLARE перем1 CHAR(10);
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|CREATE PROCEDURE mysqltest2.p4(  INOUT парам1 CHAR(10) CHARACTER SET utf8,  OUT парам2 CHAR(10) CHARACTER SET utf8)BEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|ALTER DATABASE mysqltest2 COLLATE cp866_general_ci|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|CALL p1(@a, @b)|CALL p2(@a, @b)|CALL mysqltest2.p3(@a, @b)|CALL mysqltest2.p4(@a, @b)|set names utf8|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|CALL p1(@a, @b)|CALL p2(@a, @b)|CALL mysqltest2.p3(@a, @b)|CALL mysqltest2.p4(@a, @b)|set names utf8|use test|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE TABLE t1(c INT)|CREATE TABLE mysqltest2.t1(c INT)|CREATE TABLE log(msg VARCHAR(255))|CREATE TABLE mysqltest2.log(msg VARCHAR(255))|CREATE TRIGGER trg1 BEFORE INSERT ON t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10);
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @a1 = 'текст';
  SET @a2 = _utf8 'текст';
  SET @a3 = _koi8r    '';
END|CREATE TRIGGER trg2 AFTER INSERT ON t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @b1 = 'текст';
  SET @b2 = _utf8 'текст';
  SET @b3 = _koi8r    '';
END|CREATE TRIGGER mysqltest2.trg3 BEFORE INSERT ON mysqltest2.t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10);
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @a1 = 'текст';
  SET @a2 = _utf8 'текст';
  SET @a3 = _koi8r    '';
END|CREATE TRIGGER mysqltest2.trg4 AFTER INSERT ON mysqltest2.t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @b1 = 'текст';
  SET @b2 = _utf8 'текст';
  SET @b3 = _koi8r    '';
END|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|ALTER DATABASE mysqltest2 COLLATE cp866_general_ci|ALTER TABLE t1 ADD COLUMN fake INT|ALTER TABLE t1 DROP COLUMN fake|ALTER TABLE mysqltest2.t1 ADD COLUMN fake INT|ALTER TABLE mysqltest2.t1 DROP COLUMN fake|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|INSERT INTO mysqltest1.t1 VALUES(0)|INSERT INTO mysqltest2.t1 VALUES(0)|DELETE FROM mysqltest1.log|DELETE FROM mysqltest2.log|set names utf8|use mysqltest1|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|ALTER TABLE mysqltest1.t1 ADD COLUMN fake INT|ALTER TABLE mysqltest1.t1 DROP COLUMN fake|ALTER TABLE mysqltest2.t1 ADD COLUMN fake INT|ALTER TABLE mysqltest2.t1 DROP COLUMN fake|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|INSERT INTO mysqltest1.t1 VALUES(0)|INSERT INTO mysqltest2.t1 VALUES(0)|DELETE FROM mysqltest1.log|DELETE FROM mysqltest2.log|set names utf8|use mysqltest1|use test|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE EVENT ev1 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10);
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,    @@character_set_client AS c6;
END|CREATE EVENT ev2 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev3|SHOW EVENTS LIKE 'ev1'|SHOW EVENTS LIKE 'ev2'|SHOW EVENTS LIKE 'ev3'|SHOW EVENTS LIKE 'ev4'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev1'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev2'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev3'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev4'|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev3|SHOW EVENTS LIKE 'ev1'|SHOW EVENTS LIKE 'ev2'|SHOW EVENTS LIKE 'ev3'|SHOW EVENTS LIKE 'ev4'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev1'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev2'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev3'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev4'|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev3|SHOW EVENTS LIKE 'ev1'|SHOW EVENTS LIKE 'ev2'|SHOW EVENTS LIKE 'ev3'|SHOW EVENTS LIKE 'ev4'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev1'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev2'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev3'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev4'|  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }      @@character_set_client AS c6;
END|CREATE EVENT mysqltest2.ev3 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,    @@character_set_client AS c6;
END|CREATE EVENT mysqltest2.ev4 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,    @@character_set_client AS c6;
END|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|ALTER DATABASE mysqltest2 COLLATE cp866_general_ci|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev4|set names utf8|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev4|set names utf8|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE PROCEDURE p1()BEGIN  CREATE TABLE t1(col1 VARCHAR(10));
  SHOW CREATE TABLE t1;
END|CREATE PROCEDURE mysqltest2.p2()BEGIN  CREATE TABLE t2(col1 VARCHAR(10));
  SHOW CREATE TABLE t2;
END|CALL p1()|SHOW CREATE TABLE t1|CALL mysqltest2.p2()|SHOW CREATE TABLE mysqltest2.t2|ALTER DATABASE mysqltest1 COLLATE cp1251_general_cs|ALTER DATABASE mysqltest2 COLLATE cp1251_general_cs|DROP TABLE t1|DROP TABLE mysqltest2.t2|CALL p1()|SHOW CREATE TABLE t1|CALL mysqltest2.p2()|SHOW CREATE TABLE mysqltest2.t2|delimiter ;|USE test;
DROP DATABASE mysqltest1;
DROP DATABASE mysqltest2;
SHOW CREATE VIEW v1|SHOW CREATE VIEW v2|SHOW CREATE VIEW v3|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v1'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v2'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v3'|SELECT COLLATION(c1), COLLATION(c2) FROM v1|SELECT COLLATION(c1) FROM v2|SELECT * FROM v3|SHOW CREATE VIEW v1|SHOW CREATE VIEW v2|SHOW CREATE VIEW v3|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v1'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v2'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v3'|SELECT COLLATION(c1), COLLATION(c2) FROM v1|SELECT COLLATION(c1) FROM v2|SELECT * FROM v3|SHOW CREATE VIEW v1|SHOW CREATE VIEW v2|SHOW CREATE VIEW v3|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v1'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v2'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v3'|SELECT COLLATION(c1), COLLATION(c2) FROM v1|SELECT COLLATION(c1) FROM v2|SELECT * FROM v3|SHOW CREATE PROCEDURE p1|SHOW CREATE PROCEDURE p2|SHOW CREATE PROCEDURE mysqltest2.p3|SHOW CREATE PROCEDURE mysqltest2.p4|SHOW PROCEDURE STATUS LIKE 'p1'|SHOW PROCEDURE STATUS LIKE 'p2'|SHOW PROCEDURE STATUS LIKE 'p3'|SHOW PROCEDURE STATUS LIKE 'p4'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p1'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p2'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p3'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p4'|SET @a = '1'|SET @b = '2'|CALL p1(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL p2(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p3(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p4(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|SHOW CREATE PROCEDURE p1|SHOW CREATE PROCEDURE p2|SHOW CREATE PROCEDURE mysqltest2.p3|SHOW CREATE PROCEDURE mysqltest2.p4|SHOW PROCEDURE STATUS LIKE 'p1'|SHOW PROCEDURE STATUS LIKE 'p2'|SHOW PROCEDURE STATUS LIKE 'p3'|SHOW PROCEDURE STATUS LIKE 'p4'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p1'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p2'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p3'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p4'|SET @a = '1'|SET @b = '2'|CALL p1(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL p2(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p3(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p4(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|SHOW CREATE PROCEDURE p1|SHOW CREATE PROCEDURE p2|SHOW CREATE PROCEDURE mysqltest2.p3|SHOW CREATE PROCEDURE mysqltest2.p4|SHOW PROCEDURE STATUS LIKE 'p1'|SHOW PROCEDURE STATUS LIKE 'p2'|SHOW PROCEDURE STATUS LIKE 'p3'|SHOW PROCEDURE STATUS LIKE 'p4'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p1'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p2'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p3'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p4'|SET @a = '1'|SET @b = '2'|CALL p1(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL p2(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p3(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p4(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|SHOW CREATE TRIGGER trg1|SHOW CREATE TRIGGER trg2|SHOW CREATE TRIGGER mysqltest2.trg3|SHOW CREATE TRIGGER mysqltest2.trg4|SHOW TRIGGERS|use mysqltest2|SHOW TRIGGERS|use mysqltest1|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg1'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg2'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg3'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg4'|SET @a1 = '1'|SET @a2 = '1'|SET @a3 = '1'|SET @b1 = '2'|SET @b2 = '2'|SET @b3 = '2'|INSERT INTO t1 VALUES(1)|SELECT msg FROM log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM log|INSERT INTO mysqltest2.t1 VALUES(1)|SELECT msg FROM mysqltest2.log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM mysqltest2.log|SHOW CREATE TRIGGER trg1|SHOW CREATE TRIGGER trg2|SHOW CREATE TRIGGER mysqltest2.trg3|SHOW CREATE TRIGGER mysqltest2.trg4|SHOW TRIGGERS|use mysqltest2|SHOW TRIGGERS|use mysqltest1|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg1'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg2'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg3'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg4'|SET @a1 = '1'|SET @a2 = '1'|SET @a3 = '1'|SET @b1 = '2'|SET @b2 = '2'|SET @b3 = '2'|INSERT INTO t1 VALUES(1)|SELECT msg FROM log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM log|INSERT INTO mysqltest2.t1 VALUES(1)|SELECT msg FROM mysqltest2.log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM mysqltest2.log|SHOW CREATE TRIGGER trg1|SHOW CREATE TRIGGER trg2|SHOW CREATE TRIGGER mysqltest2.trg3|SHOW CREATE TRIGGER mysqltest2.trg4|SHOW TRIGGERS|use mysqltest2|SHOW TRIGGERS|use mysqltest1|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg1'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg2'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg3'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg4'|SET @a1 = '1'|SET @a2 = '1'|SET @a3 = '1'|SET @b1 = '2'|SET @b2 = '2'|SET @b3 = '2'|INSERT INTO t1 VALUES(1)|SELECT msg FROM log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM log|INSERT INTO mysqltest2.t1 VALUES(1)|SELECT msg FROM mysqltest2.log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM mysqltest2.log|set names utf8;
delimiter |;
DROP DATABASE IF EXISTS mysqltest1|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE TABLE t1(кол INT)|INSERT INTO t1 VALUES(1)|CREATE VIEW v1 AS  SELECT 'тест' AS c1, кол AS c2  FROM t1|CREATE VIEW v2 AS SELECT _koi8r'' as c1|CREATE VIEW v3 AS SELECT _koi8r''|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SELECT * FROM mysqltest1.v1|SELECT * FROM mysqltest1.v2|SELECT * FROM mysqltest1.v3|use mysqltest1|set names utf8|DROP DATABASE mysqltest1|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SELECT * FROM mysqltest1.v1|SELECT * FROM mysqltest1.v2|SELECT * FROM mysqltest1.v3|use mysqltest1|set names utf8|use test|DROP DATABASE mysqltest1|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE PROCEDURE p1(  INOUT парам1 CHAR(10),  OUT парам2 CHAR(10))BEGIN  DECLARE перем1 CHAR(10);
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|CREATE PROCEDURE p2(  INOUT парам1 CHAR(10) CHARACTER SET utf8,  OUT парам2 CHAR(10) CHARACTER SET utf8)BEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|CREATE PROCEDURE mysqltest2.p3(  INOUT парам1 CHAR(10),  OUT парам2 CHAR(10))BEGIN  DECLARE перем1 CHAR(10);
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|CREATE PROCEDURE mysqltest2.p4(  INOUT парам1 CHAR(10) CHARACTER SET utf8,  OUT парам2 CHAR(10) CHARACTER SET utf8)BEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|ALTER DATABASE mysqltest2 COLLATE cp866_general_ci|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|CALL p1(@a, @b)|CALL p2(@a, @b)|CALL mysqltest2.p3(@a, @b)|CALL mysqltest2.p4(@a, @b)|set names utf8|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|CALL p1(@a, @b)|CALL p2(@a, @b)|CALL mysqltest2.p3(@a, @b)|CALL mysqltest2.p4(@a, @b)|set names utf8|use test|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE TABLE t1(c INT)|CREATE TABLE mysqltest2.t1(c INT)|CREATE TABLE log(msg VARCHAR(255))|CREATE TABLE mysqltest2.log(msg VARCHAR(255))|CREATE TRIGGER trg1 BEFORE INSERT ON t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10);
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @a1 = 'текст';
  SET @a2 = _utf8 'текст';
  SET @a3 = _koi8r    '';
END|CREATE TRIGGER trg2 AFTER INSERT ON t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @b1 = 'текст';
  SET @b2 = _utf8 'текст';
  SET @b3 = _koi8r    '';
END|CREATE TRIGGER mysqltest2.trg3 BEFORE INSERT ON mysqltest2.t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10);
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @a1 = 'текст';
  SET @a2 = _utf8 'текст';
  SET @a3 = _koi8r    '';
END|CREATE TRIGGER mysqltest2.trg4 AFTER INSERT ON mysqltest2.t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @b1 = 'текст';
  SET @b2 = _utf8 'текст';
  SET @b3 = _koi8r    '';
END|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|ALTER DATABASE mysqltest2 COLLATE cp866_general_ci|ALTER TABLE t1 ADD COLUMN fake INT|ALTER TABLE t1 DROP COLUMN fake|ALTER TABLE mysqltest2.t1 ADD COLUMN fake INT|ALTER TABLE mysqltest2.t1 DROP COLUMN fake|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|INSERT INTO mysqltest1.t1 VALUES(0)|INSERT INTO mysqltest2.t1 VALUES(0)|DELETE FROM mysqltest1.log|DELETE FROM mysqltest2.log|set names utf8|use mysqltest1|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|ALTER TABLE mysqltest1.t1 ADD COLUMN fake INT|ALTER TABLE mysqltest1.t1 DROP COLUMN fake|ALTER TABLE mysqltest2.t1 ADD COLUMN fake INT|ALTER TABLE mysqltest2.t1 DROP COLUMN fake|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|INSERT INTO mysqltest1.t1 VALUES(0)|INSERT INTO mysqltest2.t1 VALUES(0)|DELETE FROM mysqltest1.log|DELETE FROM mysqltest2.log|set names utf8|use mysqltest1|use test|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE EVENT ev1 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10);
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,    @@character_set_client AS c6;
END|CREATE EVENT ev2 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev3|SHOW EVENTS LIKE 'ev1'|SHOW EVENTS LIKE 'ev2'|SHOW EVENTS LIKE 'ev3'|SHOW EVENTS LIKE 'ev4'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev1'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev2'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev3'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev4'|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev3|SHOW EVENTS LIKE 'ev1'|SHOW EVENTS LIKE 'ev2'|SHOW EVENTS LIKE 'ev3'|SHOW EVENTS LIKE 'ev4'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev1'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev2'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev3'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev4'|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev3|SHOW EVENTS LIKE 'ev1'|SHOW EVENTS LIKE 'ev2'|SHOW EVENTS LIKE 'ev3'|SHOW EVENTS LIKE 'ev4'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev1'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev2'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev3'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev4'|  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }      @@character_set_client AS c6;
END|CREATE EVENT mysqltest2.ev3 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,    @@character_set_client AS c6;
END|CREATE EVENT mysqltest2.ev4 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,    @@character_set_client AS c6;
END|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|ALTER DATABASE mysqltest2 COLLATE cp866_general_ci|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev4|set names utf8|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev4|set names utf8|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE PROCEDURE p1()BEGIN  CREATE TABLE t1(col1 VARCHAR(10));
  SHOW CREATE TABLE t1;
END|CREATE PROCEDURE mysqltest2.p2()BEGIN  CREATE TABLE t2(col1 VARCHAR(10));
  SHOW CREATE TABLE t2;
END|CALL p1()|SHOW CREATE TABLE t1|CALL mysqltest2.p2()|SHOW CREATE TABLE mysqltest2.t2|ALTER DATABASE mysqltest1 COLLATE cp1251_general_cs|ALTER DATABASE mysqltest2 COLLATE cp1251_general_cs|DROP TABLE t1|DROP TABLE mysqltest2.t2|CALL p1()|SHOW CREATE TABLE t1|CALL mysqltest2.p2()|SHOW CREATE TABLE mysqltest2.t2|delimiter ;|USE test;
DROP DATABASE mysqltest1;
DROP DATABASE mysqltest2;
SHOW CREATE VIEW v1|SHOW CREATE VIEW v2|SHOW CREATE VIEW v3|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v1'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v2'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v3'|SELECT COLLATION(c1), COLLATION(c2) FROM v1|SELECT COLLATION(c1) FROM v2|SELECT * FROM v3|SHOW CREATE VIEW v1|SHOW CREATE VIEW v2|SHOW CREATE VIEW v3|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v1'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v2'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v3'|SELECT COLLATION(c1), COLLATION(c2) FROM v1|SELECT COLLATION(c1) FROM v2|SELECT * FROM v3|SHOW CREATE VIEW v1|SHOW CREATE VIEW v2|SHOW CREATE VIEW v3|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v1'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v2'|SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE table_name = 'v3'|SELECT COLLATION(c1), COLLATION(c2) FROM v1|SELECT COLLATION(c1) FROM v2|SELECT * FROM v3|SHOW CREATE PROCEDURE p1|SHOW CREATE PROCEDURE p2|SHOW CREATE PROCEDURE mysqltest2.p3|SHOW CREATE PROCEDURE mysqltest2.p4|SHOW PROCEDURE STATUS LIKE 'p1'|SHOW PROCEDURE STATUS LIKE 'p2'|SHOW PROCEDURE STATUS LIKE 'p3'|SHOW PROCEDURE STATUS LIKE 'p4'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p1'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p2'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p3'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p4'|SET @a = '1'|SET @b = '2'|CALL p1(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL p2(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p3(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p4(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|SHOW CREATE PROCEDURE p1|SHOW CREATE PROCEDURE p2|SHOW CREATE PROCEDURE mysqltest2.p3|SHOW CREATE PROCEDURE mysqltest2.p4|SHOW PROCEDURE STATUS LIKE 'p1'|SHOW PROCEDURE STATUS LIKE 'p2'|SHOW PROCEDURE STATUS LIKE 'p3'|SHOW PROCEDURE STATUS LIKE 'p4'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p1'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p2'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p3'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p4'|SET @a = '1'|SET @b = '2'|CALL p1(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL p2(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p3(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p4(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|SHOW CREATE PROCEDURE p1|SHOW CREATE PROCEDURE p2|SHOW CREATE PROCEDURE mysqltest2.p3|SHOW CREATE PROCEDURE mysqltest2.p4|SHOW PROCEDURE STATUS LIKE 'p1'|SHOW PROCEDURE STATUS LIKE 'p2'|SHOW PROCEDURE STATUS LIKE 'p3'|SHOW PROCEDURE STATUS LIKE 'p4'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p1'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p2'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p3'|SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_name = 'p4'|SET @a = '1'|SET @b = '2'|CALL p1(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL p2(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p3(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|CALL mysqltest2.p4(@a, @b)|SELECT COLLATION(@a) AS ca, COLLATION(@b) cb|SHOW CREATE TRIGGER trg1|SHOW CREATE TRIGGER trg2|SHOW CREATE TRIGGER mysqltest2.trg3|SHOW CREATE TRIGGER mysqltest2.trg4|SHOW TRIGGERS|use mysqltest2|SHOW TRIGGERS|use mysqltest1|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg1'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg2'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg3'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg4'|SET @a1 = '1'|SET @a2 = '1'|SET @a3 = '1'|SET @b1 = '2'|SET @b2 = '2'|SET @b3 = '2'|INSERT INTO t1 VALUES(1)|SELECT msg FROM log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM log|INSERT INTO mysqltest2.t1 VALUES(1)|SELECT msg FROM mysqltest2.log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM mysqltest2.log|SHOW CREATE TRIGGER trg1|SHOW CREATE TRIGGER trg2|SHOW CREATE TRIGGER mysqltest2.trg3|SHOW CREATE TRIGGER mysqltest2.trg4|SHOW TRIGGERS|use mysqltest2|SHOW TRIGGERS|use mysqltest1|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg1'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg2'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg3'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg4'|SET @a1 = '1'|SET @a2 = '1'|SET @a3 = '1'|SET @b1 = '2'|SET @b2 = '2'|SET @b3 = '2'|INSERT INTO t1 VALUES(1)|SELECT msg FROM log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM log|INSERT INTO mysqltest2.t1 VALUES(1)|SELECT msg FROM mysqltest2.log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM mysqltest2.log|SHOW CREATE TRIGGER trg1|SHOW CREATE TRIGGER trg2|SHOW CREATE TRIGGER mysqltest2.trg3|SHOW CREATE TRIGGER mysqltest2.trg4|SHOW TRIGGERS|use mysqltest2|SHOW TRIGGERS|use mysqltest1|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg1'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg2'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg3'|SELECT * FROM INFORMATION_SCHEMA.TRIGGERS WHERE trigger_name = 'trg4'|SET @a1 = '1'|SET @a2 = '1'|SET @a3 = '1'|SET @b1 = '2'|SET @b2 = '2'|SET @b3 = '2'|INSERT INTO t1 VALUES(1)|SELECT msg FROM log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM log|INSERT INTO mysqltest2.t1 VALUES(1)|SELECT msg FROM mysqltest2.log|SELECT  COLLATION(@a1) AS ca1,  COLLATION(@a2) AS ca2,  COLLATION(@a3) AS ca3,  COLLATION(@b1) AS cb1,  COLLATION(@b2) AS cb2,  COLLATION(@b3) AS cb3|DELETE FROM mysqltest2.log|set names utf8;
delimiter |;
DROP DATABASE IF EXISTS mysqltest1|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE TABLE t1(кол INT)|INSERT INTO t1 VALUES(1)|CREATE VIEW v1 AS  SELECT 'тест' AS c1, кол AS c2  FROM t1|CREATE VIEW v2 AS SELECT _koi8r'' as c1|CREATE VIEW v3 AS SELECT _koi8r''|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SELECT * FROM mysqltest1.v1|SELECT * FROM mysqltest1.v2|SELECT * FROM mysqltest1.v3|use mysqltest1|set names utf8|DROP DATABASE mysqltest1|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SELECT * FROM mysqltest1.v1|SELECT * FROM mysqltest1.v2|SELECT * FROM mysqltest1.v3|use mysqltest1|set names utf8|use test|DROP DATABASE mysqltest1|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE PROCEDURE p1(  INOUT парам1 CHAR(10),  OUT парам2 CHAR(10))BEGIN  DECLARE перем1 CHAR(10);
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|CREATE PROCEDURE p2(  INOUT парам1 CHAR(10) CHARACTER SET utf8,  OUT парам2 CHAR(10) CHARACTER SET utf8)BEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|CREATE PROCEDURE mysqltest2.p3(  INOUT парам1 CHAR(10),  OUT парам2 CHAR(10))BEGIN  DECLARE перем1 CHAR(10);
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|CREATE PROCEDURE mysqltest2.p4(  INOUT парам1 CHAR(10) CHARACTER SET utf8,  OUT парам2 CHAR(10) CHARACTER SET utf8)BEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION(парам1) AS c2,    COLLATION(парам2) AS c3;
  SELECT    COLLATION('текст') AS c4,    COLLATION(_utf8 'текст') AS c5,    COLLATION(_koi8r    '') AS c6,    @@collation_connection AS c7,    @@character_set_client AS c8;
  SET парам1 = 'a';
  SET парам2 = 'b';
END|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|ALTER DATABASE mysqltest2 COLLATE cp866_general_ci|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|CALL p1(@a, @b)|CALL p2(@a, @b)|CALL mysqltest2.p3(@a, @b)|CALL mysqltest2.p4(@a, @b)|set names utf8|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|CALL p1(@a, @b)|CALL p2(@a, @b)|CALL mysqltest2.p3(@a, @b)|CALL mysqltest2.p4(@a, @b)|set names utf8|use test|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE TABLE t1(c INT)|CREATE TABLE mysqltest2.t1(c INT)|CREATE TABLE log(msg VARCHAR(255))|CREATE TABLE mysqltest2.log(msg VARCHAR(255))|CREATE TRIGGER trg1 BEFORE INSERT ON t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10);
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @a1 = 'текст';
  SET @a2 = _utf8 'текст';
  SET @a3 = _koi8r    '';
END|CREATE TRIGGER trg2 AFTER INSERT ON t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @b1 = 'текст';
  SET @b2 = _utf8 'текст';
  SET @b3 = _koi8r    '';
END|CREATE TRIGGER mysqltest2.trg3 BEFORE INSERT ON mysqltest2.t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10);
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @a1 = 'текст';
  SET @a2 = _utf8 'текст';
  SET @a3 = _koi8r    '';
END|CREATE TRIGGER mysqltest2.trg4 AFTER INSERT ON mysqltest2.t1 FOR EACH ROWBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  INSERT INTO log VALUES(COLLATION(перем1));
  INSERT INTO log VALUES(COLLATION('текст'));
  INSERT INTO log VALUES(COLLATION(_utf8 'текст'));
  INSERT INTO log VALUES(COLLATION(_koi8r    ''));
  INSERT INTO log VALUES(@@collation_connection);
  INSERT INTO log VALUES(@@character_set_client);
  SET @b1 = 'текст';
  SET @b2 = _utf8 'текст';
  SET @b3 = _koi8r    '';
END|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|ALTER DATABASE mysqltest2 COLLATE cp866_general_ci|ALTER TABLE t1 ADD COLUMN fake INT|ALTER TABLE t1 DROP COLUMN fake|ALTER TABLE mysqltest2.t1 ADD COLUMN fake INT|ALTER TABLE mysqltest2.t1 DROP COLUMN fake|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|INSERT INTO mysqltest1.t1 VALUES(0)|INSERT INTO mysqltest2.t1 VALUES(0)|DELETE FROM mysqltest1.log|DELETE FROM mysqltest2.log|set names utf8|use mysqltest1|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|ALTER TABLE mysqltest1.t1 ADD COLUMN fake INT|ALTER TABLE mysqltest1.t1 DROP COLUMN fake|ALTER TABLE mysqltest2.t1 ADD COLUMN fake INT|ALTER TABLE mysqltest2.t1 DROP COLUMN fake|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|INSERT INTO mysqltest1.t1 VALUES(0)|INSERT INTO mysqltest2.t1 VALUES(0)|DELETE FROM mysqltest1.log|DELETE FROM mysqltest2.log|set names utf8|use mysqltest1|use test|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE EVENT ev1 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10);
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,    @@character_set_client AS c6;
END|CREATE EVENT ev2 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev3|SHOW EVENTS LIKE 'ev1'|SHOW EVENTS LIKE 'ev2'|SHOW EVENTS LIKE 'ev3'|SHOW EVENTS LIKE 'ev4'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev1'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev2'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev3'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev4'|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev3|SHOW EVENTS LIKE 'ev1'|SHOW EVENTS LIKE 'ev2'|SHOW EVENTS LIKE 'ev3'|SHOW EVENTS LIKE 'ev4'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev1'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev2'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev3'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev4'|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev3|SHOW EVENTS LIKE 'ev1'|SHOW EVENTS LIKE 'ev2'|SHOW EVENTS LIKE 'ev3'|SHOW EVENTS LIKE 'ev4'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev1'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev2'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev3'|SELECT * FROM INFORMATION_SCHEMA.EVENTS WHERE event_name = 'ev4'|  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }      @@character_set_client AS c6;
END|CREATE EVENT mysqltest2.ev3 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,    @@character_set_client AS c6;
END|CREATE EVENT mysqltest2.ev4 ON SCHEDULE AT '2030-01-01 00:00:00' DOBEGIN  DECLARE перем1 CHAR(10) CHARACTER SET utf8;
  SELECT    COLLATION(перем1) AS c1,    COLLATION('текст') AS c2,    COLLATION(_utf8 'текст') AS c3,    COLLATION(_koi8r    '') AS c4,    @@collation_connection AS c5,    @@character_set_client AS c6;
END|ALTER DATABASE mysqltest1 COLLATE cp866_general_ci|ALTER DATABASE mysqltest2 COLLATE cp866_general_ci|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev4|set names utf8|DROP DATABASE mysqltest1|DROP DATABASE mysqltest2|SET @@character_set_client= cp1251|SET @@character_set_results= cp1251|SET @@collation_connection= cp1251_general_ci|SHOW CREATE EVENT ev1|SHOW CREATE EVENT ev2|SHOW CREATE EVENT mysqltest2.ev3|SHOW CREATE EVENT mysqltest2.ev4|set names utf8|DROP DATABASE IF EXISTS mysqltest1|DROP DATABASE IF EXISTS mysqltest2|CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci|use mysqltest1|CREATE PROCEDURE p1()BEGIN  CREATE TABLE t1(col1 VARCHAR(10));
  SHOW CREATE TABLE t1;
END|CREATE PROCEDURE mysqltest2.p2()BEGIN  CREATE TABLE t2(col1 VARCHAR(10));
  SHOW CREATE TABLE t2;
END|CALL p1()|SHOW CREATE TABLE t1|CALL mysqltest2.p2()|SHOW CREATE TABLE mysqltest2.t2|ALTER DATABASE mysqltest1 COLLATE cp1251_general_cs|ALTER DATABASE mysqltest2 COLLATE cp1251_general_cs|DROP TABLE t1|DROP TABLE mysqltest2.t2|CALL p1()|SHOW CREATE TABLE t1|CALL mysqltest2.p2()|SHOW CREATE TABLE mysqltest2.t2|delimiter ;|USE test;
DROP DATABASE mysqltest1;
DROP DATABASE mysqltest2;
