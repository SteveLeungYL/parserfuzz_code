  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  use File::Basename;
  use Config;
  use File::Spec;
  my $binary= $ENV{'MYSQLD'};
  #print "# DBG: binary: $binary\n";
  my $bindir= dirname($binary);
  my $binary= basename($binary);
  #print "# DBG: bindir: $bindir\n";
  chdir("$bindir/..") || die "Cannot chdir to $bindir/..; $!";
  my $relbindir= basename($bindir);
  #print "# DBG: relbindir: $relbindir\n";
  my $exe= File::Spec->catfile($relbindir, $binary);
  my $syscmd= "$exe $ENV{'HVARGS'}";
  #print "# DBG: syscmd: $syscmd\n";
  (system($syscmd) == 0) || die "system($syscmd) failed: $!";
EOF  use strict;
  use File::Basename;
  use Config;
  #print "# DBG: Config{path_sep'} is $Config{'path_sep'}\n";
  my $binary= $ENV{'MYSQLD'};
  my $bindir= dirname($binary);
  $binary= basename($binary);
  chdir("$bindir/..") || die "Cannot chdir to $bindir/..; $!";
  #print "# DBG: ENV{'PATH'}=\"$bindir$Config{'path_sep'}\$ENV{'PATH'}\"\n";
  $ENV{'PATH'}="$bindir$Config{'path_sep'}$ENV{'PATH'}";
  #print "# DBG: PATH: $ENV{'PATH'}\n";
  my $syscmd= "$binary $ENV{'HVARGS'}";
  #print "# DBG: syscmd: $syscmd\n";
  (system($syscmd) == 0) || die "system($syscmd) failed: $!";
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  use File::Basename;
  use Config;
  use File::Spec;
  my $binary= $ENV{'MYSQLD'};
  #print "# DBG: binary: $binary\n";
  my $bindir= dirname($binary);
  my $binary= basename($binary);
  #print "# DBG: bindir: $bindir\n";
  chdir("$bindir/..") || die "Cannot chdir to $bindir/..; $!";
  my $relbindir= basename($bindir);
  #print "# DBG: relbindir: $relbindir\n";
  my $exe= File::Spec->catfile($relbindir, $binary);
  my $syscmd= "$exe $ENV{'HVARGS'}";
  #print "# DBG: syscmd: $syscmd\n";
  (system($syscmd) == 0) || die "system($syscmd) failed: $!";
EOF  use strict;
  use File::Basename;
  use Config;
  #print "# DBG: Config{path_sep'} is $Config{'path_sep'}\n";
  my $binary= $ENV{'MYSQLD'};
  my $bindir= dirname($binary);
  $binary= basename($binary);
  chdir("$bindir/..") || die "Cannot chdir to $bindir/..; $!";
  #print "# DBG: ENV{'PATH'}=\"$bindir$Config{'path_sep'}\$ENV{'PATH'}\"\n";
  $ENV{'PATH'}="$bindir$Config{'path_sep'}$ENV{'PATH'}";
  #print "# DBG: PATH: $ENV{'PATH'}\n";
  my $syscmd= "$binary $ENV{'HVARGS'}";
  #print "# DBG: syscmd: $syscmd\n";
  (system($syscmd) == 0) || die "system($syscmd) failed: $!";
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  use File::Basename;
  use Config;
  use File::Spec;
  my $binary= $ENV{'MYSQLD'};
  #print "# DBG: binary: $binary\n";
  my $bindir= dirname($binary);
  my $binary= basename($binary);
  #print "# DBG: bindir: $bindir\n";
  chdir("$bindir/..") || die "Cannot chdir to $bindir/..; $!";
  my $relbindir= basename($bindir);
  #print "# DBG: relbindir: $relbindir\n";
  my $exe= File::Spec->catfile($relbindir, $binary);
  my $syscmd= "$exe $ENV{'HVARGS'}";
  #print "# DBG: syscmd: $syscmd\n";
  (system($syscmd) == 0) || die "system($syscmd) failed: $!";
EOF  use strict;
  use File::Basename;
  use Config;
  #print "# DBG: Config{path_sep'} is $Config{'path_sep'}\n";
  my $binary= $ENV{'MYSQLD'};
  my $bindir= dirname($binary);
  $binary= basename($binary);
  chdir("$bindir/..") || die "Cannot chdir to $bindir/..; $!";
  #print "# DBG: ENV{'PATH'}=\"$bindir$Config{'path_sep'}\$ENV{'PATH'}\"\n";
  $ENV{'PATH'}="$bindir$Config{'path_sep'}$ENV{'PATH'}";
  #print "# DBG: PATH: $ENV{'PATH'}\n";
  my $syscmd= "$binary $ENV{'HVARGS'}";
  #print "# DBG: syscmd: $syscmd\n";
  (system($syscmd) == 0) || die "system($syscmd) failed: $!";
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  use File::Basename;
  use Config;
  use File::Spec;
  my $binary= $ENV{'MYSQLD'};
  #print "# DBG: binary: $binary\n";
  my $bindir= dirname($binary);
  my $binary= basename($binary);
  #print "# DBG: bindir: $bindir\n";
  chdir("$bindir/..") || die "Cannot chdir to $bindir/..; $!";
  my $relbindir= basename($bindir);
  #print "# DBG: relbindir: $relbindir\n";
  my $exe= File::Spec->catfile($relbindir, $binary);
  my $syscmd= "$exe $ENV{'HVARGS'}";
  #print "# DBG: syscmd: $syscmd\n";
  (system($syscmd) == 0) || die "system($syscmd) failed: $!";
EOF  use strict;
  use File::Basename;
  use Config;
  #print "# DBG: Config{path_sep'} is $Config{'path_sep'}\n";
  my $binary= $ENV{'MYSQLD'};
  my $bindir= dirname($binary);
  $binary= basename($binary);
  chdir("$bindir/..") || die "Cannot chdir to $bindir/..; $!";
  #print "# DBG: ENV{'PATH'}=\"$bindir$Config{'path_sep'}\$ENV{'PATH'}\"\n";
  $ENV{'PATH'}="$bindir$Config{'path_sep'}$ENV{'PATH'}";
  #print "# DBG: PATH: $ENV{'PATH'}\n";
  my $syscmd= "$binary $ENV{'HVARGS'}";
  #print "# DBG: syscmd: $syscmd\n";
  (system($syscmd) == 0) || die "system($syscmd) failed: $!";
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  use File::Basename;
  use Config;
  use File::Spec;
  my $binary= $ENV{'MYSQLD'};
  #print "# DBG: binary: $binary\n";
  my $bindir= dirname($binary);
  my $binary= basename($binary);
  #print "# DBG: bindir: $bindir\n";
  chdir("$bindir/..") || die "Cannot chdir to $bindir/..; $!";
  my $relbindir= basename($bindir);
  #print "# DBG: relbindir: $relbindir\n";
  my $exe= File::Spec->catfile($relbindir, $binary);
  my $syscmd= "$exe $ENV{'HVARGS'}";
  #print "# DBG: syscmd: $syscmd\n";
  (system($syscmd) == 0) || die "system($syscmd) failed: $!";
EOF  use strict;
  use File::Basename;
  use Config;
  #print "# DBG: Config{path_sep'} is $Config{'path_sep'}\n";
  my $binary= $ENV{'MYSQLD'};
  my $bindir= dirname($binary);
  $binary= basename($binary);
  chdir("$bindir/..") || die "Cannot chdir to $bindir/..; $!";
  #print "# DBG: ENV{'PATH'}=\"$bindir$Config{'path_sep'}\$ENV{'PATH'}\"\n";
  $ENV{'PATH'}="$bindir$Config{'path_sep'}$ENV{'PATH'}";
  #print "# DBG: PATH: $ENV{'PATH'}\n";
  my $syscmd= "$binary $ENV{'HVARGS'}";
  #print "# DBG: syscmd: $syscmd\n";
  (system($syscmd) == 0) || die "system($syscmd) failed: $!";
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  #use Dumpvalue;
  #my $dumper = Dumpvalue->new;
  #$dumper->dumpValue(\%ENV);
  $_= $ENV{'MYSQLD'};
  my $in_cbd= m!/sql/! || m!/runtime_output_directory/!;
  #print "# DBG: \$in_cbd: $in_cbd\n";
  my $mysqld_out= $ENV{'HELP_VERBOSE_OUTPUT'};
  open(MYSQLD_OUT, $mysqld_out);
  while(<MYSQLD_OUT>)  {    if (/^basedir\s+(\S+)$/)    {      my $bd= $1;
      if (-d "$bd/share") {        print "# basedir looks ok\n";
        next;
      }      print "# ERROR: No share directory in basedir $bd\n";
      next;
    }    if (/^character-sets-dir\s+(\S+)$/)    {      my $csd= $1;
      if (-f "$csd/ascii.xml" || $in_cbd) {        print "# character-sets-dir is as expected\n";
        next;
      }      print "# ERROR: No ascii.xml in character-sets-dir $csd\n";
      next;
    }    if (/^lc-messages-dir\s+(\S+)$/)    {      my $lmd= $1;
      if (-d "$lmd/english") {        print "# lc-messages-dir looks ok\n";
        next;
      }      print "# ERROR: No english directory in lc-messages-dir $lmd\n";
      next;
    }    if (/^plugin-dir\s+(\S+)$/)    {      my $pd= $1;
      if (-B "$pd/auth.so" || -B "$pd/auth.dll" || $in_cbd) {        print "# plugin-dir is as expected\n";
        next;
      }      print "# ERROR: No auth dll in plugin-dir $pd\n";
      next;
    }  }  close(MYSQLD_OUT);
EOF  use strict;
  use File::Basename;
  use Config;
  use File::Spec;
  my $binary= $ENV{'MYSQLD'};
  #print "# DBG: binary: $binary\n";
  my $bindir= dirname($binary);
  my $binary= basename($binary);
  #print "# DBG: bindir: $bindir\n";
  chdir("$bindir/..") || die "Cannot chdir to $bindir/..; $!";
  my $relbindir= basename($bindir);
  #print "# DBG: relbindir: $relbindir\n";
  my $exe= File::Spec->catfile($relbindir, $binary);
  my $syscmd= "$exe $ENV{'HVARGS'}";
  #print "# DBG: syscmd: $syscmd\n";
  (system($syscmd) == 0) || die "system($syscmd) failed: $!";
EOF  use strict;
  use File::Basename;
  use Config;
  #print "# DBG: Config{path_sep'} is $Config{'path_sep'}\n";
  my $binary= $ENV{'MYSQLD'};
  my $bindir= dirname($binary);
  $binary= basename($binary);
  chdir("$bindir/..") || die "Cannot chdir to $bindir/..; $!";
  #print "# DBG: ENV{'PATH'}=\"$bindir$Config{'path_sep'}\$ENV{'PATH'}\"\n";
  $ENV{'PATH'}="$bindir$Config{'path_sep'}$ENV{'PATH'}";
  #print "# DBG: PATH: $ENV{'PATH'}\n";
  my $syscmd= "$binary $ENV{'HVARGS'}";
  #print "# DBG: syscmd: $syscmd\n";
  (system($syscmd) == 0) || die "system($syscmd) failed: $!";
EOF