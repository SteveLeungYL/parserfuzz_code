    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }        if ($add_wait_counter) {      }      while ($mysql_errno)  # Strangely enough, the server might return "Too many connections"  # while being shutdown, thus 1040 is an "allowed" error  # See BUG#36228    show session status;
  if ($mysql_errno == 1045){      }  if ($mysql_errname == ER_SECURE_TRANSPORT_REQUIRED){      }    if (!$counter)  {      }      if ( $secondary_engine_bootstrap == ON ) {            while ($secondary_engine_status == OFF) {                  if (!$counter) {              }          }        # Wait till the tables get loaded into secondary engine        my $wait_file= "$ENV{MYSQLTEST_VARDIR}/tmp/wait_until_load";
    while (-e $wait_file) {      select(undef, undef, undef, (100 / 1000));
    }    EOF  }  SHOW CHARACTER SET LIKE '%filename%';
SHOW COLLATION LIKE '%filename%';
SELECT _filename'abcd';
SELECT CONVERT(_latin1'abcd' USING filename);
SELECT CAST(_latin1'abcd' AS CHAR CHARACTER SET filename);
SET NAMES 'filename';
SET NAMES 'utf8';
SET CHARACTER_SET_CLIENT=17;
SET CHARACTER_SET_CLIENT=33;
DROP DATABASE IF EXISTS db21958734;
CREATE DATABASE db21958734 CHARACTER SET filename;
CREATE DATABASE db21958734 COLLATE filename;
CREATE DATABASE db21958734 CHARACTER SET utf8;
ALTER DATABASE db21958734 CHARACTER SET filename;
ALTER DATABASE db21958734 COLLATE filename;
ALTER DATABASE db21958734 CHARACTER SET latin1;
USE db21958734;
CREATE TABLE t1(a VARCHAR(10)) CHARACTER SET filename;
CREATE TABLE t1(a VARCHAR(10)) COLLATE filename;
CREATE TABLE t1(a VARCHAR(10) CHARACTER SET filename);
CREATE TABLE t1(a VARCHAR(10) COLLATE filename);
CREATE TABLE t1(a VARCHAR(10) CHARACTER SET utf8) CHARACTER SET latin1;
ALTER TABLE t1 CHARACTER SET filename;
ALTER TABLE t1 COLLATE filename;
ALTER TABLE t1 CHARACTER SET gbk;
ALTER TABLE t1 MODIFY a VARCHAR(10) CHARACTER SET filename;
ALTER TABLE t1 MODIFY a VARCHAR(10) COLLATE filename;
ALTER TABLE t1 MODIFY a VARCHAR(10) CHARACTER SET cp932;
DROP DATABASE db21958734;
USE test;
SET NAMES utf8mb4;
SELECT 'x' AS 'üê¨';
SELECT 'üê¨';
CREATE TABLE üê¨(a INT);
CREATE TABLE t1(üê¨ INT);
CREATE TABLE t2(a INT COMMENT "üê¨");
CREATE TABLE t3(a INT);
CREATE VIEW v1 AS SELECT 'x' AS'üê¨';
DROP TABLE üê¨;
DROP TABLE t1, t2, t3;
PREPARE stmt FROM "SELECT 'x' AS 'üê¨'";
EXECUTE stmt;
SET NAMES utf8mb3;
SELECT 'x' AS 'üê¨';
SELECT 'üê¨';
CREATE TABLE üê¨(a INT);
CREATE TABLE t1(üê¨ INT);
CREATE TABLE t2(a INT COMMENT "üê¨");
CREATE TABLE t3(a INT);
CREATE VIEW v1 AS SELECT 'x' AS'üê¨';
DROP TABLE t3;
PREPARE stmt FROM "SELECT 'x' AS 'üê¨'";
EXECUTE stmt;
SET NAMES default;
CREATE TABLE t1 (f1 CHAR(20) COLLATE binary);
SHOW CREATE TABLE t1;
DROP TABLE t1;
CREATE TABLE t1 (f1 ENUM('a') COLLATE binary);
SHOW CREATE TABLE t1;
DROP TABLE t1;
CREATE TABLE t1 (  `id` int NOT NULL AUTO_INCREMENT,  `etype` enum('a','b','c') CHARACTER SET binary COLLATE binary DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
DROP TABLE t1;
SELECT member_roleFROM performance_schema.replication_group_membersWHERE member_host = @@hostname AND member_role='PRIMARY';
    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }        if ($add_wait_counter) {      }      while ($mysql_errno)  # Strangely enough, the server might return "Too many connections"  # while being shutdown, thus 1040 is an "allowed" error  # See BUG#36228    show session status;
  if ($mysql_errno == 1045){      }  if ($mysql_errname == ER_SECURE_TRANSPORT_REQUIRED){      }    if (!$counter)  {      }      if ( $secondary_engine_bootstrap == ON ) {            while ($secondary_engine_status == OFF) {                  if (!$counter) {              }          }        # Wait till the tables get loaded into secondary engine        my $wait_file= "$ENV{MYSQLTEST_VARDIR}/tmp/wait_until_load";
    while (-e $wait_file) {      select(undef, undef, undef, (100 / 1000));
    }    EOF  }  SHOW CHARACTER SET LIKE '%filename%';
SHOW COLLATION LIKE '%filename%';
SELECT _filename'abcd';
SELECT CONVERT(_latin1'abcd' USING filename);
SELECT CAST(_latin1'abcd' AS CHAR CHARACTER SET filename);
SET NAMES 'filename';
SET NAMES 'utf8';
SET CHARACTER_SET_CLIENT=17;
SET CHARACTER_SET_CLIENT=33;
DROP DATABASE IF EXISTS db21958734;
CREATE DATABASE db21958734 CHARACTER SET filename;
CREATE DATABASE db21958734 COLLATE filename;
CREATE DATABASE db21958734 CHARACTER SET utf8;
ALTER DATABASE db21958734 CHARACTER SET filename;
ALTER DATABASE db21958734 COLLATE filename;
ALTER DATABASE db21958734 CHARACTER SET latin1;
USE db21958734;
CREATE TABLE t1(a VARCHAR(10)) CHARACTER SET filename;
CREATE TABLE t1(a VARCHAR(10)) COLLATE filename;
CREATE TABLE t1(a VARCHAR(10) CHARACTER SET filename);
CREATE TABLE t1(a VARCHAR(10) COLLATE filename);
CREATE TABLE t1(a VARCHAR(10) CHARACTER SET utf8) CHARACTER SET latin1;
ALTER TABLE t1 CHARACTER SET filename;
ALTER TABLE t1 COLLATE filename;
ALTER TABLE t1 CHARACTER SET gbk;
ALTER TABLE t1 MODIFY a VARCHAR(10) CHARACTER SET filename;
ALTER TABLE t1 MODIFY a VARCHAR(10) COLLATE filename;
ALTER TABLE t1 MODIFY a VARCHAR(10) CHARACTER SET cp932;
DROP DATABASE db21958734;
USE test;
SET NAMES utf8mb4;
SELECT 'x' AS 'üê¨';
SELECT 'üê¨';
CREATE TABLE üê¨(a INT);
CREATE TABLE t1(üê¨ INT);
CREATE TABLE t2(a INT COMMENT "üê¨");
CREATE TABLE t3(a INT);
CREATE VIEW v1 AS SELECT 'x' AS'üê¨';
DROP TABLE üê¨;
DROP TABLE t1, t2, t3;
PREPARE stmt FROM "SELECT 'x' AS 'üê¨'";
EXECUTE stmt;
SET NAMES utf8mb3;
SELECT 'x' AS 'üê¨';
SELECT 'üê¨';
CREATE TABLE üê¨(a INT);
CREATE TABLE t1(üê¨ INT);
CREATE TABLE t2(a INT COMMENT "üê¨");
CREATE TABLE t3(a INT);
CREATE VIEW v1 AS SELECT 'x' AS'üê¨';
DROP TABLE t3;
PREPARE stmt FROM "SELECT 'x' AS 'üê¨'";
EXECUTE stmt;
SET NAMES default;
CREATE TABLE t1 (f1 CHAR(20) COLLATE binary);
SHOW CREATE TABLE t1;
DROP TABLE t1;
CREATE TABLE t1 (f1 ENUM('a') COLLATE binary);
SHOW CREATE TABLE t1;
DROP TABLE t1;
CREATE TABLE t1 (  `id` int NOT NULL AUTO_INCREMENT,  `etype` enum('a','b','c') CHARACTER SET binary COLLATE binary DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
DROP TABLE t1;
SELECT member_roleFROM performance_schema.replication_group_membersWHERE member_host = @@hostname AND member_role='PRIMARY';
    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }        if ($add_wait_counter) {      }      while ($mysql_errno)  # Strangely enough, the server might return "Too many connections"  # while being shutdown, thus 1040 is an "allowed" error  # See BUG#36228    show session status;
  if ($mysql_errno == 1045){      }  if ($mysql_errname == ER_SECURE_TRANSPORT_REQUIRED){      }    if (!$counter)  {      }      if ( $secondary_engine_bootstrap == ON ) {            while ($secondary_engine_status == OFF) {                  if (!$counter) {              }          }        # Wait till the tables get loaded into secondary engine        my $wait_file= "$ENV{MYSQLTEST_VARDIR}/tmp/wait_until_load";
    while (-e $wait_file) {      select(undef, undef, undef, (100 / 1000));
    }    EOF  }  SHOW CHARACTER SET LIKE '%filename%';
SHOW COLLATION LIKE '%filename%';
SELECT _filename'abcd';
SELECT CONVERT(_latin1'abcd' USING filename);
SELECT CAST(_latin1'abcd' AS CHAR CHARACTER SET filename);
SET NAMES 'filename';
SET NAMES 'utf8';
SET CHARACTER_SET_CLIENT=17;
SET CHARACTER_SET_CLIENT=33;
DROP DATABASE IF EXISTS db21958734;
CREATE DATABASE db21958734 CHARACTER SET filename;
CREATE DATABASE db21958734 COLLATE filename;
CREATE DATABASE db21958734 CHARACTER SET utf8;
ALTER DATABASE db21958734 CHARACTER SET filename;
ALTER DATABASE db21958734 COLLATE filename;
ALTER DATABASE db21958734 CHARACTER SET latin1;
USE db21958734;
CREATE TABLE t1(a VARCHAR(10)) CHARACTER SET filename;
CREATE TABLE t1(a VARCHAR(10)) COLLATE filename;
CREATE TABLE t1(a VARCHAR(10) CHARACTER SET filename);
CREATE TABLE t1(a VARCHAR(10) COLLATE filename);
CREATE TABLE t1(a VARCHAR(10) CHARACTER SET utf8) CHARACTER SET latin1;
ALTER TABLE t1 CHARACTER SET filename;
ALTER TABLE t1 COLLATE filename;
ALTER TABLE t1 CHARACTER SET gbk;
ALTER TABLE t1 MODIFY a VARCHAR(10) CHARACTER SET filename;
ALTER TABLE t1 MODIFY a VARCHAR(10) COLLATE filename;
ALTER TABLE t1 MODIFY a VARCHAR(10) CHARACTER SET cp932;
DROP DATABASE db21958734;
USE test;
SET NAMES utf8mb4;
SELECT 'x' AS 'üê¨';
SELECT 'üê¨';
CREATE TABLE üê¨(a INT);
CREATE TABLE t1(üê¨ INT);
CREATE TABLE t2(a INT COMMENT "üê¨");
CREATE TABLE t3(a INT);
CREATE VIEW v1 AS SELECT 'x' AS'üê¨';
DROP TABLE üê¨;
DROP TABLE t1, t2, t3;
PREPARE stmt FROM "SELECT 'x' AS 'üê¨'";
EXECUTE stmt;
SET NAMES utf8mb3;
SELECT 'x' AS 'üê¨';
SELECT 'üê¨';
CREATE TABLE üê¨(a INT);
CREATE TABLE t1(üê¨ INT);
CREATE TABLE t2(a INT COMMENT "üê¨");
CREATE TABLE t3(a INT);
CREATE VIEW v1 AS SELECT 'x' AS'üê¨';
DROP TABLE t3;
PREPARE stmt FROM "SELECT 'x' AS 'üê¨'";
EXECUTE stmt;
SET NAMES default;
CREATE TABLE t1 (f1 CHAR(20) COLLATE binary);
SHOW CREATE TABLE t1;
DROP TABLE t1;
CREATE TABLE t1 (f1 ENUM('a') COLLATE binary);
SHOW CREATE TABLE t1;
DROP TABLE t1;
CREATE TABLE t1 (  `id` int NOT NULL AUTO_INCREMENT,  `etype` enum('a','b','c') CHARACTER SET binary COLLATE binary DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
DROP TABLE t1;
SELECT member_roleFROM performance_schema.replication_group_membersWHERE member_host = @@hostname AND member_role='PRIMARY';
    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }        if ($add_wait_counter) {      }      while ($mysql_errno)  # Strangely enough, the server might return "Too many connections"  # while being shutdown, thus 1040 is an "allowed" error  # See BUG#36228    show session status;
  if ($mysql_errno == 1045){      }  if ($mysql_errname == ER_SECURE_TRANSPORT_REQUIRED){      }    if (!$counter)  {      }      if ( $secondary_engine_bootstrap == ON ) {            while ($secondary_engine_status == OFF) {                  if (!$counter) {              }          }        # Wait till the tables get loaded into secondary engine        my $wait_file= "$ENV{MYSQLTEST_VARDIR}/tmp/wait_until_load";
    while (-e $wait_file) {      select(undef, undef, undef, (100 / 1000));
    }    EOF  }  SHOW CHARACTER SET LIKE '%filename%';
SHOW COLLATION LIKE '%filename%';
SELECT _filename'abcd';
SELECT CONVERT(_latin1'abcd' USING filename);
SELECT CAST(_latin1'abcd' AS CHAR CHARACTER SET filename);
SET NAMES 'filename';
SET NAMES 'utf8';
SET CHARACTER_SET_CLIENT=17;
SET CHARACTER_SET_CLIENT=33;
DROP DATABASE IF EXISTS db21958734;
CREATE DATABASE db21958734 CHARACTER SET filename;
CREATE DATABASE db21958734 COLLATE filename;
CREATE DATABASE db21958734 CHARACTER SET utf8;
ALTER DATABASE db21958734 CHARACTER SET filename;
ALTER DATABASE db21958734 COLLATE filename;
ALTER DATABASE db21958734 CHARACTER SET latin1;
USE db21958734;
CREATE TABLE t1(a VARCHAR(10)) CHARACTER SET filename;
CREATE TABLE t1(a VARCHAR(10)) COLLATE filename;
CREATE TABLE t1(a VARCHAR(10) CHARACTER SET filename);
CREATE TABLE t1(a VARCHAR(10) COLLATE filename);
CREATE TABLE t1(a VARCHAR(10) CHARACTER SET utf8) CHARACTER SET latin1;
ALTER TABLE t1 CHARACTER SET filename;
ALTER TABLE t1 COLLATE filename;
ALTER TABLE t1 CHARACTER SET gbk;
ALTER TABLE t1 MODIFY a VARCHAR(10) CHARACTER SET filename;
ALTER TABLE t1 MODIFY a VARCHAR(10) COLLATE filename;
ALTER TABLE t1 MODIFY a VARCHAR(10) CHARACTER SET cp932;
DROP DATABASE db21958734;
USE test;
SET NAMES utf8mb4;
SELECT 'x' AS 'üê¨';
SELECT 'üê¨';
CREATE TABLE üê¨(a INT);
CREATE TABLE t1(üê¨ INT);
CREATE TABLE t2(a INT COMMENT "üê¨");
CREATE TABLE t3(a INT);
CREATE VIEW v1 AS SELECT 'x' AS'üê¨';
DROP TABLE üê¨;
DROP TABLE t1, t2, t3;
PREPARE stmt FROM "SELECT 'x' AS 'üê¨'";
EXECUTE stmt;
SET NAMES utf8mb3;
SELECT 'x' AS 'üê¨';
SELECT 'üê¨';
CREATE TABLE üê¨(a INT);
CREATE TABLE t1(üê¨ INT);
CREATE TABLE t2(a INT COMMENT "üê¨");
CREATE TABLE t3(a INT);
CREATE VIEW v1 AS SELECT 'x' AS'üê¨';
DROP TABLE t3;
PREPARE stmt FROM "SELECT 'x' AS 'üê¨'";
EXECUTE stmt;
SET NAMES default;
CREATE TABLE t1 (f1 CHAR(20) COLLATE binary);
SHOW CREATE TABLE t1;
DROP TABLE t1;
CREATE TABLE t1 (f1 ENUM('a') COLLATE binary);
SHOW CREATE TABLE t1;
DROP TABLE t1;
CREATE TABLE t1 (  `id` int NOT NULL AUTO_INCREMENT,  `etype` enum('a','b','c') CHARACTER SET binary COLLATE binary DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
DROP TABLE t1;
SELECT member_roleFROM performance_schema.replication_group_membersWHERE member_host = @@hostname AND member_role='PRIMARY';
    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }        let $counter = `SELECT $disconnect_timeout * 10`;
while (!$mysql_errno)    show session status;
  dec $counter;
  if (!$counter)  {    if ($show_rpl_debug_info)    {          }      }        if ($add_wait_counter) {      }      while ($mysql_errno)  # Strangely enough, the server might return "Too many connections"  # while being shutdown, thus 1040 is an "allowed" error  # See BUG#36228    show session status;
  if ($mysql_errno == 1045){      }  if ($mysql_errname == ER_SECURE_TRANSPORT_REQUIRED){      }    if (!$counter)  {      }      if ( $secondary_engine_bootstrap == ON ) {            while ($secondary_engine_status == OFF) {                  if (!$counter) {              }          }        # Wait till the tables get loaded into secondary engine        my $wait_file= "$ENV{MYSQLTEST_VARDIR}/tmp/wait_until_load";
    while (-e $wait_file) {      select(undef, undef, undef, (100 / 1000));
    }    EOF  }  SHOW CHARACTER SET LIKE '%filename%';
SHOW COLLATION LIKE '%filename%';
SELECT _filename'abcd';
SELECT CONVERT(_latin1'abcd' USING filename);
SELECT CAST(_latin1'abcd' AS CHAR CHARACTER SET filename);
SET NAMES 'filename';
SET NAMES 'utf8';
SET CHARACTER_SET_CLIENT=17;
SET CHARACTER_SET_CLIENT=33;
DROP DATABASE IF EXISTS db21958734;
CREATE DATABASE db21958734 CHARACTER SET filename;
CREATE DATABASE db21958734 COLLATE filename;
CREATE DATABASE db21958734 CHARACTER SET utf8;
ALTER DATABASE db21958734 CHARACTER SET filename;
ALTER DATABASE db21958734 COLLATE filename;
ALTER DATABASE db21958734 CHARACTER SET latin1;
USE db21958734;
CREATE TABLE t1(a VARCHAR(10)) CHARACTER SET filename;
CREATE TABLE t1(a VARCHAR(10)) COLLATE filename;
CREATE TABLE t1(a VARCHAR(10) CHARACTER SET filename);
CREATE TABLE t1(a VARCHAR(10) COLLATE filename);
CREATE TABLE t1(a VARCHAR(10) CHARACTER SET utf8) CHARACTER SET latin1;
ALTER TABLE t1 CHARACTER SET filename;
ALTER TABLE t1 COLLATE filename;
ALTER TABLE t1 CHARACTER SET gbk;
ALTER TABLE t1 MODIFY a VARCHAR(10) CHARACTER SET filename;
ALTER TABLE t1 MODIFY a VARCHAR(10) COLLATE filename;
ALTER TABLE t1 MODIFY a VARCHAR(10) CHARACTER SET cp932;
DROP DATABASE db21958734;
USE test;
SET NAMES utf8mb4;
SELECT 'x' AS 'üê¨';
SELECT 'üê¨';
CREATE TABLE üê¨(a INT);
CREATE TABLE t1(üê¨ INT);
CREATE TABLE t2(a INT COMMENT "üê¨");
CREATE TABLE t3(a INT);
CREATE VIEW v1 AS SELECT 'x' AS'üê¨';
DROP TABLE üê¨;
DROP TABLE t1, t2, t3;
PREPARE stmt FROM "SELECT 'x' AS 'üê¨'";
EXECUTE stmt;
SET NAMES utf8mb3;
SELECT 'x' AS 'üê¨';
SELECT 'üê¨';
CREATE TABLE üê¨(a INT);
CREATE TABLE t1(üê¨ INT);
CREATE TABLE t2(a INT COMMENT "üê¨");
CREATE TABLE t3(a INT);
CREATE VIEW v1 AS SELECT 'x' AS'üê¨';
DROP TABLE t3;
PREPARE stmt FROM "SELECT 'x' AS 'üê¨'";
EXECUTE stmt;
SET NAMES default;
CREATE TABLE t1 (f1 CHAR(20) COLLATE binary);
SHOW CREATE TABLE t1;
DROP TABLE t1;
CREATE TABLE t1 (f1 ENUM('a') COLLATE binary);
SHOW CREATE TABLE t1;
DROP TABLE t1;
CREATE TABLE t1 (  `id` int NOT NULL AUTO_INCREMENT,  `etype` enum('a','b','c') CHARACTER SET binary COLLATE binary DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
DROP TABLE t1;
SELECT member_roleFROM performance_schema.replication_group_membersWHERE member_host = @@hostname AND member_role='PRIMARY';
