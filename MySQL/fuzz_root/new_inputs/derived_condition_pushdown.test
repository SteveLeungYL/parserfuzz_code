CREATE TABLE t0 (  i0 INTEGER);
INSERT INTO t0 VALUES (0),(1),(2),(3),(4);
CREATE TABLE t1 (f1 INTEGER, f2 INTEGER, f3 INTEGER,                 KEY(f1), KEY(f1,f2), KEY(f3));
INSERT INTO t1SELECT i0, i0 + 10*i0,       i0 + 10*i0 + 100*i0FROM t0 AS a0;
INSERT INTO t1SELECT i0, i0 + 10*i0,       i0 + 10*i0 + 100*i0FROM t0 AS a0;
INSERT INTO t1 VALUES (NULL, 1, 2);
INSERT INTO t1 VALUES (NULL, 1, 3);
SET optimizer_switch="derived_merge=off,derived_condition_pushdown=on";
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 < 3 and f2 > 11;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 2 and f2 < 25 and f3 > 200;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3 and f2 < 50 or f3 > 200;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            (SELECT f1, f2, f3 FROM t1) as dt            WHERE (dt.f1 = 6) or( t1.f2 = 50 and dt.f3 = 200);
eval EXPLAIN FORMAT=tree $query;
eval $query;
            (SELECT f1, f2, f3 FROM t1) as dt, t0            WHERE f1 > 3 and f2 < 50 and i0 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3 and f2 < 50 and f3 > 200;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE (f1 > 2 and f2 < 35) or (f1+f3) > 300 or (f1 < 2);
eval EXPLAIN FORMAT=tree $query;
eval $query;
                          (SELECT f3 FROM t1) as dt2                          WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300                          and (f3 < 400);
eval EXPLAIN FORMAT=tree $query;
eval $query;
                                         (SELECT f3 FROM t1) as dt2) as dt3                          WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 200 and (f3 < 300);
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE i > 1 and i+j > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT l as i, m as j, n as k                  FROM (SELECT f1 as l, f2 as m, f3 as n                        FROM t1) as dt1 ) as dt2            WHERE i > 1 and i+j > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
           FROM (SELECT f1 as i, f2 as j FROM t1 ) as dt1 ,                (SELECT f1 as l, f2 as m, f3 as n FROM t1) as dt2           WHERE i > 1 and i+j > 40 and m < 20 and m+i > 20;
eval EXPLAIN FORMAT=tree $query;
eval $query;
(SELECT (i+j) AS g, f1 FROM (SELECT (f1+f2) AS i, (f1-f2) AS j FROM  (SELECT f1+10 AS f1, f2+10 AS f2 FROM t1) AS dt0) AS dt1, (SELECT f1, f2 FROM t1) AS dt2) AS dt3 WHERE g > 26 and g+f1 > 31;
eval EXPLAIN FORMAT=tree $query;
eval $query;
                               (SELECT (f1+f2) as i, (f3+10) as j FROM t1) as                               dt1) as dt2 WHERE l > 20 and l+m > 10 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
eval EXPLAIN FORMAT=tree $query;
eval $query;
                           FROM (SELECT f1+f2 as j                                 FROM t1) as dt1(k)) as dt(m)            WHERE m > 30;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1+f2 > 30;
eval EXPLAIN FORMAT=tree $query;
eval $query;
           FROM (SELECT f1, SUM(f2) FROM t1 GROUP BY f1 WITH ROLLUP) as dt           WHERE f1 IS NULL;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1 as j, SUM(f2) as sum                  FROM t1 GROUP BY f1 WITH ROLLUP) as dt WHERE j+sum > 50 OR            j IS NULL;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1 as j, SUM(f2) as sum                  FROM t1 GROUP BY f1 WITH ROLLUP                  HAVING AVG(f2) > 1) AS dt WHERE j+sum > 50 OR            j IS NULL;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 0 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set sql_mode="";
            WHERE f1 > 2;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f2) OVER(PARTITION BY f1)                  FROM t1 GROUP BY f1) as dt WHERE f1 > 2;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f2)                  FROM t1 GROUP BY f1) as dt WHERE f2 > 30;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1)                  FROM t1 GROUP BY f1) as dt            WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2)                  FROM t1 GROUP BY f1) as dt            WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2),                  AVG(f3) OVER (PARTITION BY f1)                  FROM t1 GROUP BY f1) as dt            WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f2) as SUM, AVG(f3) OVER (PARTITION BY SUM(f2))                  FROM t1 GROUP BY f1) as dt            WHERE SUM > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f2) OVER (PARTITION by f1,f2),                  AVG(f3) OVER (PARTITION BY f2,f1),                  FIRST_VALUE(f3) OVER (PARTITION by f1)                  FROM t1) as dt            WHERE f1 > 2 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f1) OVER (PARTITION by f2),                  AVG(f2) OVER (PARTITION BY f1)                  FROM t1) as dt            WHERE f1 > 2 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set sql_mode=default;
            FROM (SELECT f1 FROM t1) as dt WHERE f1 > ?;
SET @p1 = 3;
eval PREPARE p FROM "$query";
eval EXECUTE p USING @p1;
eval PREPARE p FROM "EXPLAIN FORMAT=tree $query";
eval EXECUTE p USING @p1;
DROP PREPARE p;
                               (SELECT (f1+f2) as i, (f3+?) as j FROM t1) as                               dt1) as dt2 WHERE l > 20 and l+m > 10 ;
SET @p1 = 10;
eval PREPARE p FROM "$query";
eval EXECUTE p USING @p1;
eval PREPARE p FROM "EXPLAIN FORMAT=tree $query";
eval EXECUTE p USING @p1;
            WHERE a > 0.5;
eval EXPLAIN FORMAT=tree $query;
            WHERE f1 > 3*RAND() AND f1 < 10;
eval EXPLAIN FORMAT=tree $query;
            (SELECT f1, SUM(f2) OVER(PARTITION BY f1) FROM t1) as dt            WHERE f1 > 3*RAND() AND f1 < 10;
eval EXPLAIN FORMAT=tree $query;
            (SELECT f1 FROM t1) as dt            WHERE f1 > 3*RAND() AND f1<10;
eval EXPLAIN FORMAT=tree $query;
            FROM (SELECT f1 FROM t1 UNION SELECT f2 FROM t1) as dt            WHERE f1 > 2;
eval EXPLAIN FORMAT=tree $query;
eval $query;
(SELECT (SELECT 1 FROM t1 LIMIT 1) as f1 FROM t1) as dt WHERE f1 = 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
DELIMITER |;
CREATE FUNCTION p() RETURNS INTEGERBEGIN  DECLARE retn INTEGER;
  SELECT count(f1) FROM t1 INTO retn;
  RETURN retn;
END|DELIMITER ;|            WHERE p() = 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
DROP FUNCTION p;
DELIMITER |;
CREATE FUNCTION p() RETURNS INTEGER DETERMINISTICBEGIN  DECLARE retn INTEGER;
  SELECT count(f1) FROM t1 INTO retn;
  RETURN retn;
END|DELIMITER ;|eval EXPLAIN FORMAT=tree $query;
eval $query;
DROP FUNCTION p;
DELIMITER |;
CREATE PROCEDURE p()BEGIN  DECLARE val INTEGER;
  SET val = 2;
  EXPLAIN FORMAT=tree SELECT AVG(f1) FROM (SELECT * FROM t1) as dt  WHERE f2 > val;
  SELECT AVG(f1) FROM (SELECT * FROM t1) as dt WHERE f2 > val;
END|DELIMITER ;|CALL p();
DROP PROCEDURE p;
qn2 AS (SELECT 3*f1 AS f2 FROM qn)SELECT * from qn2)) as dt WHERE f2 > 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
qn2 AS (SELECT 3*f1 AS f2 FROM qn)SELECT * from qn,qn2)) as dt WHERE f1 < 10 and f2 > 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE dt.f1 > 31 and t1.f2  > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE dt.f1 is null;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE dt.f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            LEFT JOIN t1 AS t2 ON TRUE) AS dt ON dt.f1 > 3;
eval EXPLAIN FORMAT = tree $query;
set optimizer_switch="derived_merge=on";
                                          FROM t1 GROUP BY f1) as dt1                           WHERE f1 > 10) dt2 WHERE sum > 10;
eval EXPLAIN FORMAT=tree $query;
eval $query;
                           FROM (SELECT f1, f2 FROM t1 WHERE f1 > 10) as dt1                           GROUP BY f1) dt2 WHERE sum > 10;
eval EXPLAIN FORMAT=tree $query;
eval $query;
SELECT * FROM (SELECT f1 FROM (SELECT f1 FROM t1) AS dt1 GROUP BY f1) AS dt2 WHERE f1 > 3;
SELECT * FROM (SELECT dt1.f1 FROM (SELECT f1 FROM t1) AS dt1, t1 AS t0  GROUP BY dt1.f1) AS dt2WHERE dt2.f1 > 3;
((SELECT f1, f2 FROM t1) as dt, (SELECT f1, f2 FROM t1) as dt1) WHERE FALSE;
eval EXPLAIN $query;
eval $query;
set optimizer_switch="derived_merge=off";
(SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
(SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set optimizer_switch="derived_condition_pushdown=off";
(SELECT /*+ NO_DERIVED_CONDITION_PUSHDOWN(dt1) */ * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set optimizer_switch=default;
SELECT f1 FROM (SELECT DISTINCT * FROM t1 WHERE f2 = 4) AS alias1WHERE ( alias1 . f1 = 24 AND alias1 . f3 = 101 );
SELECT f1 FROM (SELECT DISTINCT * FROM t1 WHERE f2 = 4) AS alias1WHERE ( alias1 . f1 BETWEEN 24 AND 30 AND alias1 . f3 BETWEEN 101 and 103);
DROP TABLE t0, t1;
CREATE TABLE t(f0 INTEGER PRIMARY KEY, f1 INTEGER,f2 INTEGER);
SELECT NULL IN(SELECT (f1 between 0 and 1) FROM (SELECT f1 FROM t WHERE  (@b:=NULL) - f2)as dt);
DROP TABLE t;
set optimizer_switch="derived_merge=off";
SELECT 1 FROM information_schema.tables WHERE 123 IN (CONCAT_WS(TABLE_ROWS, ''));
set optimizer_switch="derived_merge=on";
CREATE TABLE t1(g INTEGER);
SELECT w.g FROM t1 INNER JOIN (SELECT g, ROW_NUMBER() OVER (PARTITION BY g) AS r FROM t1) w ON w.g=t1.g AND w.r=1 WHERE w.g IS NULL;
DROP TABLE t1;
CREATE TABLE t(f1 INTEGER);
EXPLAIN SELECT a1, a2 FROM (SELECT MAX(2) AS a1 FROM t) as dt1, (SELECT @a AS a2 FROM t) as dt2 WHERE dt1.a1 <= dt2.a2;
SELECT a1, a2 FROM (SELECT MAX(f1) AS a1 FROM t) as dt1, (SELECT @a AS a2 FROM t) as dt2 WHERE dt1.a1 <= dt2.a2;
DROP TABLE t;
CREATE TABLE t(f1 INTEGER);
CREATE ALGORITHM=temptable VIEW v AS SELECT f1 FROM t;
SELECT f1 FROM (SELECT f1 FROM v) AS dt1 NATURAL JOIN v dt2 WHERE f1 > 5;
DROP TABLE t;
DROP VIEW v;
CREATE TABLE t1(f1 INTEGER, KEY(f1));
CREATE TABLE t2(f1 INTEGER);
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
CREATE ALGORITHM=temptable VIEW v AS SELECT f1 FROM t1;
EXPLAIN format=tree INSERT INTO t2 SELECT * FROM v WHERE f1=2;
INSERT INTO t2 SELECT * FROM v WHERE f1=2;
EXPLAIN format=tree UPDATE t2 SET f1=3 WHERE f1 IN (SELECT f1 FROM v WHERE f1=2);
UPDATE t2 SET f1=3 WHERE f1 IN (SELECT f1 FROM v WHERE f1=2);
EXPLAIN format=tree DELETE FROM t2 WHERE f1 IN (SELECT f1 FROM v WHERE f1=3);
DELETE FROM t2 WHERE f1 IN (SELECT f1 FROM v WHERE f1=3);
DROP TABLE t1;
DROP TABLE t2;
DROp VIEW v;
CREATE TABLE t0 (  i0 INTEGER);
INSERT INTO t0 VALUES (0),(1),(2),(3),(4);
CREATE TABLE t1 (f1 INTEGER, f2 INTEGER, f3 INTEGER,                 KEY(f1), KEY(f1,f2), KEY(f3));
INSERT INTO t1SELECT i0, i0 + 10*i0,       i0 + 10*i0 + 100*i0FROM t0 AS a0;
INSERT INTO t1SELECT i0, i0 + 10*i0,       i0 + 10*i0 + 100*i0FROM t0 AS a0;
INSERT INTO t1 VALUES (NULL, 1, 2);
INSERT INTO t1 VALUES (NULL, 1, 3);
SET optimizer_switch="derived_merge=off,derived_condition_pushdown=on";
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 < 3 and f2 > 11;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 2 and f2 < 25 and f3 > 200;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3 and f2 < 50 or f3 > 200;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            (SELECT f1, f2, f3 FROM t1) as dt            WHERE (dt.f1 = 6) or( t1.f2 = 50 and dt.f3 = 200);
eval EXPLAIN FORMAT=tree $query;
eval $query;
            (SELECT f1, f2, f3 FROM t1) as dt, t0            WHERE f1 > 3 and f2 < 50 and i0 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3 and f2 < 50 and f3 > 200;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE (f1 > 2 and f2 < 35) or (f1+f3) > 300 or (f1 < 2);
eval EXPLAIN FORMAT=tree $query;
eval $query;
                          (SELECT f3 FROM t1) as dt2                          WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300                          and (f3 < 400);
eval EXPLAIN FORMAT=tree $query;
eval $query;
                                         (SELECT f3 FROM t1) as dt2) as dt3                          WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 200 and (f3 < 300);
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE i > 1 and i+j > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT l as i, m as j, n as k                  FROM (SELECT f1 as l, f2 as m, f3 as n                        FROM t1) as dt1 ) as dt2            WHERE i > 1 and i+j > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
           FROM (SELECT f1 as i, f2 as j FROM t1 ) as dt1 ,                (SELECT f1 as l, f2 as m, f3 as n FROM t1) as dt2           WHERE i > 1 and i+j > 40 and m < 20 and m+i > 20;
eval EXPLAIN FORMAT=tree $query;
eval $query;
(SELECT (i+j) AS g, f1 FROM (SELECT (f1+f2) AS i, (f1-f2) AS j FROM  (SELECT f1+10 AS f1, f2+10 AS f2 FROM t1) AS dt0) AS dt1, (SELECT f1, f2 FROM t1) AS dt2) AS dt3 WHERE g > 26 and g+f1 > 31;
eval EXPLAIN FORMAT=tree $query;
eval $query;
                               (SELECT (f1+f2) as i, (f3+10) as j FROM t1) as                               dt1) as dt2 WHERE l > 20 and l+m > 10 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
eval EXPLAIN FORMAT=tree $query;
eval $query;
                           FROM (SELECT f1+f2 as j                                 FROM t1) as dt1(k)) as dt(m)            WHERE m > 30;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1+f2 > 30;
eval EXPLAIN FORMAT=tree $query;
eval $query;
           FROM (SELECT f1, SUM(f2) FROM t1 GROUP BY f1 WITH ROLLUP) as dt           WHERE f1 IS NULL;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1 as j, SUM(f2) as sum                  FROM t1 GROUP BY f1 WITH ROLLUP) as dt WHERE j+sum > 50 OR            j IS NULL;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1 as j, SUM(f2) as sum                  FROM t1 GROUP BY f1 WITH ROLLUP                  HAVING AVG(f2) > 1) AS dt WHERE j+sum > 50 OR            j IS NULL;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 0 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set sql_mode="";
            WHERE f1 > 2;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f2) OVER(PARTITION BY f1)                  FROM t1 GROUP BY f1) as dt WHERE f1 > 2;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f2)                  FROM t1 GROUP BY f1) as dt WHERE f2 > 30;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1)                  FROM t1 GROUP BY f1) as dt            WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2)                  FROM t1 GROUP BY f1) as dt            WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2),                  AVG(f3) OVER (PARTITION BY f1)                  FROM t1 GROUP BY f1) as dt            WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f2) as SUM, AVG(f3) OVER (PARTITION BY SUM(f2))                  FROM t1 GROUP BY f1) as dt            WHERE SUM > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f2) OVER (PARTITION by f1,f2),                  AVG(f3) OVER (PARTITION BY f2,f1),                  FIRST_VALUE(f3) OVER (PARTITION by f1)                  FROM t1) as dt            WHERE f1 > 2 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f1) OVER (PARTITION by f2),                  AVG(f2) OVER (PARTITION BY f1)                  FROM t1) as dt            WHERE f1 > 2 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set sql_mode=default;
            FROM (SELECT f1 FROM t1) as dt WHERE f1 > ?;
SET @p1 = 3;
eval PREPARE p FROM "$query";
eval EXECUTE p USING @p1;
eval PREPARE p FROM "EXPLAIN FORMAT=tree $query";
eval EXECUTE p USING @p1;
DROP PREPARE p;
                               (SELECT (f1+f2) as i, (f3+?) as j FROM t1) as                               dt1) as dt2 WHERE l > 20 and l+m > 10 ;
SET @p1 = 10;
eval PREPARE p FROM "$query";
eval EXECUTE p USING @p1;
eval PREPARE p FROM "EXPLAIN FORMAT=tree $query";
eval EXECUTE p USING @p1;
            WHERE a > 0.5;
eval EXPLAIN FORMAT=tree $query;
            WHERE f1 > 3*RAND() AND f1 < 10;
eval EXPLAIN FORMAT=tree $query;
            (SELECT f1, SUM(f2) OVER(PARTITION BY f1) FROM t1) as dt            WHERE f1 > 3*RAND() AND f1 < 10;
eval EXPLAIN FORMAT=tree $query;
            (SELECT f1 FROM t1) as dt            WHERE f1 > 3*RAND() AND f1<10;
eval EXPLAIN FORMAT=tree $query;
            FROM (SELECT f1 FROM t1 UNION SELECT f2 FROM t1) as dt            WHERE f1 > 2;
eval EXPLAIN FORMAT=tree $query;
eval $query;
(SELECT (SELECT 1 FROM t1 LIMIT 1) as f1 FROM t1) as dt WHERE f1 = 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
DELIMITER |;
CREATE FUNCTION p() RETURNS INTEGERBEGIN  DECLARE retn INTEGER;
  SELECT count(f1) FROM t1 INTO retn;
  RETURN retn;
END|DELIMITER ;|            WHERE p() = 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
DROP FUNCTION p;
DELIMITER |;
CREATE FUNCTION p() RETURNS INTEGER DETERMINISTICBEGIN  DECLARE retn INTEGER;
  SELECT count(f1) FROM t1 INTO retn;
  RETURN retn;
END|DELIMITER ;|eval EXPLAIN FORMAT=tree $query;
eval $query;
DROP FUNCTION p;
DELIMITER |;
CREATE PROCEDURE p()BEGIN  DECLARE val INTEGER;
  SET val = 2;
  EXPLAIN FORMAT=tree SELECT AVG(f1) FROM (SELECT * FROM t1) as dt  WHERE f2 > val;
  SELECT AVG(f1) FROM (SELECT * FROM t1) as dt WHERE f2 > val;
END|DELIMITER ;|CALL p();
DROP PROCEDURE p;
qn2 AS (SELECT 3*f1 AS f2 FROM qn)SELECT * from qn2)) as dt WHERE f2 > 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
qn2 AS (SELECT 3*f1 AS f2 FROM qn)SELECT * from qn,qn2)) as dt WHERE f1 < 10 and f2 > 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE dt.f1 > 31 and t1.f2  > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE dt.f1 is null;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE dt.f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            LEFT JOIN t1 AS t2 ON TRUE) AS dt ON dt.f1 > 3;
eval EXPLAIN FORMAT = tree $query;
set optimizer_switch="derived_merge=on";
                                          FROM t1 GROUP BY f1) as dt1                           WHERE f1 > 10) dt2 WHERE sum > 10;
eval EXPLAIN FORMAT=tree $query;
eval $query;
                           FROM (SELECT f1, f2 FROM t1 WHERE f1 > 10) as dt1                           GROUP BY f1) dt2 WHERE sum > 10;
eval EXPLAIN FORMAT=tree $query;
eval $query;
SELECT * FROM (SELECT f1 FROM (SELECT f1 FROM t1) AS dt1 GROUP BY f1) AS dt2 WHERE f1 > 3;
SELECT * FROM (SELECT dt1.f1 FROM (SELECT f1 FROM t1) AS dt1, t1 AS t0  GROUP BY dt1.f1) AS dt2WHERE dt2.f1 > 3;
((SELECT f1, f2 FROM t1) as dt, (SELECT f1, f2 FROM t1) as dt1) WHERE FALSE;
eval EXPLAIN $query;
eval $query;
set optimizer_switch="derived_merge=off";
(SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
(SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set optimizer_switch="derived_condition_pushdown=off";
(SELECT /*+ NO_DERIVED_CONDITION_PUSHDOWN(dt1) */ * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set optimizer_switch=default;
SELECT f1 FROM (SELECT DISTINCT * FROM t1 WHERE f2 = 4) AS alias1WHERE ( alias1 . f1 = 24 AND alias1 . f3 = 101 );
SELECT f1 FROM (SELECT DISTINCT * FROM t1 WHERE f2 = 4) AS alias1WHERE ( alias1 . f1 BETWEEN 24 AND 30 AND alias1 . f3 BETWEEN 101 and 103);
DROP TABLE t0, t1;
CREATE TABLE t(f0 INTEGER PRIMARY KEY, f1 INTEGER,f2 INTEGER);
SELECT NULL IN(SELECT (f1 between 0 and 1) FROM (SELECT f1 FROM t WHERE  (@b:=NULL) - f2)as dt);
DROP TABLE t;
set optimizer_switch="derived_merge=off";
SELECT 1 FROM information_schema.tables WHERE 123 IN (CONCAT_WS(TABLE_ROWS, ''));
set optimizer_switch="derived_merge=on";
CREATE TABLE t1(g INTEGER);
SELECT w.g FROM t1 INNER JOIN (SELECT g, ROW_NUMBER() OVER (PARTITION BY g) AS r FROM t1) w ON w.g=t1.g AND w.r=1 WHERE w.g IS NULL;
DROP TABLE t1;
CREATE TABLE t(f1 INTEGER);
EXPLAIN SELECT a1, a2 FROM (SELECT MAX(2) AS a1 FROM t) as dt1, (SELECT @a AS a2 FROM t) as dt2 WHERE dt1.a1 <= dt2.a2;
SELECT a1, a2 FROM (SELECT MAX(f1) AS a1 FROM t) as dt1, (SELECT @a AS a2 FROM t) as dt2 WHERE dt1.a1 <= dt2.a2;
DROP TABLE t;
CREATE TABLE t(f1 INTEGER);
CREATE ALGORITHM=temptable VIEW v AS SELECT f1 FROM t;
SELECT f1 FROM (SELECT f1 FROM v) AS dt1 NATURAL JOIN v dt2 WHERE f1 > 5;
DROP TABLE t;
DROP VIEW v;
CREATE TABLE t1(f1 INTEGER, KEY(f1));
CREATE TABLE t2(f1 INTEGER);
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
CREATE ALGORITHM=temptable VIEW v AS SELECT f1 FROM t1;
EXPLAIN format=tree INSERT INTO t2 SELECT * FROM v WHERE f1=2;
INSERT INTO t2 SELECT * FROM v WHERE f1=2;
EXPLAIN format=tree UPDATE t2 SET f1=3 WHERE f1 IN (SELECT f1 FROM v WHERE f1=2);
UPDATE t2 SET f1=3 WHERE f1 IN (SELECT f1 FROM v WHERE f1=2);
EXPLAIN format=tree DELETE FROM t2 WHERE f1 IN (SELECT f1 FROM v WHERE f1=3);
DELETE FROM t2 WHERE f1 IN (SELECT f1 FROM v WHERE f1=3);
DROP TABLE t1;
DROP TABLE t2;
DROp VIEW v;
CREATE TABLE t0 (  i0 INTEGER);
INSERT INTO t0 VALUES (0),(1),(2),(3),(4);
CREATE TABLE t1 (f1 INTEGER, f2 INTEGER, f3 INTEGER,                 KEY(f1), KEY(f1,f2), KEY(f3));
INSERT INTO t1SELECT i0, i0 + 10*i0,       i0 + 10*i0 + 100*i0FROM t0 AS a0;
INSERT INTO t1SELECT i0, i0 + 10*i0,       i0 + 10*i0 + 100*i0FROM t0 AS a0;
INSERT INTO t1 VALUES (NULL, 1, 2);
INSERT INTO t1 VALUES (NULL, 1, 3);
SET optimizer_switch="derived_merge=off,derived_condition_pushdown=on";
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 < 3 and f2 > 11;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 2 and f2 < 25 and f3 > 200;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3 and f2 < 50 or f3 > 200;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            (SELECT f1, f2, f3 FROM t1) as dt            WHERE (dt.f1 = 6) or( t1.f2 = 50 and dt.f3 = 200);
eval EXPLAIN FORMAT=tree $query;
eval $query;
            (SELECT f1, f2, f3 FROM t1) as dt, t0            WHERE f1 > 3 and f2 < 50 and i0 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3 and f2 < 50 and f3 > 200;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE (f1 > 2 and f2 < 35) or (f1+f3) > 300 or (f1 < 2);
eval EXPLAIN FORMAT=tree $query;
eval $query;
                          (SELECT f3 FROM t1) as dt2                          WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300                          and (f3 < 400);
eval EXPLAIN FORMAT=tree $query;
eval $query;
                                         (SELECT f3 FROM t1) as dt2) as dt3                          WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 200 and (f3 < 300);
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE i > 1 and i+j > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT l as i, m as j, n as k                  FROM (SELECT f1 as l, f2 as m, f3 as n                        FROM t1) as dt1 ) as dt2            WHERE i > 1 and i+j > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
           FROM (SELECT f1 as i, f2 as j FROM t1 ) as dt1 ,                (SELECT f1 as l, f2 as m, f3 as n FROM t1) as dt2           WHERE i > 1 and i+j > 40 and m < 20 and m+i > 20;
eval EXPLAIN FORMAT=tree $query;
eval $query;
(SELECT (i+j) AS g, f1 FROM (SELECT (f1+f2) AS i, (f1-f2) AS j FROM  (SELECT f1+10 AS f1, f2+10 AS f2 FROM t1) AS dt0) AS dt1, (SELECT f1, f2 FROM t1) AS dt2) AS dt3 WHERE g > 26 and g+f1 > 31;
eval EXPLAIN FORMAT=tree $query;
eval $query;
                               (SELECT (f1+f2) as i, (f3+10) as j FROM t1) as                               dt1) as dt2 WHERE l > 20 and l+m > 10 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
eval EXPLAIN FORMAT=tree $query;
eval $query;
                           FROM (SELECT f1+f2 as j                                 FROM t1) as dt1(k)) as dt(m)            WHERE m > 30;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1+f2 > 30;
eval EXPLAIN FORMAT=tree $query;
eval $query;
           FROM (SELECT f1, SUM(f2) FROM t1 GROUP BY f1 WITH ROLLUP) as dt           WHERE f1 IS NULL;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1 as j, SUM(f2) as sum                  FROM t1 GROUP BY f1 WITH ROLLUP) as dt WHERE j+sum > 50 OR            j IS NULL;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1 as j, SUM(f2) as sum                  FROM t1 GROUP BY f1 WITH ROLLUP                  HAVING AVG(f2) > 1) AS dt WHERE j+sum > 50 OR            j IS NULL;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 0 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set sql_mode="";
            WHERE f1 > 2;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f2) OVER(PARTITION BY f1)                  FROM t1 GROUP BY f1) as dt WHERE f1 > 2;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f2)                  FROM t1 GROUP BY f1) as dt WHERE f2 > 30;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1)                  FROM t1 GROUP BY f1) as dt            WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2)                  FROM t1 GROUP BY f1) as dt            WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2),                  AVG(f3) OVER (PARTITION BY f1)                  FROM t1 GROUP BY f1) as dt            WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f2) as SUM, AVG(f3) OVER (PARTITION BY SUM(f2))                  FROM t1 GROUP BY f1) as dt            WHERE SUM > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f2) OVER (PARTITION by f1,f2),                  AVG(f3) OVER (PARTITION BY f2,f1),                  FIRST_VALUE(f3) OVER (PARTITION by f1)                  FROM t1) as dt            WHERE f1 > 2 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f1) OVER (PARTITION by f2),                  AVG(f2) OVER (PARTITION BY f1)                  FROM t1) as dt            WHERE f1 > 2 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set sql_mode=default;
            FROM (SELECT f1 FROM t1) as dt WHERE f1 > ?;
SET @p1 = 3;
eval PREPARE p FROM "$query";
eval EXECUTE p USING @p1;
eval PREPARE p FROM "EXPLAIN FORMAT=tree $query";
eval EXECUTE p USING @p1;
DROP PREPARE p;
                               (SELECT (f1+f2) as i, (f3+?) as j FROM t1) as                               dt1) as dt2 WHERE l > 20 and l+m > 10 ;
SET @p1 = 10;
eval PREPARE p FROM "$query";
eval EXECUTE p USING @p1;
eval PREPARE p FROM "EXPLAIN FORMAT=tree $query";
eval EXECUTE p USING @p1;
            WHERE a > 0.5;
eval EXPLAIN FORMAT=tree $query;
            WHERE f1 > 3*RAND() AND f1 < 10;
eval EXPLAIN FORMAT=tree $query;
            (SELECT f1, SUM(f2) OVER(PARTITION BY f1) FROM t1) as dt            WHERE f1 > 3*RAND() AND f1 < 10;
eval EXPLAIN FORMAT=tree $query;
            (SELECT f1 FROM t1) as dt            WHERE f1 > 3*RAND() AND f1<10;
eval EXPLAIN FORMAT=tree $query;
            FROM (SELECT f1 FROM t1 UNION SELECT f2 FROM t1) as dt            WHERE f1 > 2;
eval EXPLAIN FORMAT=tree $query;
eval $query;
(SELECT (SELECT 1 FROM t1 LIMIT 1) as f1 FROM t1) as dt WHERE f1 = 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
DELIMITER |;
CREATE FUNCTION p() RETURNS INTEGERBEGIN  DECLARE retn INTEGER;
  SELECT count(f1) FROM t1 INTO retn;
  RETURN retn;
END|DELIMITER ;|            WHERE p() = 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
DROP FUNCTION p;
DELIMITER |;
CREATE FUNCTION p() RETURNS INTEGER DETERMINISTICBEGIN  DECLARE retn INTEGER;
  SELECT count(f1) FROM t1 INTO retn;
  RETURN retn;
END|DELIMITER ;|eval EXPLAIN FORMAT=tree $query;
eval $query;
DROP FUNCTION p;
DELIMITER |;
CREATE PROCEDURE p()BEGIN  DECLARE val INTEGER;
  SET val = 2;
  EXPLAIN FORMAT=tree SELECT AVG(f1) FROM (SELECT * FROM t1) as dt  WHERE f2 > val;
  SELECT AVG(f1) FROM (SELECT * FROM t1) as dt WHERE f2 > val;
END|DELIMITER ;|CALL p();
DROP PROCEDURE p;
qn2 AS (SELECT 3*f1 AS f2 FROM qn)SELECT * from qn2)) as dt WHERE f2 > 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
qn2 AS (SELECT 3*f1 AS f2 FROM qn)SELECT * from qn,qn2)) as dt WHERE f1 < 10 and f2 > 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE dt.f1 > 31 and t1.f2  > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE dt.f1 is null;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE dt.f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            LEFT JOIN t1 AS t2 ON TRUE) AS dt ON dt.f1 > 3;
eval EXPLAIN FORMAT = tree $query;
set optimizer_switch="derived_merge=on";
                                          FROM t1 GROUP BY f1) as dt1                           WHERE f1 > 10) dt2 WHERE sum > 10;
eval EXPLAIN FORMAT=tree $query;
eval $query;
                           FROM (SELECT f1, f2 FROM t1 WHERE f1 > 10) as dt1                           GROUP BY f1) dt2 WHERE sum > 10;
eval EXPLAIN FORMAT=tree $query;
eval $query;
SELECT * FROM (SELECT f1 FROM (SELECT f1 FROM t1) AS dt1 GROUP BY f1) AS dt2 WHERE f1 > 3;
SELECT * FROM (SELECT dt1.f1 FROM (SELECT f1 FROM t1) AS dt1, t1 AS t0  GROUP BY dt1.f1) AS dt2WHERE dt2.f1 > 3;
((SELECT f1, f2 FROM t1) as dt, (SELECT f1, f2 FROM t1) as dt1) WHERE FALSE;
eval EXPLAIN $query;
eval $query;
set optimizer_switch="derived_merge=off";
(SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
(SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set optimizer_switch="derived_condition_pushdown=off";
(SELECT /*+ NO_DERIVED_CONDITION_PUSHDOWN(dt1) */ * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set optimizer_switch=default;
SELECT f1 FROM (SELECT DISTINCT * FROM t1 WHERE f2 = 4) AS alias1WHERE ( alias1 . f1 = 24 AND alias1 . f3 = 101 );
SELECT f1 FROM (SELECT DISTINCT * FROM t1 WHERE f2 = 4) AS alias1WHERE ( alias1 . f1 BETWEEN 24 AND 30 AND alias1 . f3 BETWEEN 101 and 103);
DROP TABLE t0, t1;
CREATE TABLE t(f0 INTEGER PRIMARY KEY, f1 INTEGER,f2 INTEGER);
SELECT NULL IN(SELECT (f1 between 0 and 1) FROM (SELECT f1 FROM t WHERE  (@b:=NULL) - f2)as dt);
DROP TABLE t;
set optimizer_switch="derived_merge=off";
SELECT 1 FROM information_schema.tables WHERE 123 IN (CONCAT_WS(TABLE_ROWS, ''));
set optimizer_switch="derived_merge=on";
CREATE TABLE t1(g INTEGER);
SELECT w.g FROM t1 INNER JOIN (SELECT g, ROW_NUMBER() OVER (PARTITION BY g) AS r FROM t1) w ON w.g=t1.g AND w.r=1 WHERE w.g IS NULL;
DROP TABLE t1;
CREATE TABLE t(f1 INTEGER);
EXPLAIN SELECT a1, a2 FROM (SELECT MAX(2) AS a1 FROM t) as dt1, (SELECT @a AS a2 FROM t) as dt2 WHERE dt1.a1 <= dt2.a2;
SELECT a1, a2 FROM (SELECT MAX(f1) AS a1 FROM t) as dt1, (SELECT @a AS a2 FROM t) as dt2 WHERE dt1.a1 <= dt2.a2;
DROP TABLE t;
CREATE TABLE t(f1 INTEGER);
CREATE ALGORITHM=temptable VIEW v AS SELECT f1 FROM t;
SELECT f1 FROM (SELECT f1 FROM v) AS dt1 NATURAL JOIN v dt2 WHERE f1 > 5;
DROP TABLE t;
DROP VIEW v;
CREATE TABLE t1(f1 INTEGER, KEY(f1));
CREATE TABLE t2(f1 INTEGER);
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
CREATE ALGORITHM=temptable VIEW v AS SELECT f1 FROM t1;
EXPLAIN format=tree INSERT INTO t2 SELECT * FROM v WHERE f1=2;
INSERT INTO t2 SELECT * FROM v WHERE f1=2;
EXPLAIN format=tree UPDATE t2 SET f1=3 WHERE f1 IN (SELECT f1 FROM v WHERE f1=2);
UPDATE t2 SET f1=3 WHERE f1 IN (SELECT f1 FROM v WHERE f1=2);
EXPLAIN format=tree DELETE FROM t2 WHERE f1 IN (SELECT f1 FROM v WHERE f1=3);
DELETE FROM t2 WHERE f1 IN (SELECT f1 FROM v WHERE f1=3);
DROP TABLE t1;
DROP TABLE t2;
DROp VIEW v;
CREATE TABLE t0 (  i0 INTEGER);
INSERT INTO t0 VALUES (0),(1),(2),(3),(4);
CREATE TABLE t1 (f1 INTEGER, f2 INTEGER, f3 INTEGER,                 KEY(f1), KEY(f1,f2), KEY(f3));
INSERT INTO t1SELECT i0, i0 + 10*i0,       i0 + 10*i0 + 100*i0FROM t0 AS a0;
INSERT INTO t1SELECT i0, i0 + 10*i0,       i0 + 10*i0 + 100*i0FROM t0 AS a0;
INSERT INTO t1 VALUES (NULL, 1, 2);
INSERT INTO t1 VALUES (NULL, 1, 3);
SET optimizer_switch="derived_merge=off,derived_condition_pushdown=on";
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 < 3 and f2 > 11;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 2 and f2 < 25 and f3 > 200;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3 and f2 < 50 or f3 > 200;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            (SELECT f1, f2, f3 FROM t1) as dt            WHERE (dt.f1 = 6) or( t1.f2 = 50 and dt.f3 = 200);
eval EXPLAIN FORMAT=tree $query;
eval $query;
            (SELECT f1, f2, f3 FROM t1) as dt, t0            WHERE f1 > 3 and f2 < 50 and i0 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3 and f2 < 50 and f3 > 200;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE (f1 > 2 and f2 < 35) or (f1+f3) > 300 or (f1 < 2);
eval EXPLAIN FORMAT=tree $query;
eval $query;
                          (SELECT f3 FROM t1) as dt2                          WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300                          and (f3 < 400);
eval EXPLAIN FORMAT=tree $query;
eval $query;
                                         (SELECT f3 FROM t1) as dt2) as dt3                          WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 200 and (f3 < 300);
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE i > 1 and i+j > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT l as i, m as j, n as k                  FROM (SELECT f1 as l, f2 as m, f3 as n                        FROM t1) as dt1 ) as dt2            WHERE i > 1 and i+j > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
           FROM (SELECT f1 as i, f2 as j FROM t1 ) as dt1 ,                (SELECT f1 as l, f2 as m, f3 as n FROM t1) as dt2           WHERE i > 1 and i+j > 40 and m < 20 and m+i > 20;
eval EXPLAIN FORMAT=tree $query;
eval $query;
(SELECT (i+j) AS g, f1 FROM (SELECT (f1+f2) AS i, (f1-f2) AS j FROM  (SELECT f1+10 AS f1, f2+10 AS f2 FROM t1) AS dt0) AS dt1, (SELECT f1, f2 FROM t1) AS dt2) AS dt3 WHERE g > 26 and g+f1 > 31;
eval EXPLAIN FORMAT=tree $query;
eval $query;
                               (SELECT (f1+f2) as i, (f3+10) as j FROM t1) as                               dt1) as dt2 WHERE l > 20 and l+m > 10 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
eval EXPLAIN FORMAT=tree $query;
eval $query;
                           FROM (SELECT f1+f2 as j                                 FROM t1) as dt1(k)) as dt(m)            WHERE m > 30;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1+f2 > 30;
eval EXPLAIN FORMAT=tree $query;
eval $query;
           FROM (SELECT f1, SUM(f2) FROM t1 GROUP BY f1 WITH ROLLUP) as dt           WHERE f1 IS NULL;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1 as j, SUM(f2) as sum                  FROM t1 GROUP BY f1 WITH ROLLUP) as dt WHERE j+sum > 50 OR            j IS NULL;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1 as j, SUM(f2) as sum                  FROM t1 GROUP BY f1 WITH ROLLUP                  HAVING AVG(f2) > 1) AS dt WHERE j+sum > 50 OR            j IS NULL;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 0 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set sql_mode="";
            WHERE f1 > 2;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f2) OVER(PARTITION BY f1)                  FROM t1 GROUP BY f1) as dt WHERE f1 > 2;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f2)                  FROM t1 GROUP BY f1) as dt WHERE f2 > 30;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1)                  FROM t1 GROUP BY f1) as dt            WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2)                  FROM t1 GROUP BY f1) as dt            WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2),                  AVG(f3) OVER (PARTITION BY f1)                  FROM t1 GROUP BY f1) as dt            WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f2) as SUM, AVG(f3) OVER (PARTITION BY SUM(f2))                  FROM t1 GROUP BY f1) as dt            WHERE SUM > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f2) OVER (PARTITION by f1,f2),                  AVG(f3) OVER (PARTITION BY f2,f1),                  FIRST_VALUE(f3) OVER (PARTITION by f1)                  FROM t1) as dt            WHERE f1 > 2 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f1) OVER (PARTITION by f2),                  AVG(f2) OVER (PARTITION BY f1)                  FROM t1) as dt            WHERE f1 > 2 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set sql_mode=default;
            FROM (SELECT f1 FROM t1) as dt WHERE f1 > ?;
SET @p1 = 3;
eval PREPARE p FROM "$query";
eval EXECUTE p USING @p1;
eval PREPARE p FROM "EXPLAIN FORMAT=tree $query";
eval EXECUTE p USING @p1;
DROP PREPARE p;
                               (SELECT (f1+f2) as i, (f3+?) as j FROM t1) as                               dt1) as dt2 WHERE l > 20 and l+m > 10 ;
SET @p1 = 10;
eval PREPARE p FROM "$query";
eval EXECUTE p USING @p1;
eval PREPARE p FROM "EXPLAIN FORMAT=tree $query";
eval EXECUTE p USING @p1;
            WHERE a > 0.5;
eval EXPLAIN FORMAT=tree $query;
            WHERE f1 > 3*RAND() AND f1 < 10;
eval EXPLAIN FORMAT=tree $query;
            (SELECT f1, SUM(f2) OVER(PARTITION BY f1) FROM t1) as dt            WHERE f1 > 3*RAND() AND f1 < 10;
eval EXPLAIN FORMAT=tree $query;
            (SELECT f1 FROM t1) as dt            WHERE f1 > 3*RAND() AND f1<10;
eval EXPLAIN FORMAT=tree $query;
            FROM (SELECT f1 FROM t1 UNION SELECT f2 FROM t1) as dt            WHERE f1 > 2;
eval EXPLAIN FORMAT=tree $query;
eval $query;
(SELECT (SELECT 1 FROM t1 LIMIT 1) as f1 FROM t1) as dt WHERE f1 = 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
DELIMITER |;
CREATE FUNCTION p() RETURNS INTEGERBEGIN  DECLARE retn INTEGER;
  SELECT count(f1) FROM t1 INTO retn;
  RETURN retn;
END|DELIMITER ;|            WHERE p() = 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
DROP FUNCTION p;
DELIMITER |;
CREATE FUNCTION p() RETURNS INTEGER DETERMINISTICBEGIN  DECLARE retn INTEGER;
  SELECT count(f1) FROM t1 INTO retn;
  RETURN retn;
END|DELIMITER ;|eval EXPLAIN FORMAT=tree $query;
eval $query;
DROP FUNCTION p;
DELIMITER |;
CREATE PROCEDURE p()BEGIN  DECLARE val INTEGER;
  SET val = 2;
  EXPLAIN FORMAT=tree SELECT AVG(f1) FROM (SELECT * FROM t1) as dt  WHERE f2 > val;
  SELECT AVG(f1) FROM (SELECT * FROM t1) as dt WHERE f2 > val;
END|DELIMITER ;|CALL p();
DROP PROCEDURE p;
qn2 AS (SELECT 3*f1 AS f2 FROM qn)SELECT * from qn2)) as dt WHERE f2 > 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
qn2 AS (SELECT 3*f1 AS f2 FROM qn)SELECT * from qn,qn2)) as dt WHERE f1 < 10 and f2 > 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE dt.f1 > 31 and t1.f2  > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE dt.f1 is null;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE dt.f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            LEFT JOIN t1 AS t2 ON TRUE) AS dt ON dt.f1 > 3;
eval EXPLAIN FORMAT = tree $query;
set optimizer_switch="derived_merge=on";
                                          FROM t1 GROUP BY f1) as dt1                           WHERE f1 > 10) dt2 WHERE sum > 10;
eval EXPLAIN FORMAT=tree $query;
eval $query;
                           FROM (SELECT f1, f2 FROM t1 WHERE f1 > 10) as dt1                           GROUP BY f1) dt2 WHERE sum > 10;
eval EXPLAIN FORMAT=tree $query;
eval $query;
SELECT * FROM (SELECT f1 FROM (SELECT f1 FROM t1) AS dt1 GROUP BY f1) AS dt2 WHERE f1 > 3;
SELECT * FROM (SELECT dt1.f1 FROM (SELECT f1 FROM t1) AS dt1, t1 AS t0  GROUP BY dt1.f1) AS dt2WHERE dt2.f1 > 3;
((SELECT f1, f2 FROM t1) as dt, (SELECT f1, f2 FROM t1) as dt1) WHERE FALSE;
eval EXPLAIN $query;
eval $query;
set optimizer_switch="derived_merge=off";
(SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
(SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set optimizer_switch="derived_condition_pushdown=off";
(SELECT /*+ NO_DERIVED_CONDITION_PUSHDOWN(dt1) */ * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set optimizer_switch=default;
SELECT f1 FROM (SELECT DISTINCT * FROM t1 WHERE f2 = 4) AS alias1WHERE ( alias1 . f1 = 24 AND alias1 . f3 = 101 );
SELECT f1 FROM (SELECT DISTINCT * FROM t1 WHERE f2 = 4) AS alias1WHERE ( alias1 . f1 BETWEEN 24 AND 30 AND alias1 . f3 BETWEEN 101 and 103);
DROP TABLE t0, t1;
CREATE TABLE t(f0 INTEGER PRIMARY KEY, f1 INTEGER,f2 INTEGER);
SELECT NULL IN(SELECT (f1 between 0 and 1) FROM (SELECT f1 FROM t WHERE  (@b:=NULL) - f2)as dt);
DROP TABLE t;
set optimizer_switch="derived_merge=off";
SELECT 1 FROM information_schema.tables WHERE 123 IN (CONCAT_WS(TABLE_ROWS, ''));
set optimizer_switch="derived_merge=on";
CREATE TABLE t1(g INTEGER);
SELECT w.g FROM t1 INNER JOIN (SELECT g, ROW_NUMBER() OVER (PARTITION BY g) AS r FROM t1) w ON w.g=t1.g AND w.r=1 WHERE w.g IS NULL;
DROP TABLE t1;
CREATE TABLE t(f1 INTEGER);
EXPLAIN SELECT a1, a2 FROM (SELECT MAX(2) AS a1 FROM t) as dt1, (SELECT @a AS a2 FROM t) as dt2 WHERE dt1.a1 <= dt2.a2;
SELECT a1, a2 FROM (SELECT MAX(f1) AS a1 FROM t) as dt1, (SELECT @a AS a2 FROM t) as dt2 WHERE dt1.a1 <= dt2.a2;
DROP TABLE t;
CREATE TABLE t(f1 INTEGER);
CREATE ALGORITHM=temptable VIEW v AS SELECT f1 FROM t;
SELECT f1 FROM (SELECT f1 FROM v) AS dt1 NATURAL JOIN v dt2 WHERE f1 > 5;
DROP TABLE t;
DROP VIEW v;
CREATE TABLE t1(f1 INTEGER, KEY(f1));
CREATE TABLE t2(f1 INTEGER);
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
CREATE ALGORITHM=temptable VIEW v AS SELECT f1 FROM t1;
EXPLAIN format=tree INSERT INTO t2 SELECT * FROM v WHERE f1=2;
INSERT INTO t2 SELECT * FROM v WHERE f1=2;
EXPLAIN format=tree UPDATE t2 SET f1=3 WHERE f1 IN (SELECT f1 FROM v WHERE f1=2);
UPDATE t2 SET f1=3 WHERE f1 IN (SELECT f1 FROM v WHERE f1=2);
EXPLAIN format=tree DELETE FROM t2 WHERE f1 IN (SELECT f1 FROM v WHERE f1=3);
DELETE FROM t2 WHERE f1 IN (SELECT f1 FROM v WHERE f1=3);
DROP TABLE t1;
DROP TABLE t2;
DROp VIEW v;
CREATE TABLE t0 (  i0 INTEGER);
INSERT INTO t0 VALUES (0),(1),(2),(3),(4);
CREATE TABLE t1 (f1 INTEGER, f2 INTEGER, f3 INTEGER,                 KEY(f1), KEY(f1,f2), KEY(f3));
INSERT INTO t1SELECT i0, i0 + 10*i0,       i0 + 10*i0 + 100*i0FROM t0 AS a0;
INSERT INTO t1SELECT i0, i0 + 10*i0,       i0 + 10*i0 + 100*i0FROM t0 AS a0;
INSERT INTO t1 VALUES (NULL, 1, 2);
INSERT INTO t1 VALUES (NULL, 1, 3);
SET optimizer_switch="derived_merge=off,derived_condition_pushdown=on";
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 < 3 and f2 > 11;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 2 and f2 < 25 and f3 > 200;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3 and f2 < 50 or f3 > 200;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            (SELECT f1, f2, f3 FROM t1) as dt            WHERE (dt.f1 = 6) or( t1.f2 = 50 and dt.f3 = 200);
eval EXPLAIN FORMAT=tree $query;
eval $query;
            (SELECT f1, f2, f3 FROM t1) as dt, t0            WHERE f1 > 3 and f2 < 50 and i0 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3 and f2 < 50 and f3 > 200;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE (f1 > 2 and f2 < 35) or (f1+f3) > 300 or (f1 < 2);
eval EXPLAIN FORMAT=tree $query;
eval $query;
                          (SELECT f3 FROM t1) as dt2                          WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300                          and (f3 < 400);
eval EXPLAIN FORMAT=tree $query;
eval $query;
                                         (SELECT f3 FROM t1) as dt2) as dt3                          WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 200 and (f3 < 300);
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE i > 1 and i+j > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT l as i, m as j, n as k                  FROM (SELECT f1 as l, f2 as m, f3 as n                        FROM t1) as dt1 ) as dt2            WHERE i > 1 and i+j > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
           FROM (SELECT f1 as i, f2 as j FROM t1 ) as dt1 ,                (SELECT f1 as l, f2 as m, f3 as n FROM t1) as dt2           WHERE i > 1 and i+j > 40 and m < 20 and m+i > 20;
eval EXPLAIN FORMAT=tree $query;
eval $query;
(SELECT (i+j) AS g, f1 FROM (SELECT (f1+f2) AS i, (f1-f2) AS j FROM  (SELECT f1+10 AS f1, f2+10 AS f2 FROM t1) AS dt0) AS dt1, (SELECT f1, f2 FROM t1) AS dt2) AS dt3 WHERE g > 26 and g+f1 > 31;
eval EXPLAIN FORMAT=tree $query;
eval $query;
                               (SELECT (f1+f2) as i, (f3+10) as j FROM t1) as                               dt1) as dt2 WHERE l > 20 and l+m > 10 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
eval EXPLAIN FORMAT=tree $query;
eval $query;
                           FROM (SELECT f1+f2 as j                                 FROM t1) as dt1(k)) as dt(m)            WHERE m > 30;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1+f2 > 30;
eval EXPLAIN FORMAT=tree $query;
eval $query;
           FROM (SELECT f1, SUM(f2) FROM t1 GROUP BY f1 WITH ROLLUP) as dt           WHERE f1 IS NULL;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1 as j, SUM(f2) as sum                  FROM t1 GROUP BY f1 WITH ROLLUP) as dt WHERE j+sum > 50 OR            j IS NULL;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1 as j, SUM(f2) as sum                  FROM t1 GROUP BY f1 WITH ROLLUP                  HAVING AVG(f2) > 1) AS dt WHERE j+sum > 50 OR            j IS NULL;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE f1 > 0 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set sql_mode="";
            WHERE f1 > 2;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f2) OVER(PARTITION BY f1)                  FROM t1 GROUP BY f1) as dt WHERE f1 > 2;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f2)                  FROM t1 GROUP BY f1) as dt WHERE f2 > 30;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1)                  FROM t1 GROUP BY f1) as dt            WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2)                  FROM t1 GROUP BY f1) as dt            WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2),                  AVG(f3) OVER (PARTITION BY f1)                  FROM t1 GROUP BY f1) as dt            WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f2) as SUM, AVG(f3) OVER (PARTITION BY SUM(f2))                  FROM t1 GROUP BY f1) as dt            WHERE SUM > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f2) OVER (PARTITION by f1,f2),                  AVG(f3) OVER (PARTITION BY f2,f1),                  FIRST_VALUE(f3) OVER (PARTITION by f1)                  FROM t1) as dt            WHERE f1 > 2 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            FROM (SELECT f1, SUM(f1) OVER (PARTITION by f2),                  AVG(f2) OVER (PARTITION BY f1)                  FROM t1) as dt            WHERE f1 > 2 ;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set sql_mode=default;
            FROM (SELECT f1 FROM t1) as dt WHERE f1 > ?;
SET @p1 = 3;
eval PREPARE p FROM "$query";
eval EXECUTE p USING @p1;
eval PREPARE p FROM "EXPLAIN FORMAT=tree $query";
eval EXECUTE p USING @p1;
DROP PREPARE p;
                               (SELECT (f1+f2) as i, (f3+?) as j FROM t1) as                               dt1) as dt2 WHERE l > 20 and l+m > 10 ;
SET @p1 = 10;
eval PREPARE p FROM "$query";
eval EXECUTE p USING @p1;
eval PREPARE p FROM "EXPLAIN FORMAT=tree $query";
eval EXECUTE p USING @p1;
            WHERE a > 0.5;
eval EXPLAIN FORMAT=tree $query;
            WHERE f1 > 3*RAND() AND f1 < 10;
eval EXPLAIN FORMAT=tree $query;
            (SELECT f1, SUM(f2) OVER(PARTITION BY f1) FROM t1) as dt            WHERE f1 > 3*RAND() AND f1 < 10;
eval EXPLAIN FORMAT=tree $query;
            (SELECT f1 FROM t1) as dt            WHERE f1 > 3*RAND() AND f1<10;
eval EXPLAIN FORMAT=tree $query;
            FROM (SELECT f1 FROM t1 UNION SELECT f2 FROM t1) as dt            WHERE f1 > 2;
eval EXPLAIN FORMAT=tree $query;
eval $query;
(SELECT (SELECT 1 FROM t1 LIMIT 1) as f1 FROM t1) as dt WHERE f1 = 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
DELIMITER |;
CREATE FUNCTION p() RETURNS INTEGERBEGIN  DECLARE retn INTEGER;
  SELECT count(f1) FROM t1 INTO retn;
  RETURN retn;
END|DELIMITER ;|            WHERE p() = 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
DROP FUNCTION p;
DELIMITER |;
CREATE FUNCTION p() RETURNS INTEGER DETERMINISTICBEGIN  DECLARE retn INTEGER;
  SELECT count(f1) FROM t1 INTO retn;
  RETURN retn;
END|DELIMITER ;|eval EXPLAIN FORMAT=tree $query;
eval $query;
DROP FUNCTION p;
DELIMITER |;
CREATE PROCEDURE p()BEGIN  DECLARE val INTEGER;
  SET val = 2;
  EXPLAIN FORMAT=tree SELECT AVG(f1) FROM (SELECT * FROM t1) as dt  WHERE f2 > val;
  SELECT AVG(f1) FROM (SELECT * FROM t1) as dt WHERE f2 > val;
END|DELIMITER ;|CALL p();
DROP PROCEDURE p;
qn2 AS (SELECT 3*f1 AS f2 FROM qn)SELECT * from qn2)) as dt WHERE f2 > 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
qn2 AS (SELECT 3*f1 AS f2 FROM qn)SELECT * from qn,qn2)) as dt WHERE f1 < 10 and f2 > 1;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE dt.f1 > 31 and t1.f2  > 40;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE dt.f1 is null;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            WHERE dt.f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
eval EXPLAIN FORMAT=tree $query;
eval $query;
            LEFT JOIN t1 AS t2 ON TRUE) AS dt ON dt.f1 > 3;
eval EXPLAIN FORMAT = tree $query;
set optimizer_switch="derived_merge=on";
                                          FROM t1 GROUP BY f1) as dt1                           WHERE f1 > 10) dt2 WHERE sum > 10;
eval EXPLAIN FORMAT=tree $query;
eval $query;
                           FROM (SELECT f1, f2 FROM t1 WHERE f1 > 10) as dt1                           GROUP BY f1) dt2 WHERE sum > 10;
eval EXPLAIN FORMAT=tree $query;
eval $query;
SELECT * FROM (SELECT f1 FROM (SELECT f1 FROM t1) AS dt1 GROUP BY f1) AS dt2 WHERE f1 > 3;
SELECT * FROM (SELECT dt1.f1 FROM (SELECT f1 FROM t1) AS dt1, t1 AS t0  GROUP BY dt1.f1) AS dt2WHERE dt2.f1 > 3;
((SELECT f1, f2 FROM t1) as dt, (SELECT f1, f2 FROM t1) as dt1) WHERE FALSE;
eval EXPLAIN $query;
eval $query;
set optimizer_switch="derived_merge=off";
(SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
(SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set optimizer_switch="derived_condition_pushdown=off";
(SELECT /*+ NO_DERIVED_CONDITION_PUSHDOWN(dt1) */ * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
eval EXPLAIN FORMAT=tree $query;
eval $query;
set optimizer_switch=default;
SELECT f1 FROM (SELECT DISTINCT * FROM t1 WHERE f2 = 4) AS alias1WHERE ( alias1 . f1 = 24 AND alias1 . f3 = 101 );
SELECT f1 FROM (SELECT DISTINCT * FROM t1 WHERE f2 = 4) AS alias1WHERE ( alias1 . f1 BETWEEN 24 AND 30 AND alias1 . f3 BETWEEN 101 and 103);
DROP TABLE t0, t1;
CREATE TABLE t(f0 INTEGER PRIMARY KEY, f1 INTEGER,f2 INTEGER);
SELECT NULL IN(SELECT (f1 between 0 and 1) FROM (SELECT f1 FROM t WHERE  (@b:=NULL) - f2)as dt);
DROP TABLE t;
set optimizer_switch="derived_merge=off";
SELECT 1 FROM information_schema.tables WHERE 123 IN (CONCAT_WS(TABLE_ROWS, ''));
set optimizer_switch="derived_merge=on";
CREATE TABLE t1(g INTEGER);
SELECT w.g FROM t1 INNER JOIN (SELECT g, ROW_NUMBER() OVER (PARTITION BY g) AS r FROM t1) w ON w.g=t1.g AND w.r=1 WHERE w.g IS NULL;
DROP TABLE t1;
CREATE TABLE t(f1 INTEGER);
EXPLAIN SELECT a1, a2 FROM (SELECT MAX(2) AS a1 FROM t) as dt1, (SELECT @a AS a2 FROM t) as dt2 WHERE dt1.a1 <= dt2.a2;
SELECT a1, a2 FROM (SELECT MAX(f1) AS a1 FROM t) as dt1, (SELECT @a AS a2 FROM t) as dt2 WHERE dt1.a1 <= dt2.a2;
DROP TABLE t;
CREATE TABLE t(f1 INTEGER);
CREATE ALGORITHM=temptable VIEW v AS SELECT f1 FROM t;
SELECT f1 FROM (SELECT f1 FROM v) AS dt1 NATURAL JOIN v dt2 WHERE f1 > 5;
DROP TABLE t;
DROP VIEW v;
CREATE TABLE t1(f1 INTEGER, KEY(f1));
CREATE TABLE t2(f1 INTEGER);
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
CREATE ALGORITHM=temptable VIEW v AS SELECT f1 FROM t1;
EXPLAIN format=tree INSERT INTO t2 SELECT * FROM v WHERE f1=2;
INSERT INTO t2 SELECT * FROM v WHERE f1=2;
EXPLAIN format=tree UPDATE t2 SET f1=3 WHERE f1 IN (SELECT f1 FROM v WHERE f1=2);
UPDATE t2 SET f1=3 WHERE f1 IN (SELECT f1 FROM v WHERE f1=2);
EXPLAIN format=tree DELETE FROM t2 WHERE f1 IN (SELECT f1 FROM v WHERE f1=3);
DELETE FROM t2 WHERE f1 IN (SELECT f1 FROM v WHERE f1=3);
DROP TABLE t1;
DROP TABLE t2;
DROp VIEW v;
