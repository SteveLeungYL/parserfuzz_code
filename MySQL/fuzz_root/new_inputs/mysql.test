  if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }            if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                          if ($assert_count == '')  {      }  if ($assert_count != '')  {          }  use strict;
  use warnings;
  my $file= $ENV{'_AG_ASSERT_FILE'};
  my $assert_select= $ENV{'_AG_ASSERT_SELECT'};
  my $assert_match= $ENV{'_AG_ASSERT_MATCH'};
  my $assert_count= $ENV{'_AG_ASSERT_COUNT'};
  my $assert_only_after= $ENV{'_AG_ASSERT_ONLY_AFTER'};
  my $out= $ENV{'_AG_OUT'};
  if (!defined($assert_count)) {    $assert_count = '';
  }  my $result= '';
  my $count= 0;
  open(FILE, "$file") or die("Error $? opening $file: $!\n");
  while (<FILE>) {    my $line = $_;
    if (($line =~ /^CURRENT_TEST: /) ||        ($assert_only_after && $line =~ /$assert_only_after/)) {      $result = "";
      $count = 0;
    }    if ($line =~ /$assert_select/) {      if ($assert_count ne '') {        $count++;
      }      else {        $result .= $line;
      }    }  }  close(FILE) or die("Error $? closing $file: $!");
  open OUT, "> $out" or die("Error $? opening $out: $!");
  if ($assert_count ne '' && ($count != $assert_count)) {    print OUT ($count) or die("Error $? writing $out: $!");
  }  elsif ($assert_count eq '' && $result !~ /$assert_match/) {    print OUT ($result) or die("Error $? writing $out: $!");
  }  else {    print OUT ("assert_grep.inc ok");
  }  close OUT or die("Error $? closing $out: $!");
EOF                if ($assert_match != '')  {      }  if ($assert_count != '')  {      }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }    if (!$include_silent)  {      }      # Print this text (just once) to prevent checking in result files containing  # debug info.  if (!$printed_this_should_not_be_checked_in)  {          }        if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }          if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                      while ($_eval_rbracket)  # Get position of right bracket    if ($_eval_lbracket == 0)  {                  }  # Get sub-statement from statement. Preserve escapes for single quotes.    # Get connection from sub-statement        if ($_eval_colon)  {        # Preserve escapes for single quotes.      }  # Interpolate escapes before using expression outside string context.    # Change connection  if ($_eval_connection)  {    if ($rpl_debug)    {          }      }  if (!$_eval_connection)  {    if ($rpl_debug)    {          }  }  # Execute and get result from sub-statement.  # Can't use dollar to denote end of string because mtr will try to  # interpolate it.    if ($selected_row_col)  {      }  if (!$selected_row_col)  {      }  # Change back connection  if ($_eval_connection)  {      }  if ($rpl_debug)  {      }  # Replace sub-statement by its result    # Replace result references by result              while ($_rpl_server) {      send SET SESSION debug = 'd,crash_now';
  while ($_rpl_server) {            while ($_rpl_server)  if (!$_rpl_is_first_server)  {      }          SHOW WARNINGS;
      query_vertical  SELECT NOW(), @@SERVER_ID, @@SERVER_UUID, @@PORT;
      query_vertical  SELECT @@GLOBAL.GTID_MODE, @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_OWNED, @@SESSION.GTID_OWNED;
      query_vertical   SHOW SLAVE STATUS;
      query_vertical  SELECT * FROM performance_schema.replication_connection_status;
  if($rpl_group_replication)  {            query_vertical    SELECT * FROM performance_schema.replication_group_members;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_stats;
            query_vertical    SELECT * FROM performance_schema.replication_group_configuration_version;
            query_vertical    SELECT * FROM performance_schema.replication_group_member_actions;
            query_vertical    SELECT * FROM performance_schema.replication_group_communication_information;
            query_vertical    SELECT * FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%";
  }      query_vertical  SELECT * FROM performance_schema.replication_applier_status;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_worker;
      query_vertical  SELECT * FROM performance_schema.replication_applier_status_by_coordinator;
      query_vertical  SELECT * FROM performance_schema.replication_applier_configuration;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover;
      query_vertical  SELECT * FROM performance_schema.replication_asynchronous_connection_failover_managed;
      query_vertical  SHOW MASTER STATUS;
      query_vertical  SHOW SLAVE HOSTS;
      SHOW PROCESSLIST;
      SELECT * FROM performance_schema.threads;
      SHOW BINARY LOGS;
      let $binlog_name= query_get_value("SHOW MASTER STATUS", File, 1);
    eval SHOW BINLOG EVENTS IN '$binlog_name';
      let $relaylog_name= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1);
    eval SHOW RELAYLOG EVENTS IN '$relaylog_name';
      SELECT * FROM mysql.slave_relay_log_info;
      SELECT * FROM mysql.slave_master_info;
      SELECT * FROM mysql.gtid_executed;
  if ($extra_debug_table)  {                eval SHOW CREATE TABLE $extra_debug_table;
    eval SELECT * FROM $extra_debug_table;
  }  if ($extra_debug_sql != '') {                  }      # Don't use same connection twice.  if (`SELECT 'server_$_rpl_server' = '$_rpl_old_con'`)  {        if ($rpl_only_current_connection)    {          }  }            if ($rpl_connection_silent_if_same)  {    if ($rpl_connection_name == $CURRENT_CONNECTION)    {          }  }  if ($rpl_connection_silent)  {      }      if ($_tmp != $ENABLE_WARNINGS) {    # Enable all the disabled warnings      }  if ($_include_file_disable_warnings_list) {            # Check if there exist any disabled warnings    if ($_include_file_disable_warnings) {      # Disabled warnings are present, enable all the warings if $ENABLE_WARNINGS      # is not set and then disable only the warnings present in disabld warning list.      if (!$ENABLE_WARNINGS) {              }          }    if (!$_include_file_disable_warnings) {      # No disabled warnings exist, check if any enabled warnings present                  if ($_include_file_enable_warnings) {        # Enabled warnings exist, disable all the warnings first if $ENABLE_WARNINGS        # is set and then enable only the warnings present in enabled warnings list.        if ($ENABLE_WARNINGS) {                  }              }      if (!$_include_file_enable_warnings) {        # There exist no disabled or enabled warnings, disable all        # the warnings.              }    }  }                          if ($assert_count == '')  {      }  if ($assert_count != '')  {          }  use strict;
  use warnings;
  my $file= $ENV{'_AG_ASSERT_FILE'};
  my $assert_select= $ENV{'_AG_ASSERT_SELECT'};
  my $assert_match= $ENV{'_AG_ASSERT_MATCH'};
  my $assert_count= $ENV{'_AG_ASSERT_COUNT'};
  my $assert_only_after= $ENV{'_AG_ASSERT_ONLY_AFTER'};
  my $out= $ENV{'_AG_OUT'};
  if (!defined($assert_count)) {    $assert_count = '';
  }  my $result= '';
  my $count= 0;
  open(FILE, "$file") or die("Error $? opening $file: $!\n");
  while (<FILE>) {    my $line = $_;
    if (($line =~ /^CURRENT_TEST: /) ||        ($assert_only_after && $line =~ /$assert_only_after/)) {      $result = "";
      $count = 0;
    }    if ($line =~ /$assert_select/) {      if ($assert_count ne '') {        $count++;
      }      else {        $result .= $line;
      }    }  }  close(FILE) or die("Error $? closing $file: $!");
  open OUT, "> $out" or die("Error $? opening $out: $!");
  if ($assert_count ne '' && ($count != $assert_count)) {    print OUT ($count) or die("Error $? writing $out: $!");
  }  elsif ($assert_count eq '' && $result !~ /$assert_match/) {    print OUT ($result) or die("Error $? writing $out: $!");
  }  else {    print OUT ("assert_grep.inc ok");
  }  close OUT or die("Error $? closing $out: $!");
EOF                if ($assert_match != '')  {      }  if ($assert_count != '')  {      }  drop table if exists t1;
create table t1(a int);
insert into t1 values(1);
select "Test delimiter : from command line" as "_";
select "Test delimiter :; from command line" as "_";
select "Test 'go' command(vertical output) \G" as "_";
select "Test  'go' command \g" as "_";
drop table t1;
create table t1(a int);
lock tables t1 write;
unlock tables;
drop table t1;
create table t1(a int, b varchar(255), c int);
drop table t1;
open(FILE,">","$ENV{'MYSQLTEST_VARDIR'}/tmp/b19216.tmp") or die;
print FILE "select\n";
print FILE "'a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a',\n" x 3400;
print FILE "'b';\n";
close FILE;
EOFcreate table t17583 (a int);
insert into t17583 (a) values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
insert into t17583 select a from t17583;
insert into t17583 select a from t17583;
insert into t17583 select a from t17583;
insert into t17583 select a from t17583;
insert into t17583 select a from t17583;
insert into t17583 select a from t17583;
insert into t17583 select a from t17583;
select count(*) from t17583;
drop table t17583;
DELIMITER /SELECT 1/EOFremove_file $MYSQLTEST_VARDIR/tmp/bug21412.sql;
DELIMITER \EOFremove_file $MYSQLTEST_VARDIR/tmp/bug21412.sql;
DELIMITER \\EOFremove_file $MYSQLTEST_VARDIR/tmp/bug21412.sql;
﻿select "This is a file starting with UTF8 BOM 0xEFBBBF";
EOFremove_file $MYSQLTEST_VARDIR/tmp/bug29323.sql;
--delimiter ||select 2 ||EOFremove_file $MYSQLTEST_VARDIR/tmp/bug38158.sql;
;DELIMITER DELIMITERSELECT 1DELIMITERDELIMITER ;
SELECT 1;
EOFremove_file $MYSQLTEST_VARDIR/tmp/bug31060.sql;
SET @@global.sql_mode='';
drop tables t1, t2;
SET @@global.sql_mode=DEFAULT;
SELECT '< & >' AS `<`;
EOFremove_file $MYSQLTEST_VARDIR/tmp/bug27884.sql;
create table t1 (a char(5));
insert into t1 values ('\0b\0');
drop table t1;
DROP DATABASE connected_db;
CREATE DATABASE connected_db;
USE connected_db;
CREATE TABLE `table_in_connected_db`(a INT);
EOFCREATE DATABASE connected_db;
USE connected_db;
SHOW TABLES;
DROP DATABASE connected_db;
CREATE TABLE t1 (i INT);
CREATE TABLE test.t1 (i INT);
USE test;
CREATE TABLE connected_db.t2 (i INT);
CREATE TABLE t2 (i INT);
EOFCREATE DATABASE connected_db;
SHOW TABLES IN connected_db;
SHOW TABLES IN test;
USE test;
DROP TABLE t1;
DROP DATABASE connected_db;
CREATE DATABASE test1;
USE test1;
USE test1;
CREATE TABLE connected_db.t1 (i INT);
EOFSHOW TABLES IN test;
SHOW TABLES IN test1;
DROP DATABASE test1;
CREATE TABLE t1 (i INT);
CREATE TABLE test.t1 (i INT);
CONNECT test;
CREATE TABLE connected_db.t2 (i INT);
CREATE TABLE t2 (i INT);
USE connected_db;
CREATE TABLE connected_db.t3 (i INT);
CREATE TABLE t3 (i INT);
EOFCREATE DATABASE connected_db;
SHOW TABLES IN connected_db;
SHOW TABLES IN test;
DROP TABLE test.t1;
DROP TABLE test.t2;
DROP DATABASE connected_db;
CREATE TABLE t1 (i INT);
CREATE TABLE test.t1 (i INT);
USE test;
CREATE TABLE test.t2 (i INT);
CREATE TABLE t2 (i INT);
EOFSHOW TABLES IN test;
CREATE TABLE `table_in_connected_db`(i INT);
USE non_existent_db;
CREATE TABLE `table_in_non_existent_db`(i INT);
EOFDROP DATABASE connected_db;
CREATE DATABASE connected_db;
USE non_existent_db;
CREATE TABLE `table_in_non_existent_db`(i INT);
USE connected_db;
CREATE TABLE `table_in_connected_db`(i INT);
EOFCREATE DATABASE connected_db;
SHOW TABLES IN connected_db;
SHOW TABLES IN connected_db;
DROP DATABASE connected_db;
resetconnection;
CREATE DATABASE wl6797;
USE wl6797;
CREATE TABLE t1 (a int);
PREPARE x FROM 'INSERT INTO t1 VALUES (1), (2)';
EXECUTE x;
SELECT * FROM t1 ORDER BY 1;
resetconnection;
EXECUTE x;
EOFDROP TABLE wl6797.t1;
DROP DATABASE wl6797;
EOFCREATE USER bug21464621 IDENTIFIED BY 'password' PASSWORD EXPIRE;
DROP USER bug21464621;
