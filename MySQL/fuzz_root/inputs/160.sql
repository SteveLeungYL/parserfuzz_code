drop table if exists t1;
CREATE FUNCTION metaphon RETURNS STRING SONAME "udf_example.so";
CREATE FUNCTION myfunc_double RETURNS REAL SONAME "udf_example.so";
CREATE FUNCTION myfunc_nonexist RETURNS INTEGER SONAME "udf_example.so";
CREATE FUNCTION myfunc_int RETURNS INTEGER SONAME "udf_example.so";
CREATE FUNCTION sequence RETURNS INTEGER SONAME "udf_example.so";
CREATE FUNCTION lookup RETURNS STRING SONAME "udf_example.so";
CREATE FUNCTION reverse_lookup RETURNS STRING SONAME "udf_example.so";
CREATE AGGREGATE FUNCTION avgcost RETURNS REAL SONAME "udf_example.so";
select myfunc_double();
select myfunc_double(1);
select myfunc_double(78654);
select myfunc_nonexist();
select myfunc_int();
select lookup();
select lookup("127.0.0.1");
select lookup(127,0,0,1);
select lookup("localhost");
select reverse_lookup();
prepare s from "select myfunc_double(?)";
set @one = 1;
execute s using @one;
deallocate prepare s;
select reverse_lookup("127.0.0.1");
select reverse_lookup(127,0,0,1);
select reverse_lookup("localhost");
select avgcost();
select avgcost(100,23.76);
create table t1(sum int, price float(24));
insert into t1 values(100, 50.00), (100, 100.00);
select avgcost(sum, price) from t1;
delete from t1;
insert into t1 values(100, 54.33), (200, 199.99);
select avgcost(sum, price) from t1;
drop table t1;
select metaphon('hello');
CREATE PROCEDURE `XXX1`(in testval varchar(10)) begin select metaphon(testval); end;
call XXX1('hello');
drop procedure xxx1;
CREATE PROCEDURE `XXX2`() begin declare testval varchar(10); set testval = 'hello'; select metaphon(testval); end;
call XXX2();
drop procedure xxx2;
CREATE TABLE bug19904(n INT, v varchar(10));
INSERT INTO bug19904 VALUES (1,'one'),(2,'two'),(NULL,NULL),(3,'three'),(4,'four');
SELECT myfunc_double(n) AS f FROM bug19904;
SELECT metaphon(v) AS f FROM bug19904;
DROP TABLE bug19904;
CREATE DEFINER=CURRENT_USER() FUNCTION should_not_parse RETURNS STRING SONAME "should_not_parse.so";
CREATE DEFINER=someone@somewhere FUNCTION should_not_parse RETURNS STRING SONAME "should_not_parse.so";
create table t1(f1 int);
insert into t1 values(1),(2);
explain select myfunc_int(f1) from t1 order by 1;
drop table t1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 values (1,1),(2,2);
CREATE FUNCTION fn(a int) RETURNS int DETERMINISTIC BEGIN RETURN a; END ;
CREATE VIEW v1 AS SELECT a, fn(MIN(b)) as c FROM t1 GROUP BY a;
SELECT myfunc_int(a AS attr_name) FROM t1;
EXPLAIN SELECT myfunc_int(a AS attr_name) FROM t1;
EXPLAIN SELECT myfunc_int(a) FROM t1;
SELECT a,c FROM v1;
SELECT a, fn(MIN(b) xx) as c FROM t1 GROUP BY a;
SELECT myfunc_int(fn(MIN(b) xx)) as c FROM t1 GROUP BY a;
SELECT myfunc_int(test.fn(MIN(b) xx)) as c FROM t1 GROUP BY a;
SELECT myfunc_int(fn(MIN(b)) xx) as c FROM t1 GROUP BY a;
SELECT myfunc_int(test.fn(MIN(b)) xx) as c FROM t1 GROUP BY a;
EXPLAIN SELECT myfunc_int(MIN(b) xx) as c FROM t1 GROUP BY a;
EXPLAIN SELECT test.fn(MIN(b)) as c FROM t1 GROUP BY a;
EXPLAIN SELECT myfunc_int(fn(MIN(b))) as c FROM t1 GROUP BY a;
EXPLAIN SELECT myfunc_int(test.fn(MIN(b))) as c FROM t1 GROUP BY a;
SELECT myfunc_int(MIN(b) xx) as c FROM t1 GROUP BY a;
SELECT test.fn(MIN(b)) as c FROM t1 GROUP BY a;
SELECT myfunc_int(fn(MIN(b))) as c FROM t1 GROUP BY a;
SELECT myfunc_int(test.fn(MIN(b))) as c FROM t1 GROUP BY a;
DROP VIEW v1;
DROP TABLE t1;
DROP FUNCTION fn;
select myfunc_double(3);
select myfunc_double(3 AS three);
select myfunc_double(abs(3));
select myfunc_double(abs(3) AS named_param);
select abs(myfunc_double(3));
select abs(myfunc_double(3 AS three));
select myfunc_double(abs(3 AS wrong));
select abs(myfunc_double(3) AS wrong);
drop function if exists pi;
CREATE FUNCTION pi RETURNS STRING SONAME "should_not_parse.so";
DROP FUNCTION IF EXISTS metaphon;
CREATE FUNCTION metaphon(a int) RETURNS int return 0;
CREATE FUNCTION metaphon RETURNS STRING SONAME "udf_example.so";
DROP FUNCTION metaphon;
DROP FUNCTION metaphon;
CREATE FUNCTION metaphon RETURNS STRING SONAME "udf_example.so";
CREATE FUNCTION metaphon(a int) RETURNS int return 0;
CREATE FUNCTION test.metaphon(a int) RETURNS int return 0;
create table t1(sum int, price float(24));
select distinct avgcost(sum,price) from t1 order by avgcost(sum,price);
drop table t1;
DROP FUNCTION metaphon;
DROP FUNCTION myfunc_double;
DROP FUNCTION myfunc_nonexist;
DROP FUNCTION myfunc_int;
DROP FUNCTION sequence;
DROP FUNCTION lookup;
DROP FUNCTION reverse_lookup;
DROP FUNCTION avgcost;
select * from mysql.func;
CREATE FUNCTION is_const RETURNS STRING SONAME "udf_example.so";
select IS_const(3);
drop function IS_const;
select * from mysql.func;
select is_const(3);
CREATE FUNCTION is_const RETURNS STRING SONAME "udf_example.so";
select is_const(3) as const, is_const(3.14) as const, is_const('fnord') as const, is_const(2+3) as const, is_const(rand()) as 'nc rand()', is_const(sin(3.14)) as const, is_const(upper('test')) as const;
create table bug18761 (n int);
insert into bug18761 values (null),(2);
select is_const(3) as const, is_const(3.14) as const, is_const('fnord') as const, is_const(2+3) as const, is_const(2+n) as 'nc  2+n  ', is_const(sin(n)) as 'nc sin(n)', is_const(sin(3.14)) as const, is_const(upper('test')) as const, is_const(rand()) as 'nc rand()', is_const(n) as 'nc   n   ', is_const(is_const(n)) as 'nc ic?(n)', is_const(is_const('c')) as const from bug18761;
drop table bug18761;
select is_const((1,2,3));
drop function if exists is_const;
CREATE FUNCTION metaphon RETURNS STRING SONAME "udf_example.so";
CREATE FUNCTION myfunc_double RETURNS REAL SONAME "udf_example.so";
CREATE FUNCTION myfunc_int RETURNS INTEGER SONAME "udf_example.so";
create function f1(p1 varchar(255)) returns varchar(255) begin return metaphon(p1); end;
create function f2(p1 varchar(255)) returns double begin return myfunc_double(p1); end;
create function f3(p1 varchar(255)) returns double begin return myfunc_int(p1); end;
select f3(NULL);
select f2(NULL);
select f1(NULL);
drop function f1;
drop function f2;
drop function f3;
drop function metaphon;
drop function myfunc_double;
drop function myfunc_int;
DROP DATABASE IF EXISTS mysqltest;
CREATE DATABASE mysqltest;
USE mysqltest;
DROP DATABASE mysqltest;
CREATE FUNCTION metaphon RETURNS STRING SONAME "udf_example.so";
DROP FUNCTION metaphon;
USE test;
CREATE TABLE const_len_bug ( str_const varchar(4000), result1 varchar(4000), result2 varchar(4000) );
CREATE TRIGGER check_const_len_trigger BEFORE INSERT ON const_len_bug FOR EACH ROW BEGIN set NEW.str_const = 'bar'; set NEW.result2 = check_const_len(NEW.str_const); END ;
CREATE PROCEDURE check_const_len_sp (IN str_const VARCHAR(4000)) BEGIN DECLARE result VARCHAR(4000); SET result = check_const_len(str_const); insert into const_len_bug values(str_const, result, ""); END ;
CREATE FUNCTION check_const_len RETURNS string SONAME "udf_example.so";
CALL check_const_len_sp("foo");
SELECT * from const_len_bug;
DROP FUNCTION check_const_len;
DROP PROCEDURE check_const_len_sp;
DROP TRIGGER check_const_len_trigger;
DROP TABLE const_len_bug;
CREATE FUNCTION sequence RETURNS INTEGER SONAME "udf_example.so";
CREATE TABLE t1 (a INT);
CREATE TABLE t2 (a INT PRIMARY KEY);
INSERT INTO t1 VALUES (4),(3),(2),(1);
INSERT INTO t2 SELECT * FROM t1;
SELECT sequence() AS seq, a FROM t1 ORDER BY seq ASC;
SELECT sequence() AS seq, a FROM t1 ORDER BY seq DESC;
SELECT * FROM t1 WHERE a = sequence();
SELECT * FROM t2 WHERE a = sequence();
DROP FUNCTION sequence;
DROP TABLE t1,t2;
drop function if exists test.metaphon;
drop function if exists metaphon;
CREATE FUNCTION metaphon RETURNS STRING SONAME "udf_example.so";
select metaphon("Hello");
drop function if exists test.metaphon;
select metaphon("Hello");
drop function metaphon;
CREATE FUNCTION test.metaphon(a TEXT) RETURNS TEXT return "This is a SF";
create database db_31767;
use db_31767;
CREATE FUNCTION metaphon RETURNS STRING SONAME "udf_example.so";
use test;
select metaphon("Hello");
select test.metaphon("Hello");
drop function metaphon;
select metaphon("Hello");
drop function metaphon;
use db_31767;
drop database db_31767;
drop function if exists no_such_func;
drop function no_such_func;
drop function if exists test.no_such_func;
drop function test.no_such_func;
drop procedure if exists no_such_proc;
drop procedure no_such_proc;
use test;
CREATE TABLE t1 ( a INT );
INSERT INTO t1 VALUES (1), (2), (3);
SELECT IF( a = 1, a, a ) AS `b` FROM t1 ORDER BY field( `b` + 1, 1 );
SELECT IF( a = 1, a, a ) AS `b` FROM t1 ORDER BY field( `b`, 1 );
DROP TABLE t1;
CREATE TABLE t1 (f1 INT);
INSERT INTO t1 VALUES(1),(50);
CREATE FUNCTION myfunc_double RETURNS INTEGER SONAME "udf_example.so";
EXPLAIN SELECT 1 FROM t1 WHERE f1=1 + myfunc_double(1);
DROP FUNCTION myfunc_double;
DROP TABLE t1;
CREATE FUNCTION metaphon RETURNS STRING SONAME "udf_example.so";
CREATE FUNCTION reverse_lookup RETURNS STRING SONAME "udf_example.so";
FLUSH TABLES WITH READ LOCK;
DROP FUNCTION metaphon;
SELECT metaphon("foo");
UNLOCK TABLES;
reap;
FLUSH TABLES WITH READ LOCK;
CREATE FUNCTION metaphon RETURNS STRING SONAME "udf_example.so";
SELECT reverse_lookup("127.0.0.1");
UNLOCK TABLES;
show session status;
reap;
DROP FUNCTION metaphon;
DROP FUNCTION reverse_lookup;
CREATE AGGREGATE FUNCTION my_median RETURNS INTEGER SONAME "udf_example.so";
SELECT my_median(1);
CREATE TABLE t1(a INT, b INT);
SELECT a, my_median(b) from t1 group by a;
INSERT INTO t1 values (1, 1), (1, 2), (1, 200), (2, 1), (2, 200), (2, 200), (2, 1000), (3, 1), (3, 1), (3, 100), (3, 100), (3, 42) ;
SELECT a, my_median(b) from t1 GROUP BY a;
DROP TABLE t1;
execute ps;
execute ps;
DEALLOCATE PREPARE ps;
DROP FUNCTION my_median;
SET autocommit= 0;
SET innodb_lock_wait_timeout= 1;
START TRANSACTION;
INSERT INTO mysql.func(name, ret, dl, type) VALUES ('metaphon', 0, 'udf_example.so', 'function');
CREATE FUNCTION metaphon RETURNS STRING SONAME "udf_example.so";;
ROLLBACK;
reap # CREATE FUNCTION;
DROP FUNCTION metaphon;
CREATE FUNCTION metaphon RETURNS STRING SONAME "udf_example.so";
START TRANSACTION;
SELECT name FROM mysql.func WHERE name ='metaphon' FOR UPDATE;
DROP FUNCTION metaphon;
ROLLBACK;
reap # DROP USER;
SELECT name FROM mysql.func WHERE name = 'metaphon';
CREATE TABLE t1(a INT);
START TRANSACTION;
INSERT INTO t1 VALUES(1),(2),(3);
CREATE FUNCTION metaphon RETURNS STRING SONAME "udf_example.so";
SELECT * FROM t1;
SELECT * FROM mysql.func;
ROLLBACK;
SELECT * FROM mysql.func;
DROP FUNCTION metaphon;
DROP TABLE t1;
CREATE FUNCTION is_const RETURNS STRING SONAME "udf_example.so";
SELECT is_const((1,2,3));
DROP FUNCTION  is_const;
CREATE AGGREGATE FUNCTION avgcost RETURNS REAL SONAME "udf_example.so";
CREATE TABLE t1(fld1 INT);
SELECT avgcost(T.TABLE_ROWS, 0e0) FROM INFORMATION_SCHEMA.TABLES T, INFORMATION_SCHEMA.COLUMNS C WHERE C.TABLE_SCHEMA = T.TABLE_SCHEMA AND C.TABLE_NAME = T.TABLE_NAME AND C.TABLE_SCHEMA = DATABASE();
DROP TABLE t1;
DROP FUNCTION avgcost;
CREATE AGGREGATE FUNCTION my_median RETURNS INTEGER SONAME "udf_example.so";
CREATE TABLE t1(f1 INTEGER, f2 INTEGER);
INSERT INTO t1 VALUES (1,100),(1,2),(2,100),(2,3);
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, my_median(f2) as median FROM t1 GROUP BY f1) as dt WHERE median != 1;
SELECT * FROM (SELECT f1, my_median(f2) as median FROM t1 GROUP BY f1) as dt WHERE median != 1;
DROP TABLE t1;
DROP FUNCTION my_median;
