CREATE TABLE t1 ( pk int NOT NULL, col_int_key int DEFAULT NULL, col_int int DEFAULT NULL, col_varchar varchar(1) DEFAULT NULL, PRIMARY KEY (pk), KEY col_int_key (col_int_key) );
INSERT INTO t1 VALUES (10,7,5,'l'), (12,7,4,'o');
CREATE TABLE t2 ( col_date_key date DEFAULT NULL, col_datetime_key datetime DEFAULT NULL, col_int_key int(11) DEFAULT NULL, col_varchar_key varchar(1) DEFAULT NULL, col_varchar varchar(1) DEFAULT NULL, col_time time DEFAULT NULL, pk int NOT NULL, col_date date DEFAULT NULL, col_time_key time DEFAULT NULL, col_datetime datetime DEFAULT NULL, col_int int DEFAULT NULL, PRIMARY KEY (pk), KEY col_date_key (col_date_key), KEY col_datetime_key (col_datetime_key), KEY col_int_key (col_int_key), KEY col_varchar_key (col_varchar_key), KEY col_time_key (col_time_key) );
INSERT INTO t2(col_int_key,col_varchar_key,col_varchar,pk,col_int)  VALUES (8,'a','w',1,5), (9,'y','f',7,0), (9,'z','i',11,9), (9,'r','s',12,3), (7,'n','i',13,6), (9,'j','v',17,9), (240,'u','k',20,6);
CREATE TABLE t3 ( col_int int DEFAULT NULL, col_int_key int(11) DEFAULT NULL, pk int NOT NULL, PRIMARY KEY (pk), KEY col_int_key (col_int_key) );
INSERT INTO t3 VALUES (8,4,1);
ANALYZE TABLE t1, t2, t3;
SELECT table2.col_int_key AS field1 FROM (SELECT sq1_t1.* FROM t1 AS sq1_t1 RIGHT OUTER JOIN t2 AS sq1_t2 ON sq1_t2.col_varchar_key = sq1_t1.col_varchar ) AS table1 LEFT JOIN t1 AS table2 RIGHT JOIN t2 AS table3 ON table3.pk = table2.col_int_key ON table3.col_int_key = table2.col_int WHERE table3.col_int_key >= ALL (SELECT sq2_t1.col_int AS sq2_field1 FROM t2 AS sq2_t1 STRAIGHT_JOIN t3 AS sq2_t2 ON sq2_t2.col_int = sq2_t1.pk AND sq2_t1.col_varchar IN (SELECT sq21_t1.col_varchar AS sq21_field1 FROM t2 AS sq21_t1 STRAIGHT_JOIN t1 AS sq21_t2 ON sq21_t2.col_int_key = sq21_t1.pk WHERE sq21_t1.pk = 7 ) WHERE sq2_t2.col_int_key >= table2.col_int AND sq2_t1.col_int_key <= table2.col_int_key );
DROP TABLE t1, t2, t3;
CREATE TABLE t1(k VARCHAR(10) PRIMARY KEY);
CREATE TABLE t2(k VARCHAR(10) PRIMARY KEY);
SET SQL_MODE='';
EXPLAIN SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX' FROM t1 WHERE k ='X';
SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX' FROM t1 WHERE k ='X';
EXPLAIN SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX', SUM(k) FROM t1;
SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX', SUM(k) FROM t1;
EXPLAIN SELECT SUM(k), k FROM t1 HAVING (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX';
SELECT SUM(k), k FROM t1 HAVING (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX';
EXPLAIN SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X') AND SUM(t1.k)) = 'XXX' FROM t1;
SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X') AND SUM(t1.k)) = 'XXX' FROM t1;
SET SQL_MODE=ONLY_FULL_GROUP_BY;
EXPLAIN SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX' FROM t1 WHERE k ='X';
SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX' FROM t1 WHERE k ='X';
EXPLAIN SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX', SUM(k) FROM t1;
EXPLAIN SELECT SUM(k), k FROM t1 HAVING (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX';
EXPLAIN SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X') AND SUM(t1.k)) = 'XXX' FROM t1;
SET SQL_MODE=STRICT_TRANS_TABLES;
EXPLAIN SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX' FROM t1 WHERE k ='X';
SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX' FROM t1 WHERE k ='X';
EXPLAIN SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX', SUM(k) FROM t1;
SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX', SUM(k) FROM t1;
EXPLAIN SELECT SUM(k), k FROM t1 HAVING (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX';
SELECT SUM(k), k FROM t1 HAVING (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX';
EXPLAIN SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X') AND SUM(t1.k)) = 'XXX' FROM t1;
SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X') AND SUM(t1.k)) = 'XXX' FROM t1;
SET SQL_MODE=DEFAULT;
EXPLAIN SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX' FROM t1 WHERE k ='X';
SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX' FROM t1 WHERE k ='X';
EXPLAIN SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX', SUM(k) FROM t1;
EXPLAIN SELECT SUM(k), k FROM t1 HAVING (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X')) = 'XXX';
EXPLAIN SELECT (SELECT 'X' FROM t2 WHERE t2.k = CONCAT(t1.k, 'X') AND SUM(t1.k)) = 'XXX' FROM t1;
DROP TABLE t1,t2;
SET sql_mode='';
CREATE TABLE a(d INT,e BIGINT, KEY(e));
INSERT a VALUES (0,0);
CREATE TABLE b(f TIME);
INSERT b VALUES (null),(null),(null);
CREATE TABLE c(g DATETIME(6) NOT NULL);
INSERT c(g) VALUES (now()+interval 1 day);
INSERT c(g) VALUES (now()-interval 1 day);
SELECT 1 FROM a WHERE (SELECT f FROM b WHERE (SELECT 1 FROM c)) <=> e GROUP BY d;
SET sql_mode=default;
DROP TABLES a, b, c;
CREATE TABLE p (Id INT,PRIMARY KEY (Id));
INSERT INTO p VALUES (1);
CREATE TABLE s (Id INT, u INT, UNIQUE KEY o(Id, u) );
INSERT INTO s VALUES (1, NULL),(1, NULL);
ANALYZE TABLE s;
EXPLAIN SELECT p.Id FROM (p) WHERE p.Id IN ( SELECT s.Id FROM s WHERE Id=1 AND u IS NULL)ORDER BY Id DESC;
EXPLAIN SELECT p.Id FROM (p) WHERE p.Id IN ( SELECT s.Id FROM s WHERE Id=1 AND u IS NOT NULL) ORDER BY Id DESC;
SELECT p.Id FROM (p) WHERE p.Id IN ( SELECT s.Id FROM s WHERE Id=1 AND u IS NULL)ORDER BY Id DESC;
SELECT p.Id FROM (p) WHERE p.Id IN ( SELECT s.Id FROM s WHERE Id=1 AND u IS NOT NULL) ORDER BY Id DESC;
CREATE TABLE s1 (Id INT, u INT, UNIQUE KEY o(Id, u) );
INSERT INTO s1 VALUES (1, 2),(1, 3);
ANALYZE TABLE s1;
EXPLAIN SELECT p.Id FROM (p) WHERE p.Id IN ( SELECT s1.Id FROM s1 WHERE Id=1 AND u IS NOT NULL) ORDER BY Id DESC;
EXPLAIN SELECT p.Id FROM (p) WHERE p.Id IN ( SELECT s1.Id FROM s1 WHERE Id=1 AND u != 1) ORDER BY Id DESC;
SELECT p.Id FROM (p) WHERE p.Id IN ( SELECT s1.Id FROM s1 WHERE Id=1 AND u IS NOT NULL) ORDER BY Id DESC;
SELECT p.Id FROM (p) WHERE p.Id IN ( SELECT s1.Id FROM s1 WHERE Id=1 AND u != 1) ORDER BY Id DESC;
CREATE TABLE s2 (Id INT, u INT, KEY o(Id, u) );
INSERT INTO s2 VALUES (1, NULL),(1, NULL);
ANALYZE TABLE s2;
CREATE TABLE s3 (Id INT NOT NULL, u INT NOT NULL, UNIQUE KEY o(Id, u));
INSERT INTO s3 VALUES (1, 2),(1, 3);
ANALYZE TABLE s3;
EXPLAIN SELECT p.Id FROM (p) WHERE p.Id IN ( SELECT s.Id FROM s2 s WHERE Id=1 AND u IS NULL) ORDER BY Id DESC;
EXPLAIN SELECT p.Id FROM (p) WHERE p.Id IN ( SELECT s.Id FROM s3 s WHERE Id=1 AND u IS NOT NULL) ORDER BY Id DESC;
SELECT p.Id FROM (p) WHERE p.Id IN ( SELECT s.Id FROM s2 s WHERE Id=1 AND u IS NULL) ORDER BY Id DESC;
SELECT p.Id FROM (p) WHERE p.Id IN ( SELECT s.Id FROM s3 s WHERE Id=1 AND u IS NOT NULL) ORDER BY Id DESC;
DROP TABLE p, s, s1, s2, s3;
CREATE TABLE t1 (f1 varchar(1) DEFAULT NULL);
INSERT INTO t1 VALUES ('5');
CREATE TABLE t2 (f1 varchar(1) DEFAULT NULL);
INSERT INTO t2 VALUES ('Y');
PREPARE prep_stmt FROM "SELECT t2.f1 FROM (t2 LEFT JOIN t1  ON (1 = ANY (SELECT f1 FROM t1 WHERE 1 IS NULL)))" ;
EXECUTE prep_stmt ;
DROP TABLE t1,t2;
CREATE TABLE t1 (f1 varchar(1) DEFAULT NULL);
INSERT INTO t1 VALUES ('Z') ;
CREATE TABLE t2 (f1 varchar(1) DEFAULT NULL);
INSERT INTO t2 VALUES ('Z') ;
PREPARE prep_stmt FROM " SELECT t2.f1 FROM t2 LEFT OUTER JOIN (SELECT  * FROM t2 WHERE ('y',1)  IN (SELECT alias1.f1 , 0 FROM t1 AS alias1 LEFT JOIN t2 ON 0)) AS alias ON 0";
EXECUTE prep_stmt ;
PREPARE prep_stmt FROM " SELECT t2.f1 FROM (t2 LEFT OUTER JOIN (SELECT  * FROM t2 WHERE ('y',1)  IN (SELECT alias1.f1 , 0 FROM      (t1 INNER JOIN  (t1 AS alias1 LEFT JOIN t2 ON 0) ON 0))) AS alias ON 0)";
EXECUTE prep_stmt ;
DROP TABLE t1,t2;
CREATE TABLE t1 (cv VARCHAR(1) DEFAULT NULL);
INSERT INTO t1 VALUES ('h'), ('Q'), ('I'), ('q'), ('W');
ANALYZE TABLE t1;
EXPLAIN SELECT cv FROM t1 WHERE EXISTS (SELECT alias1.cv AS field1 FROM t1 AS alias1 RIGHT JOIN t1 AS alias2 ON alias1.cv = alias2.cv );
SELECT cv FROM t1 WHERE EXISTS (SELECT alias1.cv AS field1 FROM t1 AS alias1 RIGHT JOIN t1 AS alias2 ON alias1.cv = alias2.cv );
DROP TABLE t1;
CREATE TABLE t1 (col_varchar_key varchar(1) DEFAULT NULL);
EXPLAIN SELECT * FROM t1 WHERE col_varchar_key IN (SELECT col_varchar_key FROM t1 WHERE col_varchar_key = (SELECT col_varchar_key FROM t1 WHERE col_varchar_key > @var1 ) );
SELECT * FROM t1 WHERE col_varchar_key IN (SELECT col_varchar_key FROM t1 WHERE col_varchar_key = (SELECT col_varchar_key FROM t1 WHERE col_varchar_key > @var1 ) );
EXPLAIN SELECT * FROM t1 WHERE col_varchar_key IN (SELECT col_varchar_key FROM t1 WHERE col_varchar_key = (SELECT col_varchar_key FROM t1 WHERE col_varchar_key = RAND() ) );
SELECT * FROM t1 WHERE col_varchar_key IN (SELECT col_varchar_key FROM t1 WHERE col_varchar_key = (SELECT col_varchar_key FROM t1 WHERE col_varchar_key = RAND() ) );
DROP TABLE t1;
CREATE TABLE t1 ( pk integer NOT NULL PRIMARY KEY, f1 varchar(1), KEY k1 (f1) );
CREATE TABLE t2 ( pk integer NOT NULL PRIMARY KEY );
CREATE VIEW v2 AS select * FROM t2;
INSERT INTO t1 VALUES (1, 'G');
INSERT INTO t1 VALUES (2, 'j');
INSERT INTO t1 VALUES (3, 'K');
INSERT INTO t1 VALUES (4, 'v');
INSERT INTO t1 VALUES (5, 'E');
ANALYZE TABLE t1, t2;
EXPLAIN FORMAT=tree SELECT * FROM t1 WHERE pk IN ( SELECT pk FROM t1 LEFT JOIN v2 USING (pk) WHERE f1 >= 'o' );
DROP TABLE t1, t2;
DROP VIEW v2;
CREATE TABLE t1 ( f1 varchar(1), KEY k1 (f1) );
INSERT INTO t1 VALUES ('6'),('6');
EXPLAIN FORMAT=tree SELECT 1 WHERE ( SELECT 1 FROM t1 LEFT JOIN t1 AS t2 ON 'f' IN ( SELECT f1 FROM t1 ) WHERE EXISTS ( SELECT * FROM t1 LEFT JOIN t1 AS t3 ON t3.f1='a' ) );
DROP TABLE t1;
CREATE TABLE t1 ( pk integer PRIMARY KEY, f1 integer, f2 varchar(1) );
INSERT INTO t1 VALUES (1,100,'x'),(2,200,'y');
CREATE TABLE t2 ( f2 varchar(1) );
ANALYZE TABLE t1, t2;
EXPLAIN FORMAT=tree SELECT * FROM t1 LEFT JOIN t1 AS t3 ON t1.pk = t3.pk AND t1.f2 IN ( SELECT f2 FROM t2 ) WHERE EXISTS ( SELECT * FROM t1 AS t4, t2 AS t5 ) AND t1.f1 = 80 AND t1.pk > t1.f1;
DROP TABLE t1, t2;
CREATE TABLE t1 (f1 varchar(1));
INSERT INTO t1 VALUES ('5');
CREATE TABLE t2 (f1 varchar(1));
INSERT INTO t2 VALUES ('Y');
PREPARE prep_stmt FROM "SELECT t2.f1 FROM (t2 LEFT JOIN t1  ON 1 IN (SELECT f1 FROM t1 WHERE FALSE))" ;
EXECUTE prep_stmt ;
DROP TABLE t1,t2;
set optimizer_switch='derived_merge=off';
CREATE TABLE t1 ( pk INTEGER, col_int_key INTEGER, col_datetime_gckey DATETIME, col_time_gckey TIME, col_varchar_key VARCHAR(15) );
CREATE TABLE t2 ( pk INTEGER, col_int_key INTEGER, col_varchar_key VARCHAR(15) );
EXPLAIN SELECT alias1.col_time_gckey AS field1, alias1.col_datetime_gckey AS field2 FROM t1 AS alias1, (SELECT DISTINCT sq1_alias2.* FROM t1 AS sq1_alias1, t1 AS sq1_alias2 ) AS alias2, (SELECT sq2_alias1.* FROM t1 AS sq2_alias1 RIGHT OUTER JOIN t1 AS sq2_alias2 INNER JOIN t2 AS sq2_alias3 ON sq2_alias3.col_int_key = sq2_alias2.col_int_key ON sq2_alias3.col_varchar_key = sq2_alias2.col_varchar_key ) AS alias3 WHERE alias2.col_int_key = SOME (WITH qn AS (SELECT sq3_alias1.pk AS sq3_field1 FROM t1 AS sq3_alias1 WHERE sq3_alias1.col_int_key = alias3.pk ) SELECT /*+ MERGE(qn) */ * FROM qn );
SELECT alias1.col_time_gckey AS field1, alias1.col_datetime_gckey AS field2 FROM t1 AS alias1, (SELECT DISTINCT sq1_alias2.* FROM t1 AS sq1_alias1, t1 AS sq1_alias2 ) AS alias2, (SELECT sq2_alias1.* FROM t1 AS sq2_alias1 RIGHT OUTER JOIN t1 AS sq2_alias2 INNER JOIN t2 AS sq2_alias3 ON sq2_alias3.col_int_key = sq2_alias2.col_int_key ON sq2_alias3.col_varchar_key = sq2_alias2.col_varchar_key ) AS alias3 WHERE alias2.col_int_key = SOME (WITH qn AS (SELECT sq3_alias1.pk AS sq3_field1 FROM t1 AS sq3_alias1 WHERE sq3_alias1.col_int_key = alias3.pk ) SELECT /*+ MERGE(qn) */ * FROM qn );
DROP TABLE t1, t2;
set optimizer_switch=default;
CREATE TABLE t1 ( pk INTEGER );
INSERT INTO t1 VALUES (1);
CREATE TABLE t2 ( pk INTEGER PRIMARY KEY );
INSERT INTO t2 VALUES(1);
CREATE TABLE t3 ( col_int_key INTEGER, pk INTEGER );
INSERT INTO t3 VALUES (31,4),(2,5),(17,3),(5,2),(17,1);
CREATE TABLE t4 ( col_int_key INTEGER, col_int_unique INTEGER, UNIQUE KEY ix2 (col_int_key,col_int_unique) );
INSERT INTO t4 VALUES (6,2),(34,3);
ANALYZE TABLE t1, t2, t3, t4;
set optimizer_switch='firstmatch=off';
EXPLAIN FORMAT=tree SELECT * FROM t1 WHERE pk IN ( SELECT t2.pk FROM t4 RIGHT JOIN t3 ON t4.col_int_key = t3.pk RIGHT JOIN t2 ON t3.col_int_key <> t2.pk );
SELECT * FROM t1 WHERE pk IN ( SELECT t2.pk FROM t4 RIGHT JOIN t3 ON t4.col_int_key = t3.pk RIGHT JOIN t2 ON t3.col_int_key <> t2.pk );
DROP TABLE t1, t2, t3, t4;
set optimizer_switch=default;
CREATE TABLE t1 ( pk integer, f1 varchar(1) );
INSERT INTO t1 VALUES (1,'D'), (20,'G');
ANALYZE TABLE t1;
EXPLAIN FORMAT=TREE SELECT d0.f1, d0.pk, t1.pk, t1.f1 FROM ( SELECT DISTINCT * FROM t1 ) AS d0 LEFT JOIN t1 ON d0.pk IN ( SELECT 1 FROM t1 ) ORDER BY d0.f1;
SELECT d0.f1, d0.pk, t1.pk, t1.f1 FROM ( SELECT DISTINCT * FROM t1 ) AS d0 LEFT JOIN t1 ON d0.pk IN ( SELECT 1 FROM t1 ) ORDER BY d0.f1;
DROP TABLE t1;
CREATE TABLE t1(a TINYBLOB);
INSERT INTO t1 VALUES('aaa'),('bbb'),(''),('ccc');
SELECT DISTINCT * FROM t1 ORDER BY UUID_TO_BIN( ST_ISEMPTY( ST_POINTFROMTEXT( ST_ASWKT( NOT EXISTS( SELECT 1 FROM t1 WHERE IS_UUID(CAST(SHA(a>>0xA7FE1B22)AS JSON)) WINDOW w1 AS() ),'AXIS-ORDER=SRID-DEFINED'       ),1,'AXIS-ORDER=LONG-LAT'     ) ) );
DROP TABLE t1;
CREATE TABLE t1(a DATETIME(2));
INSERT INTO t1 VALUES(NOW(2)),(NOW(2));
SELECT STD(IS_FREE_LOCK(0x2ADA5C38)),1 FROM t1 WHERE a+(EXISTS(SELECT 1));
DROP TABLE t1;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES(1),(2),(3);
SELECT 1 FROM t1 WHERE (EXISTS(SELECT 1 FROM t1 WHERE (SELECT 1 FROM t1 WINDOW w1 AS())))/1;
DROP TABLE t1;
CREATE TABLE t1 (vc varchar(1) NOT NULL);
CREATE VIEW v1 AS SELECT * FROM t1 WHERE 5 IN (SELECT 1) IS UNKNOWN;
DROP VIEW v1;
DROP TABLE t1;
set optimizer_switch='block_nested_loop=off,batched_key_access=off';
CREATE TABLE t1 ( field1 integer );
INSERT INTO t1 VALUES (13);
CREATE TABLE t2 ( field2 integer );
INSERT INTO t2 VALUES (18);
CREATE TABLE t3 ( field3 integer );
INSERT INTO t3 VALUES (1);
UPDATE t3 SET field3 = 9 WHERE field3 IN ( SELECT 1 FROM ( SELECT * FROM t2 ) AS alias1 WHERE EXISTS ( SELECT * FROM t1 WHERE field1 <> alias1.field2 ) );
DROP TABLE t1, t2, t3;
set optimizer_switch=default;
CREATE TABLE t1 ( f1 integer NOT NULL PRIMARY KEY, f2 varchar(1), KEY f2_idx (f2) );
INSERT INTO t1 VALUES (20,'2');
ANALYZE TABLE t1;
explain format=tree SELECT ( SELECT t2.f2 FROM t1 JOIN ( t1 AS t2 LEFT JOIN t1 AS t3 USING (f2) ) ON t3.f2 = t2.f2 WHERE t2.f1 > table1.f2 ) FROM t1 AS table1;
SELECT ( SELECT t2.f2 FROM t1 JOIN ( t1 AS t2 LEFT JOIN t1 AS t3 USING (f2) ) ON t3.f2 = t2.f2 WHERE t2.f1 > table1.f2 ) FROM t1 AS table1;
DROP TABLE t1;
CREATE TABLE t1 ( pk int NOT NULL, col_int int, col_time_key time, col_varchar_key varchar(1), PRIMARY KEY (pk), KEY idx_CC_col_time_key (col_time_key), KEY idx_CC_col_varchar_key (col_varchar_key) );
INSERT INTO t1 VALUES (1,1244696008,'15:54:41','u'), (2,893471119,'16:03:34','e'), (3,462275345,'06:57:11','g'), (4,2067212400,'06:56:19','E'), (5,-270339471,'03:38:07','d'), (6,-734590502,'03:18:29','Q'), (7,-1230000720,'15:56:21','C'), (8,-1086526061,'19:08:49','B'), (9,-1620913518,'22:44:04','3'), (10,1210237478,'11:18:51','i'), (11,-886894023,'20:28:00','A'), (12,-1490912666,'17:51:14','H'), (13,149282252,'16:51:14','Z'), (14,1451237940,'09:13:29','L'), (15,1933327447,'11:14:05','2'), (16,-693463421,'05:29:04','V'), (17,333204980,'16:24:13','O'), (18,279626907,'09:45:54','t'), (19,-1372487638,'17:45:04','a'), (20,-150563684,'15:32:40','D');
ANALYZE TABLE t1;
explain SELECT table2.col_time_key AS field1 FROM t1 AS table1 LEFT JOIN t1 AS table2 ON table1.col_varchar_key = table2.col_varchar_key WHERE 1 IN (SELECT 1 FROM t1 AS subq WHERE subq.pk <= (SELECT DISTINCT MIN(subq.col_int) FROM t1 as alias1 ) );
SELECT table2.col_time_key AS field1 FROM t1 AS table1 LEFT JOIN t1 AS table2 ON table1.col_varchar_key = table2.col_varchar_key WHERE 1 IN (SELECT 1 FROM t1 AS subq WHERE subq.pk <= (SELECT DISTINCT MIN(subq.col_int) FROM t1 as alias1 ) );
DROP TABLE t1;
CREATE TABLE t1 ( pk int NOT NULL, col_int int DEFAULT NULL );
CREATE TABLE t2 ( pk int NOT NULL, col_int int DEFAULT NULL );
INSERT INTO t2 VALUES (1, 2);
PREPARE st FROM "DELETE outr1.*  FROM t1 AS outr1 RIGHT OUTER JOIN t2 AS outr2       ON outr1.col_int = outr2.col_int  WHERE (0, 3) NOT IN (SELECT innr1.pk AS x, innr1.col_int AS y                       FROM t2 AS innr1                       WHERE outr1.col_int = 25)";
EXECUTE st;
EXECUTE st;
DEALLOCATE PREPARE st;
DROP TABLE t1, t2;
CREATE TABLE t1 ( f1 INTEGER );
INSERT INTO t1 VALUES (1), (2), (3);
CREATE TABLE t2 ( f2 VARCHAR(10) );
CREATE TABLE t3 ( f3 INTEGER UNIQUE NOT NULL );
CREATE TABLE t4 ( f4 INTEGER );
INSERT INTO t4 VALUES (13), (14), (NULL);
ANALYZE TABLE t1, t2, t3, t4;
explain format=tree SELECT * FROM t1 WHERE NOT EXISTS ( SELECT * FROM t4 LEFT JOIN t3 ON t4.f4 = t3.f3 WHERE 'abc' IN ( SELECT t2.f2 FROM t2 WHERE t3.f3 = 1 HAVING t2.f2 = 'xyz'      ) );
SELECT * FROM t1 WHERE NOT EXISTS ( SELECT * FROM t4 LEFT JOIN t3 ON t4.f4 = t3.f3 WHERE 'abc' IN ( SELECT t2.f2 FROM t2 WHERE t3.f3 = 1 HAVING t2.f2 = 'xyz'      ) );
DROP TABLE t1, t2, t3, t4;
CREATE TABLE table_city (id int NOT NULL PRIMARY KEY);
INSERT INTO table_city (id) VALUES (1),(2),(3),(4),(5),(6);
CREATE TABLE b (c INTEGER, KEY idx_b (c));
CREATE TABLE c (c INTEGER, KEY idx_c (c));
CREATE TABLE d (c INTEGER, KEY idx_d (c));
INSERT INTO b VALUES (1), (2);
INSERT INTO c VALUES (1), (2);
INSERT INTO d VALUES (1), (2);
ANALYZE TABLE b, c, d;
EXPLAIN FORMAT=tree SELECT /*+ JOIN_ORDER(b, c_inner, c_inner_inner, d, c) */ d.c FROM d JOIN c WHERE d.c IN ( SELECT b.c FROM b LEFT JOIN c AS c_inner ON c_inner.c = b.c WHERE EXISTS ( SELECT c FROM c AS c_inner_inner ) ) ORDER BY d.c;
SELECT /*+ JOIN_ORDER(b, c_inner, c_inner_inner, d, c) */ d.c FROM d JOIN c WHERE d.c IN ( SELECT b.c FROM b LEFT JOIN c AS c_inner ON c_inner.c = b.c WHERE EXISTS ( SELECT c FROM c AS c_inner_inner ) ) ORDER BY d.c;
DROP TABLE b, c, d;
CREATE TABLE t1(pk INT PRIMARY KEY, col_int_nokey INT);
INSERT INTO t1 VALUES(26, 12);
ANALYZE TABLE t1;
EXPLAIN SELECT /*+ JOIN_ORDER(t3,t1) */ * FROM t1 WHERE 3 IN (SELECT t3.col_int_nokey FROM t1 AS t3);
EXPLAIN FORMAT=TREE SELECT /*+ JOIN_ORDER(t3,t1) */ * FROM t1 WHERE 3 IN (SELECT t3.col_int_nokey FROM t1 AS t3);
EXPLAIN SELECT /*+ JOIN_ORDER(t1,t3,t2) */ * FROM t1 LEFT JOIN t1 AS t2 ON 3 IN (SELECT t3.col_int_nokey FROM t1 AS t3) WHERE t1.pk=26;
EXPLAIN FORMAT=TREE SELECT /*+ JOIN_ORDER(t1,t3,t2) */ * FROM t1 LEFT JOIN t1 AS t2 ON 3 IN (SELECT t3.col_int_nokey FROM t1 AS t3) WHERE t1.pk=26;
DROP TABLE t1;
CREATE TABLE t1(f1 varchar(1)) ;
SELECT 1 FROM t1 AS table2 LEFT JOIN (SELECT 'c') AS table3(f1) ON table3.f1 = table2.f1 WHERE table2.f1 IN (SELECT 1 FROM (SELECT 1314830897) AS t1(pk) WHERE t1.pk <= ANY(SELECT 5)) AND FALSE;
DROP TABLE t1;
CREATE VIEW v1 AS SELECT 1 FROM (SELECT 1) AS table1(pk) JOIN (SELECT 1) AS table2 ON table1.pk = (SELECT 1) WHERE table1.pk IN ((SELECT 1), 2);
SELECT * FROM v1;
DROP VIEW v1;
CREATE TABLE t(a INT);
INSERT INTO t VALUES (1),(2),(3);
ANALYZE TABLE t;
SELECT * FROM t AS upper JOIN LATERAL (SELECT DISTINCT ROW_NUMBER() OVER () AS rn FROM t WHERE (t.a > upper.a)) der ;
DROP TABLE t;
CREATE TABLE t1 (a INTEGER, b INTEGER);
CREATE TABLE t2 (a INTEGER);
INSERT INTO t1 VALUES(1,10),(2,10),(3,30);
INSERT INTO t2 VALUES(2),(3),(2),(4);
ANALYZE TABLE t1,t2;
set optimizer_switch='semijoin=on,materialization=on,loosescan=off,firstmatch=off,duplicateweedout=off';
EXPLAIN SELECT * FROM t1 WHERE (t1.a,t1.b) IN (SELECT t2.a,10 FROM t2);
SELECT * FROM t1 WHERE (t1.a,t1.b) IN (SELECT t2.a,10 FROM t2);
EXPLAIN SELECT * FROM t1 WHERE t1.a IN (SELECT t2.a FROM t2 WHERE 10=t1.b);
SELECT * FROM t1 WHERE t1.a IN (SELECT t2.a FROM t2 WHERE 10=t1.b);
EXPLAIN SELECT * FROM t1 WHERE EXISTS (SELECT * FROM t2 WHERE 10=t1.b AND t1.a=t2.a);
SELECT * FROM t1 WHERE EXISTS (SELECT * FROM t2 WHERE 10=t1.b AND t1.a=t2.a);
DROP TABLE t1,t2;
set optimizer_switch=default;
CREATE TABLE t1 ( col_int INTEGER, pk INTEGER );
INSERT INTO t1 VALUES (6,24),(7,0),(8,2),(0,15);
CREATE TABLE t2 ( pk INTEGER, UNIQUE ( pk ) );
INSERT INTO t2 VALUES (6),(27),(41);
CREATE TABLE t3 ( pk INTEGER );
INSERT INTO t3 VALUES (4),(40),(46);
CREATE TABLE t4 ( col_int INTEGER );
ANALYZE TABLE t1, t2, t3, t4;
EXPLAIN FORMAT=tree SELECT * FROM t1 JOIN t2 ON t1.pk = t2.pk JOIN t3 ON t2.pk = t3.pk WHERE (t1.col_int + t2.pk) IN ( SELECT col_int FROM t4 );
DROP TABLE t1, t2, t3, t4;
CREATE TABLE t1 ( col1 CHAR(16), UNIQUE KEY col1_idx (col1) );
CREATE TABLE t2 ( col1 INTEGER, col2 INTEGER, UNIQUE KEY ix1 (col1) );
CREATE TABLE t3 ( col1 INTEGER, col2 INTEGER NOT NULL, UNIQUE KEY ix1 (col1) );
ANALYZE TABLE t1,t2,t3;
EXPLAIN FORMAT=tree SELECT /*+ JOIN_ORDER(t3,t2,t1) */ * FROM t1 WHERE t1.col1 = ANY ( SELECT t1.col1 + t2.col2 FROM t2 JOIN t3 ON t2.col2 = t3.col2 AND t2.col1 =  t3.col1 WHERE t2.col2 BETWEEN 2 AND 9 );
DROP TABLE t1, t2, t3;
CREATE TABLE t1 (col_int_key INT);
INSERT INTO t1 VALUES (NULL);
CREATE TABLE t2 ( col_int_key INT, col_int_unique INT, UNIQUE KEY (col_int_unique), KEY (col_int_key) );
INSERT INTO t2 VALUES (26,14),(3,46),(45,2),(18,30),(11,22),(19,8),(41,3),(1,5), (1,9),(38,4),(13,38),(32,12),(11,7),(2,26),(5,10),(16,45);
CREATE TABLE t3 (pk INT NOT NULL PRIMARY KEY);
ANALYZE TABLE t1,t2,t3;
explain format = tree SELECT * FROM t1 LEFT JOIN t2 ON t1.col_int_key = t2.col_int_key JOIN t3 ON t1.col_int_key =  t3.pk WHERE t3.pk+6 NOT IN ( SELECT /*+ subquery(materialization) */ table1s.col_int_unique AS field4 FROM t2 AS table1s);
SELECT * FROM t1 LEFT JOIN t2 ON t1.col_int_key = t2.col_int_key JOIN t3 ON t1.col_int_key =  t3.pk WHERE t3.pk+6 NOT IN ( SELECT /*+ subquery(materialization) */ table1s.col_int_unique AS field4 FROM t2 AS table1s);
DROP TABLE t1,t2,t3;
CREATE TABLE t1 ( col_datetime datetime DEFAULT NULL, col_varchar_key varchar(1) DEFAULT NULL, col_char char(1) DEFAULT NULL, col_char_key char(1) DEFAULT NULL, col_tinyint tinyint DEFAULT NULL, col_tinyint_key tinyint DEFAULT NULL );
CREATE TABLE t2 ( col_real_key double DEFAULT NULL, col_mediumint mediumint DEFAULT NULL );
CREATE TABLE t3 ( col_varchar varchar(1) DEFAULT NULL, col_varchar_key varchar(1) DEFAULT NULL );
explain SELECT COUNT(table1.col_datetime) AS field1 FROM t1 AS table1 RIGHT JOIN t1 AS table2 ON table1.col_varchar_key = table2.col_char WHERE table1.col_char_key IN (SELECT sq2_t1.col_real_key FROM t2 AS sq2_t1 JOIN t3 AS sq2_t2 JOIN t1 AS sq2_t3 ON INSTR(sq2_t3.col_tinyint, 'K') = sq2_t2.col_varchar ON sq2_t3.col_varchar_key = sq2_t2.col_varchar_key WHERE sq2_t1.col_mediumint IN (SELECT sq1_t1.col_varchar_key FROM t1 AS sq1_t1 JOIN t1 AS sq1_t2 ON sq1_t2.col_tinyint_key = table1.col_tinyint_key ) ) OR RTRIM(table1.col_tinyint_key) IS NOT NULL;
SELECT COUNT(table1.col_datetime) AS field1 FROM t1 AS table1 RIGHT JOIN t1 AS table2 ON table1.col_varchar_key = table2.col_char WHERE table1.col_char_key IN (SELECT sq2_t1.col_real_key FROM t2 AS sq2_t1 JOIN t3 AS sq2_t2 JOIN t1 AS sq2_t3 ON INSTR(sq2_t3.col_tinyint, 'K') = sq2_t2.col_varchar ON sq2_t3.col_varchar_key = sq2_t2.col_varchar_key WHERE sq2_t1.col_mediumint IN (SELECT sq1_t1.col_varchar_key FROM t1 AS sq1_t1 JOIN t1 AS sq1_t2 ON sq1_t2.col_tinyint_key = table1.col_tinyint_key ) ) OR RTRIM(table1.col_tinyint_key) IS NOT NULL;
DROP TABLE t1, t2, t3;
CREATE TABLE t1 ( col_int_key bigint DEFAULT NULL, KEY(col_int_key) ) PARTITION BY KEY(col_int_key) PARTITIONS 10;
INSERT INTO t1 VALUES (NULL);
SELECT 42 WHERE 11 NOT IN (SELECT col_int_key FROM t1);
DROP TABLE t1;
CREATE TABLE t(a INT);
SELECT 1= ( SELECT 1 FROM ( SELECT 1 FROM t LEFT JOIN ( SELECT 1 FROM t WHERE NOT EXISTS ( SELECT 1 FROM t WINDOW w1 AS (PARTITION BY a) ) ) AS x ON 1 > 2 ) AS z );
DROP TABLE t;
CREATE TABLE t1 ( col_varchar varchar(1), col_varchar_key varchar (1), key (col_varchar_key) );
CREATE TABLE t2 ( col_varchar varchar(1), col_int_key int, key (col_int_key) );
INSERT INTO t2 VALUES ('t', 2);
CREATE TABLE t3 ( pk integer auto_increment, col_int int, col_varchar_key varchar(1), primary key (pk), key (col_varchar_key) );
INSERT INTO t3 (col_int, col_varchar_key) VALUES (2, 'e'), (NULL, 'n'), (2, NULL), (0, 'a'), (NULL, 'd'), (1, 's'), (NULL, 'v'), (7, 'l'), (118, NULL), (NULL, 'l'), (8, 'c'), (4, 'a'), (8, 'r'), (1, 'q'), (3, 'o'), (NULL, 'q'), (2, 'j'), (6, 'f'), (5, 'e'), (7, 'p');
CREATE TABLE t4 ( col_int_key int, col_varchar varchar(1), key (col_int_key) );
INSERT INTO t4 VALUES (5, 'k'), (5, 'g'), (5, 'k'), (1, 'e'), (9, 'b'), (NULL, 'b'), (141, 'w'), (0, 'i'), (240, 'x'), (1, 'h'), (NULL, 'p'), (201, 'v'), (5, 'e'), (NULL, 'e'), (2, 'a'), (3, 'r'), (NULL, 'f'), (8, 's'), (7, 'k'), (6, 'k');
CREATE TABLE t5 ( col_int int, col_varchar_key varchar(1), pk integer auto_increment, primary key(pk) );
SET @var1 = 'h', @var2 =  66 ;
EXECUTE ps USING @var1, @var2;
EXECUTE ps USING @var1, @var2;
DROP TABLE t1, t2, t3, t4, t5;
CREATE TABLE t1( pk INTEGER, col_int INTEGER, col_varchar VARCHAR(1), col_int_key INTEGER, col_datetime_key DATETIME, col_varchar_key VARCHAR(1) ) DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;
CREATE PROCEDURE p1() LANGUAGE SQL SELECT DISTINCT MIN(outr.col_varchar) AS x FROM t1 AS outr2 LEFT JOIN t1 AS outr ON outr2.col_int_key <> outr.pk WHERE outr.col_int IN (SELECT innr.col_int_key AS y FROM t1 AS innr WHERE outr.col_varchar_key = 'z') AND outr.col_datetime_key = '2003-12-04' ORDER BY outr.pk, outr.pk;
CALL p1;
CALL p1;
DROP PROCEDURE p1;
DROP TABLE t1;
CREATE TABLE t (a DECIMAL(61,14),KEY(a));
INSERT INTO t VALUES(0),(-1);
SELECT ( SELECT 1 FROM ( SELECT a FROM (SELECT 1) u ) z ) FROM t GROUP BY 1;
DROP TABLE t;
CREATE TABLE t1 ( pk INTEGER NOT NULL, a VARCHAR(1), PRIMARY KEY (pk) );
INSERT INTO t1 VALUES (3,'N');
INSERT INTO t1 VALUES (4,'e');
INSERT INTO t1 VALUES (5,'7');
INSERT INTO t1 VALUES (6,'7');
ANALYZE TABLE t1;
SELECT * FROM t1 AS table1, t1 AS table2 WHERE table1.pk = 6 HAVING table1.a IN (SELECT a FROM t1);
DROP TABLE t1;
SET optimizer_switch="semijoin=off";
CREATE TABLE t1(a INTEGER, b INTEGER);
CREATE TABLE t2(c INTEGER);
SELECT b FROM t1 HAVING 1 IN (SELECT b FROM t2 WHERE c = 1);
SET optimizer_switch=DEFAULT;
DROP TABLE t1, t2;
CREATE TABLE t(a INTEGER);
INSERT INTO t VALUES(1),(2),(3);
SELECT 1 = (SELECT 1 FROM (SELECT 1 FROM t LEFT JOIN (SELECT 1 FROM t WHERE NOT EXISTS (SELECT 1 FROM t WINDOW w1 AS(PARTITION BY a) ) ) AS x ON 1 > 2 ) AS z );
DROP TABLE t;
CREATE TABLE t1 ( a INTEGER, d VARCHAR(255) NOT NULL, PRIMARY KEY (d) );
INSERT INTO t1 VALUES (1,'1'), (2,'2');
EXPLAIN FORMAT=tree SELECT 1 FROM t1 WHERE d IN (SELECT a FROM t1);
SELECT 1 FROM t1 WHERE d IN (SELECT a FROM t1);
DROP TABLE t1;
CREATE TABLE t1 (c1 int, c2 char(10));
INSERT INTO t1 VALUES (1, 'name1');
INSERT INTO t1 VALUES (2, 'name2');
SET optimizer_switch='semijoin=on';
explain format = tree SELECT a.c2 FROM  t1 AS a WHERE EXISTS (SELECT 1 FROM  t1 AS b WHERE b.c2 = a.c2 LIMIT 1,1);
SELECT a.c2 FROM  t1 AS a WHERE EXISTS (SELECT 1 FROM  t1 AS b WHERE b.c2 = a.c2 LIMIT 1,1);
explain format=tree SELECT a.c2 FROM  t1 AS a WHERE EXISTS (SELECT 1 FROM  t1 AS b WHERE b.c2 = a.c2 LIMIT 0,1);
SELECT a.c2 FROM  t1 AS a WHERE EXISTS (SELECT 1 FROM  t1 AS b WHERE b.c2 = a.c2 LIMIT 0,1);
SET @offset_value=0;
PREPARE explain_stmt FROM "EXPLAIN format = tree SELECT a.c2 FROM  t1 AS a WHERE EXISTS (SELECT 1 FROM  t1 AS b WHERE b.c2 = a.c2 LIMIT ?,1)";
EXECUTE explain_stmt USING @offset_value;
PREPARE stmt FROM "SELECT a.c2 FROM  t1 AS a WHERE EXISTS (SELECT 1 FROM  t1 AS b WHERE b.c2 = a.c2 LIMIT ?,1)";
EXECUTE stmt USING @offset_value;
explain format = tree SELECT a.c2 FROM  t1 AS a WHERE EXISTS (SELECT 1 FROM  t1 AS b WHERE b.c2 = a.c2 LIMIT 0,0);
SELECT a.c2 FROM  t1 AS a WHERE EXISTS (SELECT 1 FROM  t1 AS b WHERE b.c2 = a.c2 LIMIT 0,0);
DROP TABLE t1;
SET optimizer_switch=default;
CREATE TABLE t1 (a INTEGER);
CREATE TABLE t2 (b INTEGER);
SELECT ( SELECT b FROM t2 ORDER BY a, MIN(a) LIMIT 1 ) FROM t1 GROUP BY a;
DROP TABLE t1, t2;
CREATE TABLE t1 (a VARCHAR(1));
INSERT INTO t1 VALUES (NULL), ('r');
ANALYZE TABLE t1;
SELECT * FROM t1 WHERE a <= ALL ( SELECT 'a' FROM t1 AS t2 WHERE t2.a < t1.a AND t2.a NOT IN (SELECT a FROM t1) );
DROP TABLE t1;
CREATE TABLE t1 ( a INTEGER, PRIMARY KEY (a) ) PARTITION BY LINEAR KEY () PARTITIONS 4;
SELECT 1 FROM t1 WHERE ( SELECT a FROM ( SELECT 1 ) AS q ) IN ( SELECT a FROM t1 WHERE a > 0 GROUP BY a );
DROP TABLE t1;
CREATE TABLE t1 (a DATETIME);
INSERT INTO t1 VALUES ('2000-01-01 00:00:00');
INSERT INTO t1 VALUES ('2000-01-01 00:00:00');
SET @b := _latin1 'a';
SELECT 1 FROM t1 WHERE (@b IN ( SELECT a FROM t1 )) = a;
DROP TABLE t1;
CREATE TABLE t(pk INT PRIMARY KEY);
SELECT 1 FROM t WHERE CAST(pk AS UNSIGNED INTEGER) = 1 AND pk = (SELECT 1 FROM t);
DROP TABLE t;
CREATE TABLE t1 (a INTEGER);
INSERT INTO t1 VALUES (1);
SELECT 1 FROM t1 GROUP BY ( SELECT COALESCE(18446744073709551614, COUNT(ST_AREA(ST_ASWKT(a)))) ) WITH ROLLUP;
DROP TABLE t1;
CREATE TABLE t1 ( c INTEGER, KEY (c) );
CREATE TABLE t2 ( pk INTEGER );
INSERT INTO t2 VALUES (7);
CREATE TABLE t3 ( a INTEGER, b INTEGER, c INTEGER, KEY (a) );
INSERT INTO t3 VALUES (3,4,NULL);
ANALYZE TABLE t1, t2, t3;
UPDATE t1, t2 SET t1.c = 0 WHERE t1.c <> ( SELECT t3.c FROM t3 JOIN t3 AS t3_b ON t3_b.a > t3.a WHERE t3.b <= t3.b XOR t2.pk = 3 );
DROP TABLE t1, t2, t3;
CREATE TABLE t1 ( a BLOB );
SELECT t1.a FROM t1, LATERAL ( SELECT t1.a FROM t1 AS inner_t1 LIMIT 1 ) AS d1 WHERE 1 IN ( SELECT a FROM t1 ) ORDER BY a;
DROP TABLE t1;
CREATE TABLE t1 (a INTEGER);
INSERT INTO t1 VALUES (1);
SELECT * FROM ( SELECT a, JSON_ARRAYAGG(a) OVER () AS b FROM t1 ) AS d1 WHERE (a,b) IN ( SELECT a, JSON_ARRAYAGG(a) OVER () AS b FROM t1 );
DROP TABLE t1;
CREATE TABLE t1 ( a VARCHAR(1) );
INSERT INTO t1 VALUES ('0');
SELECT 1 FROM t1 WHERE a NOT IN ( SELECT 1 FROM t1 AS t2 LEFT JOIN t1 AS t3 ON (t2.a = t3.a OR 0 IN ( SELECT REGEXP_LIKE(a, '') FROM t1 )) );
DROP TABLE t1;
