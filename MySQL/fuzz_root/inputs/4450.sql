SET optimizer_switch='subquery_to_derived=on';
CREATE TABLE t1(a INT);
CREATE TABLE t2(a INT);
INSERT INTO t1 VALUES (1),(2),(3),(4);
INSERT INTO t2 VALUES (1),(2);
CREATE TABLE t0 AS SELECT * FROM t1;
CREATE TABLE t3(a INT, b INT);
INSERT INTO t3 VALUES (1,3), (2,3);
ANALYZE TABLE t1, t2, t0, t3;
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2);
SELECT t1.* FROM t1 LEFT OUTER JOIN (SELECT COUNT(a) AS cnt FROM t2) AS derived ON TRUE WHERE t1.a > derived.cnt;
explain SELECT t1.* FROM t1 LEFT OUTER JOIN (SELECT COUNT(a) AS cnt FROM t2) AS derived ON TRUE WHERE t1.a > derived.cnt;
SELECT t0.*, t1.* FROM t0 LEFT OUTER JOIN t1 ON t0.a != t1.a WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2);
explain SELECT t0.*, t1.* FROM t0 LEFT OUTER JOIN t1 ON t0.a != t1.a WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2);
SELECT * FROM t0 LEFT OUTER JOIN t1 on t0.a = t1.a WHERE t0.a > (SELECT COUNT(a) AS cnt FROM t2);
explain SELECT * FROM t0 LEFT OUTER JOIN t1 on t0.a = t1.a WHERE t0.a > (SELECT COUNT(a) AS cnt FROM t2);
SELECT t0.*, t1.* FROM (t0 LEFT OUTER JOIN t1 ON t0.a != t1.a) LEFT OUTER JOIN (SELECT COUNT(a) AS cnt FROM t2) AS derived ON TRUE WHERE t1.a > derived.cnt;
explain SELECT t0.*, t1.* FROM (t0 LEFT OUTER JOIN t1 ON t0.a != t1.a) LEFT OUTER JOIN (SELECT COUNT(a) AS cnt FROM t2) AS derived ON TRUE WHERE t1.a > derived.cnt;
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2) OR t1.a = 2;
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2) OR t1.a = 2;
SELECT t1.* FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2) AND t1.a < (SELECT MAX(a) * 4 AS mx FROM t2);
explain SELECT t1.* FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2) AND t1.a < (SELECT MAX(a) * 4 AS mx FROM t2);
SELECT t1.* FROM t1 LEFT JOIN (SELECT COUNT(a) AS cnt FROM t2) AS lj1 ON TRUE LEFT JOIN (SELECT MAX(a) * 4 AS mx FROM t2) AS lj2 ON TRUE WHERE t1.a > cnt AND t1.a < mx;
explain SELECT t1.* FROM t1 LEFT JOIN (SELECT COUNT(a) AS cnt FROM t2) AS lj1 ON TRUE LEFT JOIN (SELECT MAX(a) * 4 AS mx FROM t2) AS lj2 ON TRUE WHERE t1.a > cnt AND t1.a < mx;
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t3);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t3);
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t3 GROUP BY a);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t3 GROUP BY a);
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1);
SELECT * FROM t1 WHERE t1.a > (SELECT a from t1 WHERE false);
explain SELECT * FROM t1 WHERE t1.a > (SELECT a from t1 WHERE false);
SELECT a + (SELECT a from t1 WHERE false) FROM t1;
explain SELECT a + (SELECT a from t1 WHERE false) FROM t1;
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 1);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 1);
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 1 OFFSET 1);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 1 OFFSET 1);
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 1 OFFSET 0);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 1 OFFSET 0);
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 2 OFFSET 0);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 2 OFFSET 0);
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 2 OFFSET 1);
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 2 OFFSET 1);
SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION (SELECT 1 LIMIT 1));
explain SELECT * FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION (SELECT 1 LIMIT 1));
SELECT * FROM t1 WHERE t1.a > (SELECT a FROM t2 LIMIT 1);
explain SELECT * FROM t1 WHERE t1.a > (SELECT a FROM t2 LIMIT 1);
SELECT * FROM t1 WHERE t1.a > (SELECT a FROM t2);
explain SELECT * FROM t1 WHERE t1.a > (SELECT a FROM t2);
EXPLAIN SELECT (SELECT SUM(a) + (SELECT SUM(t1.a) FROM t1) + SUM(t3.a) FROM t2) FROM t3;
EXPLAIN SELECT SUM(a), (SELECT SUM(b) FROM t3) scalar FROM t1 HAVING SUM(a) > scalar;
EXPLAIN SELECT t1.a + (@foo:=3) FROM t1 WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2);
explain SELECT DISTINCT 3 + (SELECT COUNT(a) + RAND() FROM t1) FROM t1;
SELECT COUNT(*) > 1 FROM (SELECT DISTINCT 3 + (SELECT COUNT(a) + RAND() FROM t1) FROM t1) AS dt;
SELECT t1.a, t2.a FROM t1 JOIN t2 ON t1.a+t2.a = (SELECT COUNT(*) FROM t1);
explain SELECT t1.a, t2.a FROM t1 JOIN t2 ON t1.a+t2.a = (SELECT COUNT(*) FROM t1);
SELECT t1.a, t2.a, t3.a FROM t1 JOIN t2 ON t1.a+t2.a = (SELECT COUNT(*) FROM t1) JOIN t3 ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
explain SELECT t1.a, t2.a, t3.a FROM t1 JOIN t2 ON t1.a+t2.a = (SELECT COUNT(*) FROM t1) JOIN t3 ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
SELECT t1.a, t2.a, t3.a FROM t1 LEFT JOIN ( t2 JOIN t3 ON t2.a = (SELECT COUNT(*) FROM t1) ) ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
explain SELECT t1.a, t2.a, t3.a FROM t1 LEFT JOIN ( t2 JOIN t3 ON t2.a = (SELECT COUNT(*) FROM t1) ) ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
SET optimizer_switch='subquery_to_derived=default';
SELECT t1.a, t2.a, t3.a FROM t1 LEFT JOIN ( t2 JOIN t3 ON t2.a = (SELECT COUNT(*) FROM t1) ) ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
SET optimizer_switch='subquery_to_derived=on';
SELECT t1.a, t2.a, t3.a FROM t1 LEFT JOIN (SELECT MIN(a) FROM t1) derived_1 ON TRUE LEFT JOIN ( t2 LEFT JOIN (SELECT COUNT(*) FROM t1) AS derived_2 ON TRUE JOIN t3 ON t2.a = derived_2.`COUNT(*)` ) ON t1.a + derived_1.`MIN(a)` = t3.b;
explain SELECT t1.a, t2.a, t3.a FROM t1 LEFT JOIN (SELECT MIN(a) FROM t1) derived_1 ON TRUE LEFT JOIN ( t2 LEFT JOIN (SELECT COUNT(*) FROM t1) AS derived_2 ON TRUE JOIN t3 ON t2.a = derived_2.`COUNT(*)` ) ON t1.a + derived_1.`MIN(a)` = t3.b;
SELECT t1.a, t2.a, t3.a FROM t1 STRAIGHT_JOIN ( t2 STRAIGHT_JOIN t3 ON t2.a = (SELECT COUNT(*) FROM t1) ) ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
explain SELECT t1.a, t2.a, t3.a FROM t1 STRAIGHT_JOIN ( t2 STRAIGHT_JOIN t3 ON t2.a = (SELECT COUNT(*) FROM t1) ) ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
SELECT a + (SELECT -SUM(a) FROM t1) AS cnt FROM t2;
explain SELECT a + (SELECT -SUM(a) FROM t1) AS cnt FROM t2;
SELECT a + derived.cnt FROM t2 LEFT OUTER JOIN (SELECT -SUM(a) AS cnt FROM t1) AS derived ON TRUE;
explain SELECT a + derived.cnt FROM t2 LEFT OUTER JOIN (SELECT -SUM(a) AS cnt FROM t1) AS derived ON TRUE;
SELECT a + (SELECT SUM(a) FROM t1) FROM t1 UNION ALL SELECT a + (SELECT SUM(a) FROM t1) FROM t1;
explain SELECT a + (SELECT SUM(a) FROM t1) FROM t1 UNION ALL SELECT a + (SELECT SUM(a) FROM t1) FROM t1;
SELECT a + (SELECT SUM(a) + (SELECT COUNT(a) FROM t1) FROM t1) AS cnt FROM t2;
explain SELECT a + (SELECT SUM(a) + (SELECT COUNT(a) FROM t1) FROM t1) AS cnt FROM t2;
SELECT (t2.a + derived_1_0.sum_plus_cnt) AS cnt FROM t2 LEFT JOIN (SELECT (derived_2_0.tmp_aggr_1 + derived_2_1.count_a) AS sum_plus_cnt FROM (SELECT STRAIGHT_JOIN SUM(t1.a) AS tmp_aggr_1 from t1) derived_2_0 LEFT JOIN (SELECT COUNT(t1.a) AS count_a from t1) derived_2_1 ON TRUE) derived_1_0 ON TRUE;
explain SELECT (t2.a + derived_1_0.sum_plus_cnt) AS cnt FROM t2 LEFT JOIN (SELECT (derived_2_0.tmp_aggr_1 + derived_2_1.count_a) AS sum_plus_cnt FROM (SELECT STRAIGHT_JOIN SUM(t1.a) AS tmp_aggr_1 from t1) derived_2_0 LEFT JOIN (SELECT COUNT(t1.a) AS count_a from t1) derived_2_1 ON TRUE) derived_1_0 ON TRUE;
SELECT a + (SELECT SUM(a) + (SELECT COUNT(a) FROM t1) FROM (SELECT * from t1) t11) AS cnt FROM t2;
SELECT AVG(a) OVER () AS `avg`, a + (SELECT SUM(a) + (SELECT COUNT(a) FROM t1) FROM (SELECT * from t1) t11) AS cnt FROM t2;
DROP TABLE t0, t1, t2, t3;
