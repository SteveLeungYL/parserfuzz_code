call mtr.add_suppression("You need to use --log-bin to make --log-replica-updates work.");
call mtr.add_suppression("You need to use --log-bin to make --binlog-format work.");
CREATE FUNCTION GTID_IS_EQUAL(gtid_set_1 LONGTEXT, gtid_set_2 LONGTEXT) RETURNS INT RETURN GTID_SUBSET(gtid_set_1, gtid_set_2) AND GTID_SUBSET(gtid_set_2, gtid_set_1);
CREATE FUNCTION GTID_IS_DISJOINT(gtid_set_1 LONGTEXT, gtid_set_2 LONGTEXT) RETURNS INT RETURN GTID_SUBSET(gtid_set_1, GTID_SUBTRACT(gtid_set_1, gtid_set_2));
CREATE FUNCTION GTID_IS_DISJOINT_UNION(gtid_set_1 LONGTEXT, gtid_set_2 LONGTEXT, sum LONGTEXT) RETURNS INT RETURN GTID_IS_EQUAL(GTID_SUBTRACT(sum, gtid_set_1), gtid_set_2) AND GTID_IS_EQUAL(GTID_SUBTRACT(sum, gtid_set_2), gtid_set_1);
CREATE FUNCTION GTID_NORMALIZE(g LONGTEXT) RETURNS LONGTEXT RETURN GTID_SUBTRACT(g, '');
CREATE FUNCTION GTID_UNION(gtid_set_1 LONGTEXT, gtid_set_2 LONGTEXT) RETURNS LONGTEXT RETURN GTID_NORMALIZE(CONCAT(gtid_set_1, ',', gtid_set_2));
CREATE FUNCTION GTID_INTERSECTION(gtid_set_1 LONGTEXT, gtid_set_2 LONGTEXT) RETURNS LONGTEXT RETURN GTID_SUBTRACT(gtid_set_1, GTID_SUBTRACT(gtid_set_1, gtid_set_2));
CREATE FUNCTION GTID_SYMMETRIC_DIFFERENCE(gtid_set_1 LONGTEXT, gtid_set_2 LONGTEXT) RETURNS LONGTEXT RETURN GTID_SUBTRACT(CONCAT(gtid_set_1, ',', gtid_set_2), GTID_INTERSECTION(gtid_set_1, gtid_set_2));
CREATE FUNCTION GTID_SUBTRACT_UUID(gtid_set LONGTEXT, uuid TEXT) RETURNS LONGTEXT RETURN GTID_SUBTRACT(gtid_set, CONCAT(UUID, ':1-', (1 << 63) - 2));
CREATE FUNCTION GTID_INTERSECTION_WITH_UUID(gtid_set LONGTEXT, uuid TEXT) RETURNS LONGTEXT RETURN GTID_SUBTRACT(gtid_set, GTID_SUBTRACT_UUID(gtid_set, uuid));
CREATE FUNCTION IFZERO(a INT, b INT) RETURNS INT RETURN IF(a = 0, b, a);
CREATE FUNCTION LOCATE2(needle LONGTEXT, haystack LONGTEXT, offset INT) RETURNS INT RETURN IFZERO(LOCATE(needle, haystack, offset), LENGTH(haystack) + 1);
CREATE FUNCTION GTID_COUNT(gtid_set LONGTEXT) RETURNS INT BEGIN DECLARE result BIGINT DEFAULT 0; DECLARE colon_pos INT; DECLARE next_dash_pos INT; DECLARE next_colon_pos INT; DECLARE next_comma_pos INT; SET gtid_set = GTID_NORMALIZE(gtid_set); SET colon_pos = LOCATE2(':', gtid_set, 1); WHILE colon_pos != LENGTH(gtid_set) + 1 DO SET next_dash_pos = LOCATE2('-', gtid_set, colon_pos + 1); SET next_colon_pos = LOCATE2(':', gtid_set, colon_pos + 1); SET next_comma_pos = LOCATE2(',', gtid_set, colon_pos + 1); IF next_dash_pos < next_colon_pos AND next_dash_pos < next_comma_pos THEN SET result = result + SUBSTR(gtid_set, next_dash_pos + 1, LEAST(next_colon_pos, next_comma_pos) - (next_dash_pos + 1)) - SUBSTR(gtid_set, colon_pos + 1, next_dash_pos - (colon_pos + 1)) + 1; ELSE SET result = result + 1; END IF; SET colon_pos = next_colon_pos; END WHILE; RETURN result; END;
CREATE FUNCTION GTID_FROM_GTID_SET(gtid_set LONGTEXT) RETURNS LONGTEXT BEGIN DECLARE normalized LONGTEXT DEFAULT GTID_NORMALIZE(gtid_set); DECLARE end_of_number INT DEFAULT LEAST(LOCATE2('-', normalized, 38), LOCATE2(':', normalized, 38), LOCATE2(',', normalized, 38)); RETURN SUBSTR(normalized, 1, end_of_number - 1); END;
CREATE FUNCTION GTID_NEXT_GENERATED(gtid_set LONGTEXT, uuid TEXT) RETURNS INT BEGIN DECLARE gtid_uuid LONGTEXT DEFAULT GTID_INTERSECTION_WITH_UUID(gtid_set, uuid); DECLARE colon_pos INT DEFAULT LOCATE2(':', gtid_uuid, 1); DECLARE next_dash_pos INT DEFAULT LOCATE2('-', gtid_uuid, colon_pos + 1); DECLARE next_comma_pos INT DEFAULT LOCATE2(',', gtid_uuid, colon_pos + 1); DECLARE next_colon_pos INT DEFAULT LOCATE2(':', gtid_uuid, colon_pos + 1); IF gtid_uuid = '' THEN RETURN 1; ELSEIF SUBSTR(gtid_uuid, colon_pos + 1, LEAST(next_dash_pos, next_comma_pos, next_colon_pos) - (colon_pos + 1)) != '1' THEN RETURN 1; ELSEIF next_dash_pos < LEAST(next_comma_pos, next_colon_pos) THEN RETURN SUBSTR(gtid_uuid, next_dash_pos + 1, LEAST(next_comma_pos, next_colon_pos) - (next_dash_pos + 1)) + 1; ELSE RETURN 2; END IF; END;
CREATE FUNCTION GTID_NEXT_GENERATED_MULTIPLE(gtid_set LONGTEXT, uuid TEXT, count INT) RETURNS LONGTEXT BEGIN DECLARE result LONGTEXT DEFAULT ''; DECLARE number INT; DECLARE new_gtid LONGTEXT; WHILE count > 0 DO SET new_gtid = CONCAT(uuid, ':', GTID_NEXT_GENERATED(gtid_set, uuid)); SET result = GTID_UNION(result, new_gtid); SET gtid_set = GTID_UNION(gtid_set, new_gtid); SET count = count - 1; END WHILE; RETURN result; END;
CREATE FUNCTION GTID_NEXT_GENERATED_SET(base LONGTEXT, diff LONGTEXT) RETURNS LONGTEXT BEGIN DECLARE colon_plus_pos INT DEFAULT LOCATE(':+', diff); DECLARE uuid TEXT; DECLARE end_of_number_pos INT; DECLARE number INT; WHILE colon_plus_pos != 0 DO SET uuid = SUBSTR(diff, colon_plus_pos - 36, 36); SET end_of_number_pos= LEAST(LOCATE2(':', diff, colon_plus_pos + 2), LOCATE2(',', diff, colon_plus_pos + 2)); SET number = SUBSTR(diff, colon_plus_pos + 2, end_of_number_pos - colon_plus_pos - 2); SET diff = CONCAT(SUBSTR(diff, 1, colon_plus_pos - 1), SUBSTR(diff, end_of_number_pos), ',', GTID_NEXT_GENERATED_MULTIPLE(base, uuid, number)); SET colon_plus_pos = LOCATE(':+', diff); END WHILE; RETURN GTID_NORMALIZE(diff); END;
CREATE FUNCTION GTID_COMPARE(old LONGTEXT, diff LONGTEXT, new LONGTEXT) RETURNS LONGTEXT RETURN IF(SUBSTR(diff, 1, 1) != '~', GTID_IS_DISJOINT_UNION(old, GTID_NEXT_GENERATED_SET(old, diff), new), GTID_IS_DISJOINT_UNION(new, GTID_NEXT_GENERATED_SET(old, SUBSTR(diff, 2)), old));
CREATE FUNCTION GTID_EXECUTED_FROM_TABLE() RETURNS LONGTEXT BEGIN DECLARE old_group_concat_max_len INT DEFAULT @@SESSION.GROUP_CONCAT_MAX_LEN; DECLARE tmp LONGTEXT; SET @@SESSION.GROUP_CONCAT_MAX_LEN = 100000; SELECT GROUP_CONCAT(CONCAT(source_uuid, ':', interval_start, '-', interval_end) SEPARATOR ',') FROM mysql.gtid_executed INTO tmp; SET @@SESSION.GROUP_CONCAT_MAX_LEN = old_group_concat_max_len; RETURN GTID_NORMALIZE(tmp); END;
CREATE FUNCTION NUMBER_TO_UUID(str LONGTEXT) RETURNS LONGTEXT BEGIN DECLARE pos INT DEFAULT 0;# pos. before next number to replace by UUID in str DECLARE colon INT;               # position of next ':' after pos in str DECLARE n TEXT;                  # number between comma and colon DECLARE nn TEXT;                 # n, zero-padded to 2 digits, repeated twice DECLARE _uuid TEXT;              # UUID generated from nn DECLARE comma INT;               # position of next ',' after pos DECLARE tilde INT;               # position of next '~' after pos IF str = '' or str IS NULL THEN RETURN str; END IF; IF SUBSTR(str, 1, 1) = '~' THEN SET pos = 1; END IF; REPEAT # find end of number SET colon = LOCATE(':', str, pos + 1); # get number SET n = SUBSTR(str, pos + 1, colon - pos - 1); # convert number to uuid SET nn = REPEAT(LPAD(n, 2, '0'), 2); # length != 4 happens if the string already contains a uuid IF LENGTH(nn) = 4 THEN SET _uuid = CONCAT(nn, nn, '-', nn, '-', nn, '-', nn, '-', nn, nn, nn); # replace number by uuid SET str = CONCAT(SUBSTR(str, 1, pos), _uuid, SUBSTR(str, colon)); END IF; # find next substring to replace SET comma = LOCATE(',', str, pos + 1), tilde = LOCATE('~', str, pos + 1); SET pos = IF(comma != 0 AND (tilde = 0 OR comma < tilde), comma, tilde); UNTIL pos = 0 END REPEAT; RETURN str; END;
CREATE FUNCTION UUID_TO_NUMBER(str LONGTEXT) RETURNS LONGTEXT BEGIN DECLARE pos INT DEFAULT 0;       # position before next UUID in str DECLARE colon INT;               # position of first ':' after pos in str DECLARE _uuid TEXT;              # UUID between ',' and ':'   DECLARE n TEXT;                  # the two digits that are repeated in UUID DECLARE comma INT;               # position of next ',' after pos DECLARE tilde INT;               # position of next '~' after pos IF str = '' or str IS NULL THEN RETURN str; END IF; IF SUBSTR(str, 1, 1) = '~' THEN SET pos = 1; END IF; # trim newlines SET str = REPLACE(str, '\n', ''); REPEAT # find end of substring of the form ",uuid:"     SET colon = LOCATE(':', str, pos + 1); # get the uuid SET _uuid = SUBSTR(str, pos + 1, colon - pos - 1); IF _uuid = @@GLOBAL.SERVER_UUID THEN # strip server_uuid from string. make sure we dont strip ~ # before or after server_uuid. SET comma = LOCATE(',', str, pos + 1), tilde = LOCATE('~', str, pos + 1); IF comma != 0 AND (tilde = 0 OR tilde > comma) THEN SET str = CONCAT(SUBSTR(str, 1, pos), SUBSTR(str, comma + 1)); ELSEIF tilde != 0 THEN SET str = CONCAT(SUBSTR(str, 1, pos - 1), SUBSTR(str, tilde)); ELSE SET str = SUBSTR(str, 1, pos - 1); END IF; ELSE # get the number that repeats in UUID and remove leading zero SET n = SUBSTR(str, pos + 1, 2); IF SUBSTR(n, 1, 1) = '0' THEN SET n = SUBSTR(n, 2, 1); END IF; # replace UUID by number SET str = CONCAT(SUBSTR(str, 1, pos), n, SUBSTR(str, colon)); END IF; # find next substring SET comma = LOCATE(',', str, pos + 1), tilde = LOCATE('~', str, pos + 1); SET pos = IF(comma != 0 AND (tilde = 0 OR comma < tilde), comma, tilde); UNTIL pos = 0 END REPEAT; RETURN str; END;
CREATE VIEW v_processlist  as SELECT * FROM performance_schema.threads where type = 'FOREGROUND';
call mtr.add_suppression("Found 10 prepared XA transactions");
call mtr.add_suppression("Found 1 prepared XA transactions");
CREATE TABLE t (a INT) ENGINE=innodb;
SET @@sql_log_bin = OFF;
CREATE TEMPORARY TABLE tmp1 (a int) ENGINE=innodb;
XA START   'trx1tmp';
INSERT INTO tmp1 SET a=1;
XA END     'trx1tmp';
XA PREPARE 'trx1tmp';
SET @@sql_log_bin = OFF;
CREATE TEMPORARY TABLE tmp1 (a int) ENGINE=innodb;
XA START   'trx2tmp';
INSERT INTO tmp1 SET a=1;
XA END     'trx2tmp';
XA PREPARE 'trx2tmp';
SET @@sql_log_bin = OFF;
CREATE TEMPORARY TABLE tmp1 (a int) ENGINE=innodb;
XA START   'trx3tmp';
INSERT INTO tmp1 SET a=1;
XA END     'trx3tmp';
XA PREPARE 'trx3tmp';
XA COMMIT 'trx1tmp';
XA ROLLBACK 'trx1tmp';
XA START 'trx1tmp';
XA RECOVER;
XA COMMIT 'trx1tmp';
KILL connection 17;
XA COMMIT 'trx3tmp';
XA START   'trx1ro1';
SELECT * from t ORDER BY a;
XA END     'trx1ro1';
XA PREPARE 'trx1ro1';
XA START   'trx2ro1';
SELECT * from t ORDER BY a;
XA END     'trx2ro1';
XA PREPARE 'trx2ro1';
XA START   'trx3ro1';
SELECT * from t ORDER BY a;
XA END     'trx3ro1';
XA PREPARE 'trx3ro1';
XA RECOVER;
XA COMMIT 'trx1ro1';
KILL connection 20;
XA COMMIT 'trx3ro1';
XA START   'trx1ro2';
SELECT * from t ORDER BY a;
XA END     'trx1ro2';
XA PREPARE 'trx1ro2';
XA START   'trx2ro2';
SELECT * from t ORDER BY a;
XA END     'trx2ro2';
XA PREPARE 'trx2ro2';
XA START   'trx3ro2';
SELECT * from t ORDER BY a;
XA END     'trx3ro2';
XA PREPARE 'trx3ro2';
XA RECOVER;
XA ROLLBACK 'trx1ro2';
KILL connection 23;
XA ROLLBACK 'trx3ro2';
XA START   'trx1empty1';
XA END     'trx1empty1';
XA PREPARE 'trx1empty1';
XA START   'trx2empty1';
XA END     'trx2empty1';
XA PREPARE 'trx2empty1';
XA START   'trx3empty1';
XA END     'trx3empty1';
XA PREPARE 'trx3empty1';
XA RECOVER;
XA COMMIT 'trx1empty1';
KILL connection 26;
XA COMMIT 'trx3empty1';
XA START   'trx1empty2';
XA END     'trx1empty2';
XA PREPARE 'trx1empty2';
XA START   'trx2empty2';
XA END     'trx2empty2';
XA PREPARE 'trx2empty2';
XA START   'trx3empty2';
XA END     'trx3empty2';
XA PREPARE 'trx3empty2';
XA RECOVER;
XA ROLLBACK 'trx1empty2';
KILL connection 29;
XA ROLLBACK 'trx3empty2';
XA START   'trx1unprepared';
INSERT INTO t set a=0;
XA END     'trx1unprepared';
INSERT INTO t set a=0;
XA START 'trx1unprepared';
XA START 'trx1unprepared';
XA COMMIT 'trx1unprepared';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_0';
INSERT INTO t SET a=0;
XA END     'trx_0';
XA PREPARE 'trx_0';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_1';
INSERT INTO t SET a=1;
XA END     'trx_1';
XA PREPARE 'trx_1';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_2';
INSERT INTO t SET a=2;
XA END     'trx_2';
XA PREPARE 'trx_2';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_3';
INSERT INTO t SET a=3;
XA END     'trx_3';
XA PREPARE 'trx_3';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_4';
INSERT INTO t SET a=4;
XA END     'trx_4';
XA PREPARE 'trx_4';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_5';
INSERT INTO t SET a=5;
XA END     'trx_5';
XA PREPARE 'trx_5';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_6';
INSERT INTO t SET a=6;
XA END     'trx_6';
XA PREPARE 'trx_6';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_7';
INSERT INTO t SET a=7;
XA END     'trx_7';
XA PREPARE 'trx_7';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_8';
INSERT INTO t SET a=8;
XA END     'trx_8';
XA PREPARE 'trx_8';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_9';
INSERT INTO t SET a=9;
XA END     'trx_9';
XA PREPARE 'trx_9';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_10';
INSERT INTO t SET a=10;
XA END     'trx_10';
XA PREPARE 'trx_10';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_11';
INSERT INTO t SET a=11;
XA END     'trx_11';
XA PREPARE 'trx_11';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_12';
INSERT INTO t SET a=12;
XA END     'trx_12';
XA PREPARE 'trx_12';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_13';
INSERT INTO t SET a=13;
XA END     'trx_13';
XA PREPARE 'trx_13';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_14';
INSERT INTO t SET a=14;
XA END     'trx_14';
XA PREPARE 'trx_14';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_15';
INSERT INTO t SET a=15;
XA END     'trx_15';
XA PREPARE 'trx_15';
KILL CONNECTION 46;
SET @@binlog_format = 'STATEMENT';
XA START   'trx_16';
INSERT INTO t SET a=16;
XA END     'trx_16';
XA PREPARE 'trx_16';
KILL CONNECTION 47;
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_17';
INSERT INTO t SET a=17;
XA END     'trx_17';
XA PREPARE 'trx_17';
KILL CONNECTION 48;
SET @@binlog_format = 'STATEMENT';
XA START   'trx_18';
INSERT INTO t SET a=18;
XA END     'trx_18';
XA PREPARE 'trx_18';
KILL CONNECTION 49;
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_19';
INSERT INTO t SET a=19;
XA END     'trx_19';
XA PREPARE 'trx_19';
KILL CONNECTION 50;
XA ROLLBACK 'trx_0';
XA ROLLBACK 'trx_1';
XA ROLLBACK 'trx_2';
XA ROLLBACK 'trx_3';
XA ROLLBACK 'trx_4';
XA COMMIT 'trx_5';
XA COMMIT 'trx_6';
XA COMMIT 'trx_7';
XA COMMIT 'trx_8';
XA COMMIT 'trx_9';
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
XA START   'new_trx_0';
INSERT INTO t SET a=0;
XA END     'new_trx_0';
XA PREPARE 'new_trx_0';
XA START   'new_trx_1';
INSERT INTO t SET a=1;
XA END     'new_trx_1';
XA PREPARE 'new_trx_1';
XA START   'new_trx_2';
INSERT INTO t SET a=2;
XA END     'new_trx_2';
XA PREPARE 'new_trx_2';
XA START   'new_trx_3';
INSERT INTO t SET a=3;
XA END     'new_trx_3';
XA PREPARE 'new_trx_3';
XA START   'new_trx_4';
INSERT INTO t SET a=4;
XA END     'new_trx_4';
XA PREPARE 'new_trx_4';
XA START   'new_trx_5';
INSERT INTO t SET a=5;
XA END     'new_trx_5';
XA PREPARE 'new_trx_5';
XA START   'new_trx_6';
INSERT INTO t SET a=6;
XA END     'new_trx_6';
XA PREPARE 'new_trx_6';
XA START   'new_trx_7';
INSERT INTO t SET a=7;
XA END     'new_trx_7';
XA PREPARE 'new_trx_7';
XA START   'new_trx_8';
INSERT INTO t SET a=8;
XA END     'new_trx_8';
XA PREPARE 'new_trx_8';
XA START   'new_trx_9';
INSERT INTO t SET a=9;
XA END     'new_trx_9';
XA PREPARE 'new_trx_9';
XA COMMIT  'new_trx_0';
XA COMMIT  'new_trx_1';
XA COMMIT  'new_trx_2';
XA COMMIT  'new_trx_3';
XA COMMIT  'new_trx_4';
XA COMMIT  'new_trx_5';
XA COMMIT  'new_trx_6';
XA COMMIT  'new_trx_7';
XA COMMIT  'new_trx_8';
XA COMMIT  'new_trx_9';
XA START 'trx_10';
XA COMMIT 'trx_10';
XA START 'trx_11';
XA COMMIT 'trx_11';
XA START 'trx_12';
XA COMMIT 'trx_12';
XA START 'trx_13';
XA COMMIT 'trx_13';
XA START 'trx_14';
XA COMMIT 'trx_14';
XA START 'trx_15';
XA ROLLBACK 'trx_15';
XA START 'trx_16';
XA ROLLBACK 'trx_16';
XA START 'trx_17';
XA ROLLBACK 'trx_17';
XA START 'trx_18';
XA ROLLBACK 'trx_18';
XA START 'trx_19';
XA ROLLBACK 'trx_19';
SELECT * FROM t;
XA ROLLBACK 'trx_20';
XA ROLLBACK 'trx_19';
XA ROLLBACK 'trx_18';
XA ROLLBACK 'trx_17';
XA ROLLBACK 'trx_16';
XA ROLLBACK 'trx_15';
XA ROLLBACK 'trx_14';
XA ROLLBACK 'trx_13';
XA ROLLBACK 'trx_12';
XA ROLLBACK 'trx_11';
SET @@sql_log_bin = OFF;
CREATE TEMPORARY TABLE tmp1 (a int) ENGINE=innodb;
XA START   'trx1tmp';
INSERT INTO tmp1 SET a=1;
XA END     'trx1tmp';
XA PREPARE 'trx1tmp';
SET @@sql_log_bin = OFF;
CREATE TEMPORARY TABLE tmp1 (a int) ENGINE=innodb;
XA START   'trx2tmp';
INSERT INTO tmp1 SET a=1;
XA END     'trx2tmp';
XA PREPARE 'trx2tmp';
SET @@sql_log_bin = OFF;
CREATE TEMPORARY TABLE tmp1 (a int) ENGINE=innodb;
XA START   'trx3tmp';
INSERT INTO tmp1 SET a=1;
XA END     'trx3tmp';
XA PREPARE 'trx3tmp';
XA COMMIT 'trx1tmp';
XA ROLLBACK 'trx1tmp';
XA START 'trx1tmp';
XA RECOVER;
XA COMMIT 'trx1tmp';
KILL connection 21;
XA COMMIT 'trx3tmp';
XA START   'trx1ro1';
SELECT * from t ORDER BY a;
XA END     'trx1ro1';
XA PREPARE 'trx1ro1';
XA START   'trx2ro1';
SELECT * from t ORDER BY a;
XA END     'trx2ro1';
XA PREPARE 'trx2ro1';
XA START   'trx3ro1';
SELECT * from t ORDER BY a;
XA END     'trx3ro1';
XA PREPARE 'trx3ro1';
XA RECOVER;
XA COMMIT 'trx1ro1';
KILL connection 24;
XA COMMIT 'trx3ro1';
XA START   'trx1ro2';
SELECT * from t ORDER BY a;
XA END     'trx1ro2';
XA PREPARE 'trx1ro2';
XA START   'trx2ro2';
SELECT * from t ORDER BY a;
XA END     'trx2ro2';
XA PREPARE 'trx2ro2';
XA START   'trx3ro2';
SELECT * from t ORDER BY a;
XA END     'trx3ro2';
XA PREPARE 'trx3ro2';
XA RECOVER;
XA ROLLBACK 'trx1ro2';
KILL connection 27;
XA ROLLBACK 'trx3ro2';
XA START   'trx1empty1';
XA END     'trx1empty1';
XA PREPARE 'trx1empty1';
XA START   'trx2empty1';
XA END     'trx2empty1';
XA PREPARE 'trx2empty1';
XA START   'trx3empty1';
XA END     'trx3empty1';
XA PREPARE 'trx3empty1';
XA RECOVER;
XA COMMIT 'trx1empty1';
KILL connection 30;
XA COMMIT 'trx3empty1';
XA START   'trx1empty2';
XA END     'trx1empty2';
XA PREPARE 'trx1empty2';
XA START   'trx2empty2';
XA END     'trx2empty2';
XA PREPARE 'trx2empty2';
XA START   'trx3empty2';
XA END     'trx3empty2';
XA PREPARE 'trx3empty2';
XA RECOVER;
XA ROLLBACK 'trx1empty2';
KILL connection 33;
XA ROLLBACK 'trx3empty2';
XA START   'trx1unprepared';
INSERT INTO t set a=0;
XA END     'trx1unprepared';
INSERT INTO t set a=0;
XA START 'trx1unprepared';
XA START 'trx1unprepared';
XA COMMIT 'trx1unprepared';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_0';
INSERT INTO t SET a=0;
XA END     'trx_0';
XA PREPARE 'trx_0';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_1';
INSERT INTO t SET a=1;
XA END     'trx_1';
XA PREPARE 'trx_1';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_2';
INSERT INTO t SET a=2;
XA END     'trx_2';
XA PREPARE 'trx_2';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_3';
INSERT INTO t SET a=3;
XA END     'trx_3';
XA PREPARE 'trx_3';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_4';
INSERT INTO t SET a=4;
XA END     'trx_4';
XA PREPARE 'trx_4';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_5';
INSERT INTO t SET a=5;
XA END     'trx_5';
XA PREPARE 'trx_5';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_6';
INSERT INTO t SET a=6;
XA END     'trx_6';
XA PREPARE 'trx_6';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_7';
INSERT INTO t SET a=7;
XA END     'trx_7';
XA PREPARE 'trx_7';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_8';
INSERT INTO t SET a=8;
XA END     'trx_8';
XA PREPARE 'trx_8';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_9';
INSERT INTO t SET a=9;
XA END     'trx_9';
XA PREPARE 'trx_9';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_10';
INSERT INTO t SET a=10;
XA END     'trx_10';
XA PREPARE 'trx_10';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_11';
INSERT INTO t SET a=11;
XA END     'trx_11';
XA PREPARE 'trx_11';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_12';
INSERT INTO t SET a=12;
XA END     'trx_12';
XA PREPARE 'trx_12';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_13';
INSERT INTO t SET a=13;
XA END     'trx_13';
XA PREPARE 'trx_13';
SET @@binlog_format = 'STATEMENT';
XA START   'trx_14';
INSERT INTO t SET a=14;
XA END     'trx_14';
XA PREPARE 'trx_14';
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_15';
INSERT INTO t SET a=15;
XA END     'trx_15';
XA PREPARE 'trx_15';
KILL CONNECTION 50;
SET @@binlog_format = 'STATEMENT';
XA START   'trx_16';
INSERT INTO t SET a=16;
XA END     'trx_16';
XA PREPARE 'trx_16';
KILL CONNECTION 51;
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_17';
INSERT INTO t SET a=17;
XA END     'trx_17';
XA PREPARE 'trx_17';
KILL CONNECTION 52;
SET @@binlog_format = 'STATEMENT';
XA START   'trx_18';
INSERT INTO t SET a=18;
XA END     'trx_18';
XA PREPARE 'trx_18';
KILL CONNECTION 53;
SET @@binlog_format = 'STATEMENT';
SET @@binlog_format = 'ROW';
XA START   'trx_19';
INSERT INTO t SET a=19;
XA END     'trx_19';
XA PREPARE 'trx_19';
KILL CONNECTION 54;
XA ROLLBACK 'trx_0';
XA ROLLBACK 'trx_1';
XA ROLLBACK 'trx_2';
XA ROLLBACK 'trx_3';
XA ROLLBACK 'trx_4';
XA COMMIT 'trx_5';
XA COMMIT 'trx_6';
XA COMMIT 'trx_7';
XA COMMIT 'trx_8';
XA COMMIT 'trx_9';
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
XA START   'new_trx_0';
INSERT INTO t SET a=0;
XA END     'new_trx_0';
XA PREPARE 'new_trx_0';
XA START   'new_trx_1';
INSERT INTO t SET a=1;
XA END     'new_trx_1';
XA PREPARE 'new_trx_1';
XA START   'new_trx_2';
INSERT INTO t SET a=2;
XA END     'new_trx_2';
XA PREPARE 'new_trx_2';
XA START   'new_trx_3';
INSERT INTO t SET a=3;
XA END     'new_trx_3';
XA PREPARE 'new_trx_3';
XA START   'new_trx_4';
INSERT INTO t SET a=4;
XA END     'new_trx_4';
XA PREPARE 'new_trx_4';
XA START   'new_trx_5';
INSERT INTO t SET a=5;
XA END     'new_trx_5';
XA PREPARE 'new_trx_5';
XA START   'new_trx_6';
INSERT INTO t SET a=6;
XA END     'new_trx_6';
XA PREPARE 'new_trx_6';
XA START   'new_trx_7';
INSERT INTO t SET a=7;
XA END     'new_trx_7';
XA PREPARE 'new_trx_7';
XA START   'new_trx_8';
INSERT INTO t SET a=8;
XA END     'new_trx_8';
XA PREPARE 'new_trx_8';
XA START   'new_trx_9';
INSERT INTO t SET a=9;
XA END     'new_trx_9';
XA PREPARE 'new_trx_9';
XA COMMIT  'new_trx_0';
XA COMMIT  'new_trx_1';
XA COMMIT  'new_trx_2';
XA COMMIT  'new_trx_3';
XA COMMIT  'new_trx_4';
XA COMMIT  'new_trx_5';
XA COMMIT  'new_trx_6';
XA COMMIT  'new_trx_7';
XA COMMIT  'new_trx_8';
XA COMMIT  'new_trx_9';
XA START 'trx_10';
XA COMMIT 'trx_10';
XA START 'trx_11';
XA COMMIT 'trx_11';
XA START 'trx_12';
XA COMMIT 'trx_12';
XA START 'trx_13';
XA COMMIT 'trx_13';
XA START 'trx_14';
XA COMMIT 'trx_14';
XA START 'trx_15';
XA ROLLBACK 'trx_15';
XA START 'trx_16';
XA ROLLBACK 'trx_16';
XA START 'trx_17';
XA ROLLBACK 'trx_17';
XA START 'trx_18';
XA ROLLBACK 'trx_18';
XA START 'trx_19';
XA ROLLBACK 'trx_19';
SELECT * FROM t;
XA ROLLBACK 'trx_20';
XA ROLLBACK 'trx_19';
XA ROLLBACK 'trx_18';
XA ROLLBACK 'trx_17';
XA ROLLBACK 'trx_16';
XA ROLLBACK 'trx_15';
XA ROLLBACK 'trx_14';
XA ROLLBACK 'trx_13';
XA ROLLBACK 'trx_12';
XA ROLLBACK 'trx_11';
XA START   'one_phase_trx_0';
INSERT INTO t SET a=0;
XA END     'one_phase_trx_0';
XA COMMIT  'one_phase_trx_0' ONE PHASE;
XA START   'one_phase_trx_1';
INSERT INTO t SET a=1;
XA END     'one_phase_trx_1';
XA COMMIT  'one_phase_trx_1' ONE PHASE;
XA START   'one_phase_trx_2';
INSERT INTO t SET a=2;
XA END     'one_phase_trx_2';
XA COMMIT  'one_phase_trx_2' ONE PHASE;
XA START   'one_phase_trx_3';
INSERT INTO t SET a=3;
XA END     'one_phase_trx_3';
XA COMMIT  'one_phase_trx_3' ONE PHASE;
XA START   'one_phase_trx_4';
INSERT INTO t SET a=4;
XA END     'one_phase_trx_4';
XA COMMIT  'one_phase_trx_4' ONE PHASE;
DROP TABLE t;
DROP VIEW v_processlist;
XA RECOVER;
CREATE TABLE t(a INT);
XA START 'xa1';
INSERT INTO t SET a = 1;
XA END 'xa1';
SET @@SESSION.pseudo_replica_mode=1;
XA PREPARE 'xa1';
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
XA ROLLBACK 'xa1';
XA START 'xa1';
INSERT INTO t SET a = 1;
XA END 'xa1';
XA PREPARE 'xa1';
SET @@SESSION.pseudo_replica_mode=1;
XA COMMIT 'xa1';
DROP TABLE t;
DROP FUNCTION GTID_IS_EQUAL;
DROP FUNCTION GTID_IS_DISJOINT;
DROP FUNCTION GTID_IS_DISJOINT_UNION;
DROP FUNCTION GTID_NORMALIZE;
DROP FUNCTION GTID_UNION;
DROP FUNCTION GTID_INTERSECTION;
DROP FUNCTION GTID_SYMMETRIC_DIFFERENCE;
DROP FUNCTION GTID_SUBTRACT_UUID;
DROP FUNCTION GTID_INTERSECTION_WITH_UUID;
DROP FUNCTION IFZERO;
DROP FUNCTION LOCATE2;
DROP FUNCTION GTID_COUNT;
DROP FUNCTION GTID_NEXT_GENERATED;
DROP FUNCTION GTID_NEXT_GENERATED_MULTIPLE;
DROP FUNCTION GTID_NEXT_GENERATED_SET;
DROP FUNCTION GTID_COMPARE;
DROP FUNCTION NUMBER_TO_UUID;
DROP FUNCTION UUID_TO_NUMBER;
DROP FUNCTION GTID_EXECUTED_FROM_TABLE;
DROP FUNCTION GTID_FROM_GTID_SET;
