call mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
SET @OLD_CONCURRENT_INSERT = @@GLOBAL.CONCURRENT_INSERT;
SET @@GLOBAL.CONCURRENT_INSERT = 0;
DROP TABLE IF EXISTS t1, `"t"1`, t1aa, t2, t2aa, t3;
drop database if exists mysqldump_test_db;
drop database if exists db1;
drop database if exists db2;
drop view if exists v1, v2, v3;
set global innodb_file_per_table=1;
CREATE TABLE t1(a INT, KEY (a)) ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=1 ENGINE=Innodb;
INSERT INTO t1 VALUES (1), (2);
DROP TABLE t1;
SET GLOBAL innodb_file_per_table=1;
CREATE TABLE t1 (a decimal(64, 20));
INSERT INTO t1 VALUES ("1234567890123456789012345678901234567890"), ("0987654321098765432109876543210987654321");
DROP TABLE t1;
CREATE TABLE t1 (a double);
INSERT IGNORE INTO t1 VALUES ('-9e999999');
DROP TABLE t1;
CREATE TABLE t1 (a DECIMAL(10,5), b FLOAT);
INSERT INTO t1 VALUES (1.2345, 2.3456);
INSERT INTO t1 VALUES ('1.2345', 2.3456);
INSERT INTO t1 VALUES ("1.2345", 2.3456);
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ANSI_QUOTES';
INSERT INTO t1 VALUES (1.2345, 2.3456);
INSERT INTO t1 VALUES ('1.2345', 2.3456);
INSERT INTO t1 VALUES ("1.2345", 2.3456);
SET SQL_MODE=@OLD_SQL_MODE;
DROP TABLE t1;
CREATE TABLE t1(a int, b text, c varchar(3));
INSERT INTO t1 VALUES (1, "test", "tes"), (2, "TEST", "TES");
DROP TABLE t1;
CREATE TABLE t1 (`a"b"` char(2));
INSERT INTO t1 VALUES ("1\""), ("\"2");
DROP TABLE t1;
CREATE TABLE t1 (a  VARCHAR(255)) DEFAULT CHARSET koi8r;
INSERT INTO t1  VALUES (_koi8r x'C1C2C3C4C5'), (NULL);
DROP TABLE t1;
create table ```a` (i int);
drop table ```a`;
create table t1(a int);
set global sql_mode='ANSI_QUOTES';
set global sql_mode=DEFAULT;
drop table t1;
create table t1(a int);
insert into t1 values (1),(2),(3);
drop table t1;
create database mysqldump_test_db character set latin2 collate latin2_bin;
drop database mysqldump_test_db;
CREATE TABLE t1 (a  CHAR(10));
INSERT INTO t1  VALUES (_latin1 x'C4D6DCDF');
DROP TABLE t1;
CREATE TABLE t1 (a int);
CREATE TABLE t2 (a int);
INSERT INTO t1 VALUES (1),(2),(3);
INSERT INTO t2 VALUES (4),(5),(6);
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 (`b` blob);
INSERT INTO `t1` VALUES (0x602010000280100005E71A);
DROP TABLE t1;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1),(2),(3);
INSERT INTO t1 VALUES (4),(5),(6);
DROP TABLE t1;
insert into t1 (F_8d3bba7425e7c98c50f52ca1b52d3735) values (1);
drop table t1;
CREATE TABLE t1 (a int);
INSERT INTO t1 VALUES (1),(2),(3);
DROP TABLE t1;
CREATE DATABASE mysqldump_test_db;
USE mysqldump_test_db;
CREATE TABLE t1 ( a INT );
CREATE TABLE t2 ( a INT );
INSERT INTO t1 VALUES (1), (2);
INSERT INTO t2 VALUES (1), (2);
DROP TABLE t1, t2;
DROP DATABASE mysqldump_test_db;
create database mysqldump_test_db;
use mysqldump_test_db;
create table t1(a varchar(30) primary key, b int not null);
create table t2(a varchar(30) primary key, b int not null);
create table t3(a varchar(30) primary key, b int not null);
select '------ Testing with illegal table names ------' as test_sequence ;
select '------ Testing with illegal database names ------' as test_sequence ;
drop table t1, t2, t3;
drop database mysqldump_test_db;
use test;
create table t1 (a int(10));
create table t2 (pk int primary key auto_increment, a int(10), b varchar(30), c datetime, d blob, e text);
insert into t1 values (NULL), (10), (20);
insert into t2 (a, b) values (NULL, NULL),(10, NULL),(NULL, "twenty"),(30, "thirty");
drop table t1, t2;
create table t1 (a text character set utf8, b text character set latin1);
insert t1 values (0x4F736E616272C3BC636B, 0x4BF66C6E);
select * from t1;
select * from t1;
drop table t1;
create table `t1` ( t1_name varchar(255) default null, t1_id int(10) unsigned not null auto_increment, key (t1_name), primary key (t1_id) ) auto_increment = 1000 default charset=latin1;
insert into t1 (t1_name) values('bla');
insert into t1 (t1_name) values('bla');
insert into t1 (t1_name) values('bla');
select * from t1;
show create table `t1`;
DROP TABLE `t1`;
select * from t1;
show create table `t1`;
drop table `t1`;
create table t1(a int);
create table t2(a int);
create table t3(a int);
drop table t1, t2, t3;
create table t1 (a int);
drop table t1;
DROP TABLE IF EXISTS `t1`;
CREATE TABLE `t1` ( `a b` INT, `c"d` INT, `e``f` INT, PRIMARY KEY (`a b`, `c"d`, `e``f`) ) ENGINE=MyISAM DEFAULT CHARSET=latin1;
insert into t1 values (0815, 4711, 2006);
DROP TABLE `t1`;
create database db1;
use db1;
CREATE TABLE t2 ( a varchar(30) default NULL, KEY a (a(5)) );
INSERT INTO t2 VALUES ('alfred');
INSERT INTO t2 VALUES ('angie');
INSERT INTO t2 VALUES ('bingo');
INSERT INTO t2 VALUES ('waffle');
INSERT INTO t2 VALUES ('lemon');
create view v2 as select * from t2 where a like 'a%' with check option;
drop table t2;
drop view v2;
drop database db1;
use test;
create database db2;
use db2;
create table t1 (a int);
create table t2 (a int, b varchar(10), primary key(a));
insert into t2 values (1, "on"), (2, "off"), (10, "pol"), (12, "meg");
insert into t1 values (289), (298), (234), (456), (789);
create view v1 as select * from t2;
create view v2 as select * from t1;
drop table t1, t2;
drop view v1, v2;
drop database db2;
use test;
create database db1;
use db1;
show tables;
select * from t2 order by a;
drop table t1, t2;
drop database db1;
use test;
create table t1(a int, b int);
create view v1 as select * from t1;
create view v2 (c, d) as select * from t1;
drop view v1, v2;
drop table t1;
create database mysqldump_test_db;
use mysqldump_test_db;
CREATE TABLE t2 ( a varchar(30) default NULL, KEY a (a(5)) );
INSERT INTO t2 VALUES ('alfred');
INSERT INTO t2 VALUES ('angie');
INSERT INTO t2 VALUES ('bingo');
INSERT INTO t2 VALUES ('waffle');
INSERT INTO t2 VALUES ('lemon');
create view v2 as select * from t2 where a like 'a%' with check option;
drop table t2;
drop view v2;
drop database mysqldump_test_db;
use test;
CREATE TABLE t1 (a char(10));
INSERT INTO t1 VALUES ('\'');
DROP TABLE t1;
create table t1(a int, b int, c varchar(30));
insert into t1 values(1, 2, "one"), (2, 4, "two"), (3, 6, "three");
create view v3 as select * from t1;
create  view v1 as select * from v3 where b in (1, 2, 3, 4, 5, 6, 7);
create  view v2 as select v3.a from v3, v1 where v1.a=v3.a and v3.b=3 limit 1;
drop view v1, v2, v3;
drop table t1;
CREATE TABLE t1 (a int, b bigint default NULL);
CREATE TABLE t2 (a int);
create trigger trg1 before insert on t1 for each row begin if new.a > 10 then set new.a := 10; set new.a := 11; end if; end;
create trigger trg2 before update on t1 for each row begin if old.a % 2 = 0 then set new.b := 12; end if; end;
set sql_mode="traditional";
create trigger trg3 after update on t1 for each row begin if new.a = -1 then set @fired:= "Yes"; end if; end;
create trigger trg4 before insert on t2 for each row begin if new.a > 10 then set @fired:= "No"; end if; end;
set sql_mode=default;
show triggers like "t1";
INSERT INTO t1 (a) VALUES (1),(2),(3),(22);
update t1 set a = 4 where a=3;
drop table t1;
show tables;
show triggers;
DROP TABLE t1, t2;
DROP TABLE IF EXISTS `test1`;
CREATE TABLE `test1` ( `a1` int(11) default NULL ) ENGINE=MyISAM DEFAULT CHARSET=latin1;
DROP TABLE IF EXISTS `test2`;
CREATE TABLE `test2` ( `a2` int(11) default NULL ) ENGINE=MyISAM DEFAULT CHARSET=latin1;
CREATE TRIGGER `testref` BEFORE INSERT ON `test1` FOR EACH ROW BEGIN INSERT INTO test2 SET a2 = NEW.a1; END  ;
INSERT INTO `test1` VALUES (1);
SELECT * FROM `test2`;
SHOW TRIGGERS;
SELECT * FROM `test1`;
SELECT * FROM `test2`;
DROP TRIGGER testref;
DROP TABLE test1;
DROP TABLE test2;
DROP TABLE IF EXISTS t1;
DROP FUNCTION IF EXISTS bug9056_func1;
DROP FUNCTION IF EXISTS bug9056_func2;
DROP PROCEDURE IF EXISTS bug9056_proc1;
DROP PROCEDURE IF EXISTS bug9056_proc2;
DROP PROCEDURE IF EXISTS `a'b`;
CREATE TABLE t1 (id int);
INSERT INTO t1 VALUES(1), (2), (3), (4), (5);
CREATE FUNCTION `bug9056_func1`(a INT, b INT) RETURNS int(11) RETURN a+b ;
CREATE PROCEDURE `bug9056_proc1`(IN a INT, IN b INT, OUT c INT) BEGIN SELECT a+b INTO c; end  ;
create function bug9056_func2(f1 char binary) returns char begin set f1= concat( 'hello', f1 ); return f1; end ;
CREATE PROCEDURE bug9056_proc2(OUT a INT) BEGIN select sum(id) from t1 into a; END ;
set sql_mode='ansi';
create procedure `a'b` () select 1;
set sql_mode='';
DROP FUNCTION bug9056_func1;
DROP FUNCTION bug9056_func2;
DROP PROCEDURE bug9056_proc1;
DROP PROCEDURE bug9056_proc2;
DROP PROCEDURE `a'b`;
drop table t1;
drop table if exists t1;
create table t1 (`d` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, unique (`d`));
set time_zone='+00:00';
insert into t1 values ('2003-10-25 22:00:00'),('2003-10-25 23:00:00');
select * from t1;
set time_zone='Europe/Moscow';
select * from t1;
set global time_zone='Europe/Moscow';
drop table t1;
set global time_zone=default;
set time_zone=default;
DROP TABLE IF EXISTS `t1 test`;
DROP TABLE IF EXISTS `t2 test`;
CREATE TABLE `t1 test` ( `a1` int(11) default NULL ) ENGINE=MyISAM DEFAULT CHARSET=latin1;
CREATE TABLE `t2 test` ( `a2` int(11) default NULL ) ENGINE=MyISAM DEFAULT CHARSET=latin1;
CREATE TRIGGER `test trig` BEFORE INSERT ON `t1 test` FOR EACH ROW BEGIN INSERT INTO `t2 test` SET a2 = NEW.a1; END  ;
INSERT INTO `t1 test` VALUES (1);
INSERT INTO `t1 test` VALUES (2);
INSERT INTO `t1 test` VALUES (3);
SELECT * FROM `t2 test`;
DROP TRIGGER `test trig`;
DROP TABLE `t1 test`;
DROP TABLE `t2 test`;
drop table if exists t1;
create table t1 (a int, b varchar(32), c varchar(32));
insert into t1 values (1, 'first value', 'xxxx');
insert into t1 values (2, 'second value', 'tttt');
insert into t1 values (3, 'third value', 'vvv vvv');
create view v1 as select * from t1;
create view v0 as select * from v1;
create view v2 as select * from v0;
select * from v2;
drop view v2;
drop view v0;
drop view v1;
drop table t1;
SET @old_sql_mode = @@SQL_MODE;
SET SQL_MODE = IGNORE_SPACE;
CREATE TABLE t1 (a INT);
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN SET new.a = 0; END;
SET SQL_MODE = @old_sql_mode;
DROP TRIGGER tr1;
DROP TABLE t1;
create table t1 (a binary(1), b blob);
insert into t1 values ('','');
drop table t1;
create table t1 (a int);
insert into t1 values (289), (298), (234), (456), (789);
create definer = CURRENT_USER view v1 as select * from t1;
create SQL SECURITY INVOKER view v2 as select * from t1;
create view v3 as select * from t1 with local check option;
create algorithm=merge view v4 as select * from t1 with cascaded check option;
create algorithm =temptable view v5 as select * from t1;
drop table t1;
drop view v1, v2, v3, v4, v5;
show tables;
select * from v3 order by a;
drop table t1;
drop view v1, v2, v3, v4, v5;
create table t1 (a int, created datetime);
create table t2 (b int, created datetime);
create trigger tr1 before insert on t1 for each row set new.created=now();
create trigger tr2 after insert on t1 for each row begin insert into t2 set b=new.a and created=new.created; end;
drop trigger tr1;
drop trigger tr2;
drop table t1, t2;
show triggers;
drop trigger tr1;
drop trigger tr2;
drop table t1, t2;
create table t (qty int, price int);
insert into t values(3, 50);
insert into t values(5, 51);
create view v1 as select qty, price, qty*price as value from t;
create view v2 as select qty from v1;
drop view v1;
drop view v2;
drop table t;
/*!50003 CREATE FUNCTION `f`() RETURNS bigint(20) return 42 */;
/*!50003 CREATE PROCEDURE `p`() select 42 */;
show create function f;
show create procedure p;
drop function f;
drop procedure p;
create table t1 ( id serial );
create view v1 as select * from t1;
drop table t1;
drop view v1;
create database mysqldump_test_db;
use mysqldump_test_db;
create table t1 (id int);
create view v1 as select * from t1;
insert into t1 values (1232131);
insert into t1 values (4711);
insert into t1 values (3231);
insert into t1 values (0815);
drop view v1;
drop table t1;
drop database mysqldump_test_db;
create database mysqldump_tables;
use mysqldump_tables;
create table basetable ( id serial, tag varchar(64) );
create database mysqldump_views;
use mysqldump_views;
create view nasishnasifu as select mysqldump_tables.basetable.id from mysqldump_tables.basetable;
drop view nasishnasifu;
drop database mysqldump_views;
drop table mysqldump_tables.basetable;
drop database mysqldump_tables;
create database mysqldump_dba;
use mysqldump_dba;
create table t1 (f1 int, f2 int);
insert into t1 values (1,1);
create view v1 as select f1, f2 from t1;
create database mysqldump_dbb;
use mysqldump_dbb;
create table t1 (f1 int, f2 int);
insert into t1 values (2,2);
create view v1 as select f1, f2 from t1;
drop view v1;
drop table t1;
drop database mysqldump_dbb;
use mysqldump_dba;
drop view v1;
drop table t1;
drop database mysqldump_dba;
select * from mysqldump_dba.v1;
select * from mysqldump_dbb.v1;
use mysqldump_dba;
drop view v1;
drop table t1;
drop database mysqldump_dba;
use mysqldump_dbb;
drop view v1;
drop table t1;
drop database mysqldump_dbb;
use test;
create table t1(a int, b varchar(34));
reset master;
grant RELOAD on *.* to mysqltest_1@localhost;
grant REPLICATION CLIENT on *.* to mysqltest_1@localhost;
drop table t1;
create database mysqldump_myDB;
use mysqldump_myDB;
grant create, create view, select, insert on mysqldump_myDB.* to myDB_User@localhost;
create table t1 (c1 int);
insert into t1 values (3);
use mysqldump_myDB;
create table u1 (f1 int);
insert into u1 values (4);
create view v1 (c1) as select * from t1;
use mysqldump_myDB;
drop view v1;
drop table t1;
drop table u1;
revoke all privileges on mysqldump_myDB.* from myDB_User@localhost;
drop database mysqldump_myDB;
flush privileges;
use mysqldump_myDB;
select * from mysqldump_myDB.v1;
select * from mysqldump_myDB.u1;
use mysqldump_myDB;
drop view v1;
drop table t1;
drop table u1;
revoke all privileges on mysqldump_myDB.* from myDB_User@localhost;
drop database mysqldump_myDB;
use test;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (f1 int(10), data MEDIUMBLOB);
INSERT INTO t1 VALUES(1, 0xff00fef0);
DROP TABLE t1;
CREATE TABLE t1(a int);
INSERT INTO t1 VALUES (1), (2);
DROP TABLE t1;
CREATE TABLE t2 (a INT) ENGINE=MYISAM;
CREATE TABLE t3 (a INT) ENGINE=MYISAM;
CREATE TABLE t1 (a INT) ENGINE=merge UNION=(t2, t3);
DROP TABLE t1, t2, t3;
create database bug23491_original;
create database bug23491_restore;
use bug23491_original;
create table t1 (c1 int);
create view v1 as select * from t1;
create procedure p1() select 1;
create function f1() returns int return 1;
create view v2 as select f1();
create function f2() returns int return f1();
create view v3 as select bug23491_original.f1();
use bug23491_restore;
show create view bug23491_restore.v2;
show create view bug23491_restore.v3;
drop database bug23491_original;
drop database bug23491_restore;
use test;
create database mysqldump_test_db;
create procedure mysqldump_test_db.sp1() select 'hello';
drop procedure sp1;
drop database mysqldump_test_db;
CREATE TABLE t1 (c1 INT, c2 LONGBLOB);
INSERT INTO t1 SET c1=11, c2=REPEAT('q',509);
DROP TABLE t1;
CREATE VIEW v1 AS SELECT 1;
DROP VIEW v1;
SELECT * FROM v1;
DROP VIEW v1;
CREATE TABLE t1 (c1 INT);
CREATE TRIGGER t1bd BEFORE DELETE ON t1 FOR EACH ROW BEGIN END;
CREATE TABLE t2 (c1 INT NOT NULL AUTO_INCREMENT PRIMARY KEY);
SET @TMP_SQL_MODE = @@SQL_MODE;
SET SQL_MODE = 'NO_AUTO_VALUE_ON_ZERO';
INSERT INTO t2 VALUES (0), (1), (2);
SET SQL_MODE = @TMP_SQL_MODE;
SELECT * FROM t2;
SELECT * FROM t2;
DROP TABLE t1,t2;
create database db42635;
use db42635;
create table t1 (id int);
create view db42635.v1 (c) as select * from db42635.t1;
create view db42635.v2 (c) as select * from db42635.t1;
use test;
drop database db42635;
drop table if exists t1;
CREATE TABLE t1(a int, b int);
INSERT INTO t1 VALUES (1,1);
INSERT INTO t1 VALUES (2,3);
INSERT INTO t1 VALUES (3,4), (4,5);
DROP TABLE t1;
create table t1 (a text , b text);
create table t2 (a text , b text);
insert t1 values ("Duck, Duck", "goose");
insert t1 values ("Duck, Duck", "pidgeon");
insert t2 values ("We the people", "in order to perform");
insert t2 values ("a more perfect", "union");
select * from t1;
select * from t2;
select * from t1;
select * from t2;
create table words(a varchar(255));
create table words2(b varchar(255));
select * from t1;
select * from t2;
select * from words;
select * from words2;
drop table words;
drop table t1;
drop table t2;
drop table words2;
create database first;
use first;
set time_zone = 'UTC';
create event ee1 on schedule at '2035-12-31 20:01:23' do set @a=5;
show events;
show create event ee1;
drop database first;
create database second;
use second;
show events;
show create event ee1;
create event ee2 on schedule at '2029-12-31 21:01:23' do set @a=5;
create event ee3 on schedule at '2030-12-31 22:01:23' do set @a=5;
show events;
drop database second;
create database third;
use third;
show events;
drop database third;
set time_zone = 'SYSTEM';
use test;
create database mysqldump_test_db;
use mysqldump_test_db;
create table t1 (id int);
create view v1 as select * from t1;
insert into t1 values (1232131);
insert into t1 values (4711);
insert into t1 values (3231);
insert into t1 values (0815);
drop view v1;
drop table t1;
drop database mysqldump_test_db;
DROP DATABASE IF EXISTS mysqldump_test_db;
CREATE DATABASE mysqldump_test_db;
set names koi8r;
CREATE VIEW mysqldump_test_db.v2 AS SELECT 1 AS �������1;
CREATE VIEW mysqldump_test_db.v1 AS SELECT �������1 FROM mysqldump_test_db.v2;
set names latin1;
DROP DATABASE mysqldump_test_db;
set names utf8;
SHOW CREATE VIEW mysqldump_test_db.v1;
SHOW CREATE VIEW mysqldump_test_db.v2;
set names latin1;
DROP DATABASE mysqldump_test_db;
USE test;
CREATE event e29938 ON SCHEDULE AT '2035-12-31 20:01:23' DO SET @bug29938=29938;
SHOW EVENTS;
SHOW EVENTS;
DROP EVENT e29938;
create database `test-database`;
use `test-database`;
create table test (a int);
drop database `test-database`;
use test;
DROP DATABASE IF EXISTS mysqldump_test_db;
CREATE DATABASE mysqldump_test_db;
use mysqldump_test_db;
CREATE VIEW v1(x, y) AS SELECT 'a', 'a';
SELECT view_definition FROM INFORMATION_SCHEMA.VIEWS WHERE table_schema = 'mysqldump_test_db' AND table_name = 'v1';
DROP DATABASE mysqldump_test_db;
use test;
SELECT view_definition FROM INFORMATION_SCHEMA.VIEWS WHERE table_schema = 'mysqldump_test_db' AND table_name = 'v1';
DROP DATABASE mysqldump_test_db;
create table t1 (a int);
create view v1 as select a from t1;
drop view v1;
drop table t1;
drop view v1;
drop table t1;
drop table if exists `load`;
create table `load` (a varchar(255));
select count(*) from `load`;
drop table `load`;
SET @@GLOBAL.CONCURRENT_INSERT = @OLD_CONCURRENT_INSERT;
CREATE TABLE t1 (f1 INT);
CREATE TRIGGER tr1 BEFORE UPDATE ON t1 FOR EACH ROW SET @f1 = 1;
CREATE PROCEDURE pr1 () SELECT "Meow";
CREATE EVENT ev1 ON SCHEDULE AT '2030-01-01 00:00:00' DO SELECT "Meow";
SHOW TRIGGERS;
SHOW EVENTS;
SELECT routine_name, routine_definition FROM INFORMATION_SCHEMA.routines WHERE routine_name = 'pr1';
DROP EVENT ev1;
DROP TRIGGER tr1;
DROP TABLE t1;
DROP PROCEDURE pr1;
SHOW TRIGGERS;
SHOW EVENTS;
SELECT routine_name, routine_definition FROM INFORMATION_SCHEMA.routines WHERE routine_name = 'pr1';
SHOW TRIGGERS;
SHOW EVENTS;
SELECT routine_name, routine_definition FROM INFORMATION_SCHEMA.routines WHERE routine_name = 'pr1';
DROP EVENT IF EXISTS ev1;
DROP PROCEDURE IF EXISTS pr1;
DROP TRIGGER IF EXISTS tr1;
DROP TABLE IF EXISTS t1;
SET NAMES utf8;
CREATE TABLE t1 (a INT, b CHAR(10) CHARSET koi8r, c CHAR(10) CHARSET latin1);
CREATE TABLE t2 LIKE t1;
INSERT INTO t1 VALUES (1, 'ABC-АБВ', 'DEF-ÂÃÄ'), (2, NULL, NULL);
TRUNCATE t2;
LOAD DATA INFILE '/data/yu/Squirrel_DBMS_Fuzzing/MySQL_source/mysql-server-inst/bld/mysql-test/var/tmp/t1.txt' INTO TABLE t2 CHARACTER SET binary;
SELECT * FROM t1 UNION SELECT * FROM t2 ORDER BY a, b, c;
TRUNCATE t2;
LOAD DATA INFILE '/data/yu/Squirrel_DBMS_Fuzzing/MySQL_source/mysql-server-inst/bld/mysql-test/var/tmp/t1.txt' INTO TABLE t2 CHARACTER SET utf8;
SELECT * FROM t1 UNION SELECT * FROM t2 ORDER BY a, b, c;
TRUNCATE t2;
LOAD DATA INFILE '/data/yu/Squirrel_DBMS_Fuzzing/MySQL_source/mysql-server-inst/bld/mysql-test/var/tmp/t1.txt' INTO TABLE t2 CHARACTER SET latin1 ;
SELECT * FROM t1 UNION SELECT * FROM t2 ORDER BY a, b, c;
TRUNCATE t2;
LOAD DATA INFILE '/data/yu/Squirrel_DBMS_Fuzzing/MySQL_source/mysql-server-inst/bld/mysql-test/var/tmp/t1.txt' INTO TABLE t2 CHARACTER SET koi8r;
SELECT * FROM t1 UNION SELECT * FROM t2 ORDER BY a, b, c;
SET NAMES default;
DROP TABLE t1, t2;
CREATE TABLE t1 (a BLOB) CHARSET latin1;
CREATE TABLE t2 LIKE t1;
INSERT INTO t1 VALUES (REPEAT('.', 800));
LOAD DATA INFILE '/data/yu/Squirrel_DBMS_Fuzzing/MySQL_source/mysql-server-inst/bld/mysql-test/var/tmp/t1.txt' INTO TABLE t2 CHARACTER SET latin1;
SELECT LENGTH(a) FROM t2;
DROP TABLE t1, t2;
create table t1 (first char(28) , last varchar(37));
insert into t1 values ("Magnus", "Blåudd");
truncate table t1;
drop table t1;
CREATE TABLE `comment_table` (i INT COMMENT 'FIELD COMMENT') COMMENT = 'TABLE COMMENT';
DROP TABLE `comment_table`;
CREATE DATABASE `test-database`;
USE `test-database`;
CREATE TABLE `test` (`c1` VARCHAR(10)) ENGINE=MYISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
CREATE TRIGGER `trig` BEFORE INSERT ON `test` FOR EACH ROW BEGIN END ;
ALTER DATABASE `test-database` CHARACTER SET latin1 COLLATE latin1_swedish_ci;
ALTER DATABASE `test-database` CHARACTER SET utf8 COLLATE utf8_unicode_ci ;
DROP DATABASE `test-database`;
USE test;
CREATE DATABASE BUG52792;
USE BUG52792;
CREATE TABLE t1 (c1 INT, c2 VARCHAR(20)) ENGINE=MyISAM;
CREATE TABLE t2 (c1 INT) ENGINE=MyISAM;
INSERT INTO t1 VALUES (1, 'aaa'), (2, 'bbb'), (3, 'ccc');
INSERT INTO t2 VALUES (1),(2),(3);
CREATE PROCEDURE simpleproc1 (OUT param1 INT) BEGIN SELECT COUNT(*) INTO param1 FROM t1; END;
CREATE PROCEDURE simpleproc2 (OUT param1 INT) BEGIN SELECT COUNT(*) INTO param1 FROM t2; END;
SET GLOBAL EVENT_SCHEDULER = OFF;
CREATE EVENT e1 ON SCHEDULE EVERY 1 SECOND DO DROP DATABASE BUG52792;
CREATE EVENT e2 ON SCHEDULE EVERY 1 SECOND DO DROP DATABASE BUG52792;
CREATE FUNCTION `hello1` (s CHAR(20)) RETURNS CHAR(50) DETERMINISTIC RETURN CONCAT('Hello, ' ,s ,'!');
CREATE FUNCTION `hello2` (s CHAR(20)) RETURNS CHAR(50) DETERMINISTIC RETURN CONCAT(']]>, ' , s ,'!');
CREATE TRIGGER trig1 BEFORE INSERT ON t2 FOR EACH ROW BEGIN INSERT INTO t2 VALUES(1); END; ;
CREATE TRIGGER trig2 AFTER INSERT ON t2 FOR EACH ROW BEGIN INSERT INTO t2 VALUES(1, ']]>'); INSERT INTO t2 VALUES(2, '<![CDATA]]>'); INSERT INTO t2 VALUES(3, '<![CDATA['); INSERT INTO t2 VALUES(4, '< > & \ " _'); END; ;
CREATE VIEW v1 AS SELECT * FROM t1;
CREATE VIEW v2 AS SELECT * FROM t2;
DROP DATABASE BUG52792;
SET NAMES default;
USE test;
SET GLOBAL EVENT_SCHEDULER = ON;
USE `test`;
CREATE TABLE t1 (a int, b int);
CREATE TRIGGER tt1_t1 BEFORE INSERT ON t1 FOR EACH ROW  SET NEW.b=NEW.a + 10;
INSERT INTO t1 (a) VALUES (1),(2),(3);
DROP TABLE t1;
CREATE TABLE t1 ( a TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, b TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, c TIMESTAMP NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP, d TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, e TIMESTAMP NULL, f TIMESTAMP NOT NULL DEFAULT '2010-05-26 12:34:56', g DATETIME, h DATETIME DEFAULT CURRENT_TIMESTAMP, i DATETIME ON UPDATE CURRENT_TIMESTAMP, j DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, k DATETIME NULL, l DATETIME DEFAULT '2010-05-26 12:34:56' );
DROP TABLE t1;
DROP DATABASE IF EXISTS b12809202_db;
CREATE DATABASE b12809202_db;
CREATE TABLE b12809202_db.t1 (c1 INT);
CREATE TABLE b12809202_db.t2 (c1 INT);
INSERT INTO b12809202_db.t1 VALUES (1), (2), (3);
INSERT INTO b12809202_db.t2 VALUES (1), (2), (3);
DROP TABLE b12809202_db.t1;
DROP TABLE b12809202_db.t2;
DROP DATABASE b12809202_db;
RESET MASTER;
DROP DATABASE IF EXISTS b12688860_db;
CREATE DATABASE b12688860_db;
DROP DATABASE b12688860_db;
DROP VIEW v1;
CREATE DATABASE `a\\k`;
CREATE TABLE `a\\k`.t1(i INT);
SHOW TABLES FROM `a\\k`;
DROP DATABASE `a\\k`;
SHOW TABLES FROM `a\\k`;
DROP DATABASE `a\\k`;
CREATE DATABASE dump_gis;
USE dump_gis;
CREATE TABLE t1 (a GEOMETRY);
INSERT INTO t1 VALUES(ST_GeomFromText('LineString(1 1, 2 1, 2 2, 1 2, 1 1)'));
SELECT HEX(a) FROM t1;
DROP DATABASE dump_gis;
CREATE DATABASE db_20772273;
USE db_20772273;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (1), (2);
CREATE TABLE t2(a INT);
INSERT INTO t2 VALUES (3), (4);
SELECT * FROM t1;
SELECT * FROM t2;
SELECT * FROM t1;
SELECT * FROM t2;
DROP TABLE t1;
DROP TABLE t2;
DROP DATABASE db_20772273;
CREATE DATABASE dump_json;
USE dump_json;
CREATE TABLE t1 (j JSON);
INSERT INTO t1 VALUES (JSON_ARRAY(1, 2, 3, "one", "two", "three"));
SELECT * FROM t1;
DROP DATABASE dump_json;
CREATE DATABASE dump_generated;
USE dump_generated;
CREATE TABLE t1 (pk INTEGER, a INTEGER, b INTEGER, c VARCHAR(16), sum INTEGER GENERATED ALWAYS AS (a+b), sub VARCHAR(4) GENERATED ALWAYS AS (SUBSTRING(c, 1, 4)), key k1(sum), key k2(sub) ) engine=innodb;
INSERT INTO t1(pk, a, b, c) VALUES (1, 11, 12, 'oneone'), (2, 21, 22, 'twotwo');
SELECT * FROM t1;
DELETE FROM t1;
SELECT * FROM t1;
DELETE FROM t1;
LOAD DATA INFILE '/data/yu/Squirrel_DBMS_Fuzzing/MySQL_source/mysql-server-inst/bld/mysql-test/var/tmp/t1.txt' INTO TABLE t1;
SELECT * FROM t1;
DROP TABLE t1;
CREATE TABLE t2 (pk INTEGER, a INTEGER, b INTEGER, sum INTEGER GENERATED ALWAYS AS (a+b), c VARCHAR(16), key k1(sum) ) engine=innodb;
INSERT INTO t2(pk, a, b, c) VALUES (1, 11, 12, 'oneone'), (2, 21, 22, 'twotwo');
SELECT * FROM t2;
DELETE FROM t2;
SELECT * FROM t2;
DELETE FROM t2;
LOAD DATA INFILE '/data/yu/Squirrel_DBMS_Fuzzing/MySQL_source/mysql-server-inst/bld/mysql-test/var/tmp/t2.txt' INTO TABLE t2;
SELECT * FROM t2;
DROP TABLE t2;
DROP DATABASE dump_generated;
SELECT COUNT(*) FROM INFORMATION_SCHEMA.routines WHERE routine_schema = 'sys';
DROP DATABASE sys;
SELECT COUNT(*) FROM INFORMATION_SCHEMA.routines WHERE routine_schema = 'sys';
SELECT COUNT(*) FROM INFORMATION_SCHEMA.routines WHERE routine_schema = 'sys';
SELECT COUNT(*) FROM INFORMATION_SCHEMA.routines WHERE routine_schema = 'sys';
CREATE TABLE test.t1 ( a INT, b INT, c INT, INDEX (a) VISIBLE, INDEX (b) INVISIBLE, INDEX (c) );
DROP TABLE test.t1;
CREATE DATABASE bug25717383;
use bug25717383;
CREATE TABLE `tab one` (a int);
CREATE VIEW `view one` as SELECT * FROM `tab one`;
CREATE PROCEDURE `proc one`() SELECT * from `tab one`;
CREATE TEMPORARY TABLE `temp one` (id INT);
CREATE TRIGGER `trig one` BEFORE INSERT ON `tab one` FOR EACH ROW SET NEW.a = 1;
CREATE EVENT `event one` ON SCHEDULE AT '2030-01-01 00:00:00' DO SET @a=5;
SHOW TABLES FROM bug25717383;
SHOW TRIGGERS FROM bug25717383;
SHOW EVENTS FROM bug25717383;
SELECT ROUTINE_NAME FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA='bug25717383' AND ROUTINE_TYPE= 'PROCEDURE'        ORDER BY ROUTINE_NAME;
SHOW TABLES FROM bug25717383;
SHOW TRIGGERS FROM bug25717383;
SHOW EVENTS FROM bug25717383;
SELECT ROUTINE_NAME FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA='bug25717383' AND ROUTINE_TYPE= 'PROCEDURE'        ORDER BY ROUTINE_NAME;
DROP DATABASE bug25717383;
SHOW VARIABLES LIKE "master_info_repository";
SHOW VARIABLES LIKE "relay_log_info_repository";
SET GLOBAL master_info_repository= 'FILE';
SET GLOBAL relay_log_info_repository= 'FILE';
SHOW VARIABLES LIKE "master_info_repository";
SHOW VARIABLES LIKE "relay_log_info_repository";
SET GLOBAL master_info_repository= 'TABLE';
SET GLOBAL relay_log_info_repository= 'TABLE';
SHOW VARIABLES LIKE "master_info_repository";
SHOW VARIABLES LIKE "relay_log_info_repository";
CREATE SCHEMA column_statistics_dump;
USE column_statistics_dump;
CREATE TABLE t1 (col1 INT);
INSERT INTO t1 VALUES (1), (2);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 22 BUCKETS;
SELECT schema_name, table_name, column_name, JSON_EXTRACT(HISTOGRAM, '$."number-of-buckets-specified"') FROM information_schema.COLUMN_STATISTICS;
DROP SCHEMA column_statistics_dump;
CREATE DATABASE bug26171967;
USE bug26171967;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (1000000), (1000001);
DROP DATABASE bug26171967;
USE test;
CREATE TABLE t1(f1 INT INVISIBLE, f2 INT, f3 INT AS (f1 + 10), f4 INT AS (f2 + 10) INVISIBLE, f5 INT AS (f2 + 10) STORED INVISIBLE);
CREATE TABLE t2(f1 INT, f2 INT INVISIBLE);
INSERT INTO t1(f1, f2) VALUES (10, 20), (20, 30);
INSERT INTO t2(f1, f2) VALUES (10, 20), (20, 30);
DROP TABLE t1, t2;
SHOW CREATE TABLE t2;
DROP TABLE t2;
SHOW CREATE TABLE t1;
SELECT * FROM t1 ORDER BY f2;
SELECT f1, f2, f3, f4, f5 FROM t1 ORDER BY f2;
SHOW CREATE TABLE t2;
SELECT f1, f2 FROM t2 ORDER BY f2;
DELETE FROM t1;
DELETE FROM t2;
LOAD XML INFILE "/data/yu/Squirrel_DBMS_Fuzzing/MySQL_source/mysql-server-inst/bld/mysql-test/var/tmp/tmp1.xml" INTO TABLE t1 (f1, f2);;
SHOW CREATE TABLE t1;
SELECT * FROM t1 ORDER BY f2;
SELECT f1, f2, f3, f4, f5 FROM t1 ORDER BY f2;
LOAD XML INFILE "/data/yu/Squirrel_DBMS_Fuzzing/MySQL_source/mysql-server-inst/bld/mysql-test/var/tmp/tmp1.xml" INTO TABLE t2 (f1, f2);;
SHOW CREATE TABLE t2;
SELECT f1, f2 FROM t2 ORDER BY f2;
DROP TABLE t1, t2;
