set optimizer_trace_max_mem_size=1048576;
set end_markers_in_json=on;
set optimizer_trace="enabled=on";
SET @old_sql_mode = @@sql_mode;
SET @@sql_mode='ONLY_FULL_GROUP_BY';
create table t1(a int, b int, c int) engine=InnoDB;
create algorithm=merge view v1 as select t1.a*2 as a, t1.b*2 as b, t1.c*2 as c from t1;
show create view v1;
select sin(b) as z from t1 group by sin(b);
select sin(b) as z from v1 group by sin(b);
select sin(b) as z from t1 group by b;
select sin(b) as z from v1 group by b;
select sin(b) as z from v1 group by z;
drop view v1;
create algorithm=temptable view v1 as select t1.a*2 as a, t1.b*2 as b, t1.c*2 as c from t1;
show create view v1;
select sin(b) as z from t1 group by sin(b);
select sin(b) as z from v1 group by sin(b);
select sin(b) as z from t1 group by b;
select sin(b) as z from v1 group by b;
select sin(b) as z from v1 group by z;
drop view v1;
drop table t1;
CREATE TABLE group_by_test2 ( id int unsigned primary key, cat int unsigned not null, name varchar(10), num int unsigned );
INSERT INTO group_by_test2 (id,cat,name,num) VALUES (1,10,'foo',2), (2,11,'foo',1), (3,22,'bar',3), (4,23,'bar',7), (5,34,'test',7);
SELECT cat, name, SUM(num) FROM group_by_test2 GROUP BY cat;
ALTER TABLE group_by_test2 ADD UNIQUE INDEX (cat);
SELECT cat, name, SUM(num) FROM group_by_test2 GROUP BY cat;
SELECT cat, name, SUM(num) FROM group_by_test2 GROUP BY cat WITH ROLLUP;
SELECT cat, length(cat), SUM(num) FROM group_by_test2 GROUP BY cat WITH ROLLUP;
DROP TABLE group_by_test2;
CREATE TABLE t1 ( col_int_key INT, col_varchar_key VARCHAR(1) );
CREATE TABLE t2 ( pk INTEGER, col_int_key INTEGER );
CREATE VIEW view_b AS SELECT * FROM t2;
SELECT MIN( alias2.col_int_key ), alias2.col_int_key FROM t1 AS alias1, t2 AS alias2 WHERE alias1.col_int_key IS NULL;
SELECT MIN( alias2.col_int_key ), alias2.col_int_key FROM t1 AS alias1, view_b AS alias2 WHERE alias1.col_int_key IS NULL;
DROP TABLE t1, t2;
DROP VIEW view_b;
create table t1( a int, b int not null, c int not null, d int, unique key(b,c), unique key(b,d) );
select sin(a) as z from t1 group by b;
select sin(a) as z from t1 group by d,b;
select sin(a) as z from t1 group by c,b;
select sin(a+b*c) as z from t1 group by c,b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select (select sin(a)) as z from t1 group by d,b;
select (select sin(a)) as z from t1 group by c,b;
select sin(a) as z from t1 group by c*2,b*2;
select sin(a) as z from t1 where b=2 group by c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select sin(t2.a) as z from t1, t1 as t2 where t2.a=t1.a group by t1.b,t1.c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select sin(t2.a) as z from t1, t1 as t2 where t2.b=t1.b and t2.c=t1.c group by t1.b,t1.c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select t3.a from t1, t1 as t2, t1 as t3 where t3.b=t2.b and t3.c=t1.d and t2.b=t1.b and t2.c=t1.c group by t1.b,t1.c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
create table t3(pk int primary key, b int);
select t3.b from  t1,t1 as t2,t3 where t3.pk=t2.d and t2.b=t1.b and t2.c=t1.a group by t1.b,t1.c;
drop table t3;
select (select t1.b from t1 where t2.b=t1.b group by t1.a) from t1 as t2;
create table t2 like t1;
delete from t1;
insert into t1 (a,b) values(1,10),(2,20);
insert into t2 (a,b) values(1,-10);
select t1.a,t2.a from t1 left join t2 on t2.a=t1.a and t2.b=t1.b;
select t1.a from t1 left join t2 on t2.a=t1.a and t2.b=t1.b group by t2.a;
select t1.a,t2.a from t1 left join t2 on 42=t1.a and t2.b=t1.b;
select t1.a from t1 left join t2 on 42=t1.a and t2.b=t1.b group by t2.a;
select t1.a from t1 left join t2 on t2.b=t1.a group by t2.b;
select t1.a from t1 left join t2 on 42=t1.a group by t2.a;
select t1.c from t1 left join t2 on t1.a=t1.c group by t1.a;
select t1.b from t1 left join t2 on t1.c=t1.b and t1.a=t1.c group by t1.a;
select t1.a,t2.c from t1 left join t2 on t1.a=t2.c and cos(t2.c+t2.b)>0.5 and sin(t1.a+t2.d)<0.9 group by t1.a;
select t1.a,t2.d from t1 left join t2 on t1.a=t2.c and t1.d=t2.b and cos(t2.c+t2.b)>0.5 and sin(t1.a+t2.d)<0.9 group by t1.a,t1.d;
select t1.a,t2.c from t1 left join t2 on t1.a=t2.c and cos(t2.c+rand())>0.5 group by t1.a;
select t1.a, ANY_VALUE(t2.c) from t1 left join t2 on t1.a=t2.c and cos(t2.c+rand())>0.5 group by t1.a;
prepare s from 'select t1.a,t2.c from t1 left join t2 on t1.a=t2.c and cos(t2.c+ ? )>0.5 group by t1.a';
execute s using @dummy;
select t1.a,t2.c from t1 left join t2 on t1.a=t2.c and cos(t2.c+t2.b)>0.5 OR sin(t2.d)<0.9 group by t1.a;
select t2.b from t1 left join t1 as t2 on t1.a=t2.b and t1.b group by t1.a;
select t2.b from t1 left join t1 as t2 on t1.a=t2.b and (select t1.b) group by t1.a;
select ANY_VALUE(t1.b) from t1 left join t2 on t1.c=t1.b and t1.a=t1.c group by t1.a;
select 3+(5*t1.b) from t1 left join t2 on t1.c=t1.b and t1.a=t1.c group by t1.a;
select 3+(5*ANY_VALUE(t1.b)) from t1 left join t2 on t1.c=t1.b and t1.a=t1.c group by t1.a;
delete from t1;
insert into t1 (a,b) values(1,10),(1,20),(2,30),(2,40);
select a, sum(b) from t1;
select any_value(a), sum(b) from t1;
select any_value(a), sum(b) from (select * from t1 order by a desc) as d;
select a,b,sum(c) from t1 group by a;
select a,any_value(b),sum(c) from t1 group by a;
select a,any_value(b),sum(c) from (select * from t1 order by a desc, b desc) as d group by a;
set @optimizer_switch_saved=@@optimizer_switch;
create algorithm=merge view v1 as select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1;
show create view v1;
select sin(a) as z from v1 group by b;
select sin(a) as z from v1 group by d,b;
select sin(a) as z from v1 group by c,b;
select (select sin(a)) as z from v1 group by d,b;
select (select sin(a)) as z from v1 group by c,b;
select sin(a) as z from t1 group by c*2,b*2;
select sin(a+b*c) as z from v1 group by c,b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select sin(a) as z from v1 where b=2 group by c;
select sin(t2.a) as z from v1, v1 as t2 where t2.a=v1.a group by v1.b,v1.c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select sin(t2.a) as z from v1, v1 as t2 where t2.b=v1.b and t2.c=v1.c group by v1.b,v1.c;
select t3.a from v1, v1 as t2, v1 as t3 where t3.b=t2.b and t3.c=v1.d and t2.b=v1.b and t2.c=v1.c group by v1.b,v1.c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select a from v1 where a=b group by b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select b from v1 where a=b group by a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select v1.c from v1 where v1.c=v1.a group by v1.a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select v1.a from v1 group by v1.e;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select v1.c from v1 where v1.c=v1.a group by v1.e;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select t2.d from v1, t1 as t2 where v1.a=t2.d and v1.e=t2.a group by t2.a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
drop view if exists v1;
create algorithm=merge view v1 as select t1.a*2 as a, t1.b as b from t1;
select a from v1 group by b;
drop view if exists v1;
create algorithm=merge view v1 as select t1.a*2 as a, t1.b as b from t1 where t1.a=t1.b;
select a from v1 group by b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
drop view if exists v1;
drop view if exists v1;
drop view if exists v1;
set optimizer_switch=@optimizer_switch_saved;
set @optimizer_switch_saved=@@optimizer_switch;
create algorithm=temptable view v1 as select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1;
show create view v1;
select sin(a) as z from v1 group by b;
select sin(a) as z from v1 group by d,b;
select sin(a) as z from v1 group by c,b;
select (select sin(a)) as z from v1 group by d,b;
select (select sin(a)) as z from v1 group by c,b;
select sin(a) as z from t1 group by c*2,b*2;
select sin(a+b*c) as z from v1 group by c,b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select sin(a) as z from v1 where b=2 group by c;
select sin(t2.a) as z from v1, v1 as t2 where t2.a=v1.a group by v1.b,v1.c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select sin(t2.a) as z from v1, v1 as t2 where t2.b=v1.b and t2.c=v1.c group by v1.b,v1.c;
select t3.a from v1, v1 as t2, v1 as t3 where t3.b=t2.b and t3.c=v1.d and t2.b=v1.b and t2.c=v1.c group by v1.b,v1.c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select a from v1 where a=b group by b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select b from v1 where a=b group by a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select v1.c from v1 where v1.c=v1.a group by v1.a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select v1.a from v1 group by v1.e;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select v1.c from v1 where v1.c=v1.a group by v1.e;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select t2.d from v1, t1 as t2 where v1.a=t2.d and v1.e=t2.a group by t2.a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
drop view if exists v1;
create algorithm=temptable view v1 as select t1.a*2 as a, t1.b as b from t1;
select a from v1 group by b;
drop view if exists v1;
create algorithm=temptable view v1 as select t1.a*2 as a, t1.b as b from t1 where t1.a=t1.b;
select a from v1 group by b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
drop view if exists v1;
create algorithm=temptable view v1 as select sum(t1.a) as a, sum(t1.b) as b from t1;
select a from v1 group by b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
drop view if exists v1;
create algorithm=temptable view v1 as select a, b*5 as b, sum(t1.c) as c, sum(t1.d) as d from t1 group by a,b*5;
select a from v1 group by b;
select c from v1 group by b;
select c from v1 group by b,d;
select a,c from v1 group by a;
select d,c from v1 group by b,a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
drop view if exists v1;
set optimizer_switch=@optimizer_switch_saved;
set @optimizer_switch_saved=@@optimizer_switch;
set optimizer_switch='derived_merge=off';
select sin(a) as z from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1 group by b;
select sin(a) as z from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1 group by d,b;
select sin(a) as z from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1 group by c,b;
select (select sin(a)) as z from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1 group by d,b;
select (select sin(a)) as z from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1 group by c,b;
select sin(a) as z from t1 group by c*2,b*2;
select sin(a+b*c) as z from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1 group by c,b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select sin(a) as z from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1 where b=2 group by c;
select sin(t2.a) as z from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1, (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as t2 where t2.a=v1.a group by v1.b,v1.c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select sin(t2.a) as z from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1, (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as t2 where t2.b=v1.b and t2.c=v1.c group by v1.b,v1.c;
select t3.a from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1, (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as t2, (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as t3 where t3.b=t2.b and t3.c=v1.d and t2.b=v1.b and t2.c=v1.c group by v1.b,v1.c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select a from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1 where a=b group by b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select b from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1 where a=b group by a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select v1.c from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1 where v1.c=v1.a group by v1.a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select v1.a from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1 group by v1.e;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select v1.c from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1 where v1.c=v1.a group by v1.e;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select t2.d from (select t1.a*2 as a, t1.b as b, t1.c as c, t1.d as d, t1.a as e from t1) as v1, t1 as t2 where v1.a=t2.d and v1.e=t2.a group by t2.a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
drop view if exists v1;
select a from (select t1.a*2 as a, t1.b as b from t1) as v1 group by b;
drop view if exists v1;
select a from (select t1.a*2 as a, t1.b as b from t1 where t1.a=t1.b) as v1 group by b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
drop view if exists v1;
select a from (select sum(t1.a) as a, sum(t1.b) as b from t1) as v1 group by b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
drop view if exists v1;
select a from (select a, b*5 as b, sum(t1.c) as c, sum(t1.d) as d from t1 group by a,b*5) as v1 group by b;
select c from (select a, b*5 as b, sum(t1.c) as c, sum(t1.d) as d from t1 group by a,b*5) as v1 group by b;
select c from (select a, b*5 as b, sum(t1.c) as c, sum(t1.d) as d from t1 group by a,b*5) as v1 group by b,d;
select a,c from (select a, b*5 as b, sum(t1.c) as c, sum(t1.d) as d from t1 group by a,b*5) as v1 group by a;
select d,c from (select a, b*5 as b, sum(t1.c) as c, sum(t1.d) as d from t1 group by a,b*5) as v1 group by b,a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
drop view if exists v1;
set optimizer_switch=@optimizer_switch_saved;
create algorithm=temptable view v2 as select a as a, 2*a as b from t1;
create algorithm=merge view v1 as select v2.a as a, 3*v2.b as b from v2;
select v1.b from v1 group by v1.a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select t2.a from t1 as t2, v1 where t2.a=v1.b group by v1.a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
drop view v1;
create algorithm=merge view v1 as select v2.a as a, rand()*v2.b as b from v2;
select v1.b from v1 group by v1.a;
drop view v1;
create algorithm=temptable view v1 as select v2.a as a, rand()*v2.b as b from v2;
select v1.b from v1 group by v1.a;
drop view v1,v2;
create algorithm=merge view v2 as select 2*a as a, 2*b as b from t1;
create algorithm=merge view v1 as select a, 3*b as b from v2 where a=b;
select 1 from (select a,b+0 from v1 group by a) as d;
drop view v1,v2;
select d.s from (select b, sum(1) as s from t1 where a=b group by a) as d group by d.b;
alter table t1 add column pk int primary key auto_increment;
select d.s from (select b, c, sum(d) as s from t1 group by pk) as d group by d.b,d.c;
select d.s from (select b*3 as c, sum(a) as s from t1 group by b*3) as d group by d.c;
drop table t1,t2;
create table customer1(pk int primary key, a int);
create table customer2(pk int primary key, b int);
CREATE algorithm=merge VIEW customer as SELECT pk,a,b FROM customer1 JOIN customer2 USING (pk);
select customer.pk, customer.b from customer group by customer.pk;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
drop view customer;
CREATE algorithm=temptable VIEW customer as SELECT pk,a,b FROM customer1 JOIN customer2 USING (pk);
select customer.pk, customer.b from customer group by customer.pk;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
insert into customer1 values(0,10),(1,20);
insert into customer2 values(0,10),(1,20);
explain select customer1.a, count(*) from customer1 left join customer2 on customer1.a=customer2.b where customer1.pk in (7,9) group by customer2.b;
explain select customer1.a, count(*) from customer1 left join customer2 on customer1.a=customer2.b where customer2.pk in (7,9) group by customer2.b;
drop table customer1,customer2;
drop view customer;
create table t1(pk int primary key, a int);
create table t2(pk int primary key, b int);
select t1.pk, t1.a from t1 join t2 on t1.pk=t2.pk group by t1.pk;
select t1.pk, t1.a from t1 join t2 using(pk) group by t1.pk;
select t1.pk, t1.a from t1 natural join t2 group by t1.pk;
select t1.pk, t1.a from t1 left join t2 using(pk) group by t1.pk;
select t1.pk, t1.a from t1 natural left join t2 group by t1.pk;
select t1.pk, t2.b from t1 join t2 on t1.pk=t2.pk group by t1.pk;
select t1.pk, t2.b from t1 join t2 using(pk) group by t1.pk;
select t1.pk, t2.b from t1 natural join t2 group by t1.pk;
select t1.pk, t2.b from t1 left join t2 using(pk) group by t1.pk;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select t1.pk, t2.b from t1 natural left join t2 group by t1.pk;
select t1.pk, t2.b from t2 right join t1 using(pk) group by t1.pk;
select t1.pk, t2.b from t2 natural right join t1 group by t1.pk;
select t1.pk, t2.b from t1 left join t2 on t1.pk>t2.pk group by t1.pk;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select t1.pk, t2.b from t2 right join t1 on t1.pk>t2.pk group by t1.pk;
drop table t1,t2;
create table t1(a int, b int);
insert into t1 values(null,0),(null,1);
select d.a,d.c from t1 left join (select a, coalesce(a,3) as c from t1) as d on t1.b>0;
select d.a,d.c from t1 left join (select a, coalesce(a,3) as c from t1) as d on t1.b>0 group by d.a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select d.a,d.c from t1 left join (select a, count(a) as c from t1 group by a) as d on t1.b+d.c>0;
select d.a,d.c from t1 left join (select a, count(a) as c from t1 group by a) as d on t1.b+d.c>0 group by d.a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select d.m,d.c from t1 left join (select max(a) as m, count(a) as c from t1) as d on t1.b+d.c>0;
select d.m,d.c from t1 left join (select max(a) as m, count(a) as c from t1) as d on t1.b+d.c>0 group by d.m;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select d.m,d.c from t1 left join (select max(a) as m, count(a) as c from t1) as d on t1.b+d.c>0 group by d.c;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
drop table t1;
create table t1(pk int primary key, a int);
select t3.a from t1 left join (t1 as t2 left join t1 as t3 on 1) on 1 group by t3.pk;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
select (select t1.a from t1 as t2 limit 1) from t1 group by pk;
select t1.a*3 from t1 group by t1.a;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
drop table t1;
create table t1(a int, b int);
insert into t1 values();
insert into t1 values(10,11);
create table t2(c int, d int);
insert into t2 values(2,3);
select t4.d from t1 left join (t2 as t3 join t2 as t4 on t4.d=3) on t1.a=10;
select t4.d from t1 left join (t2 as t3 join t2 as t4 on t4.d=3) on t1.a=10 group by "";
select t4.d from t1 left join (t2 as t3 left join t2 as t4 on t4.d=3) on t1.a=10;
select t4.d from t1 left join (t2 as t3 left join t2 as t4 on t4.d=3) on t1.a=10 group by "";
select t4.d from t1 join (t2 as t3 left join t2 as t4 on t4.d=3) on t1.a=10;
select t4.d from t1 join (t2 as t3 left join t2 as t4 on t4.d=3) on t1.a=10 group by "";
create view v1 as select a as a, 2*a as b, coalesce(a,3) as c from t1;
select v1.b from t1 left join v1 on 1;
select v1.b from t1 left join v1 on 1 group by v1.a;
select v1.c from t1 left join v1 on 1;
select v1.c from t1 left join v1 on 1 group by v1.a;
drop view v1;
create view v1 as select a as a, 2 as b from t1;
select t1.a, v1.b from t1 left join v1 on t1.a is not null;
select t1.a, v1.b from t1 left join v1 on t1.a is not null group by v1.a;
drop view v1;
drop table t1,t2;
create table emp(empno int, ename char(1), deptno int);
create table dept(deptno int primary key, dname char(1));
CREATE algorithm=merge VIEW empdept AS SELECT emp.empno, emp.ename, dept.deptno, dept.dname FROM emp LEFT OUTER JOIN dept ON (emp.deptno = dept.deptno);
EXPLAIN SELECT dname, COUNT(*) FROM empdept GROUP BY deptno;
SELECT dname, COUNT(*) FROM empdept GROUP BY deptno;
drop view empdept;
CREATE algorithm=temptable VIEW empdept AS SELECT emp.empno, emp.ename, dept.deptno, dept.dname FROM emp LEFT OUTER JOIN dept ON (emp.deptno = dept.deptno);
EXPLAIN SELECT dname, COUNT(*) FROM empdept GROUP BY deptno;
SELECT dname, COUNT(*) FROM empdept GROUP BY deptno;
select emp.ename from (select 1 as empno union select 2) deriv, emp where emp.empno=deriv.empno group by emp.empno;
drop view empdept;
CREATE VIEW empdept AS SELECT emp.empno, emp.ename, dept.deptno, concat("",dept.dname) as dname FROM emp LEFT JOIN dept ON (emp.deptno = dept.deptno);
SELECT ename, COUNT(*) FROM empdept WHERE empno=dname and empno=deptno GROUP BY empno;
drop table emp,dept;
drop view empdept;
CREATE TABLE t1 ( c1 INT, c2 INT, c4 DATE, c5 VARCHAR(1) );
CREATE TABLE t2 ( c1 INT, c2 INT, c3 INT, c5 VARCHAR(1) );
CREATE VIEW v1 AS SELECT alias1.c4 AS field1 FROM t1 AS alias1 INNER JOIN t1 AS alias2 ON 1 GROUP BY field1 ORDER BY alias1.c5;
SELECT * FROM v1;
DROP VIEW v1;
CREATE VIEW v1 AS SELECT alias1.c4 AS field1, alias1.c4 AS field2 FROM t1 AS alias1 INNER JOIN t1 AS alias2 ON (alias2.c1 = alias1.c2) WHERE ( NOT EXISTS ( SELECT SQ1_alias1.c5 AS SQ1_field1 FROM t2 AS SQ1_alias1 WHERE SQ1_alias1.c3 < alias1.c1 )) AND (alias1.c5 = alias1.c5 AND alias1.c5 = 'd'     ) GROUP BY field1, field2 ORDER BY alias1.c5, field1, field2 ;
SELECT * FROM v1;
DROP VIEW v1;
DROP TABLE t1,t2;
CREATE TABLE t1 ( pk int NOT NULL, c1 datetime, c2 varchar(1), c3 date, c4 date, c5 varchar(1), PRIMARY KEY (pk) );
CREATE VIEW v1 AS SELECT c3 AS subfield11, pk AS subfield12, c2 AS subfield13 FROM t1 GROUP BY subfield11, subfield12 ;
SELECT c5 AS field1, c4 AS field2, c2 AS field3, c1 AS field4 FROM t1 WHERE ( c2, c2, pk ) IN ( SELECT * FROM v1 ) GROUP BY field1, field3, field3;
SELECT c5 AS field1, c4 AS field2, c2 AS field3, c1 AS field4 FROM t1, v1 WHERE ( c2, c2, pk ) = (subfield11, subfield12, subfield13) GROUP BY field1, field3, field3;
SELECT c5 AS field1, c4 AS field2, c2 AS field3, c1 AS field4 FROM t1 WHERE ( c2, c2, pk ) = (1, 2, 3) GROUP BY field1, field3, field3;
DROP TABLE t1;
CREATE TABLE t1(a INT, b INT, c INT, d INT);
SELECT a,b,c,d FROM t1 WHERE a=c AND b=d GROUP by a,b;
SELECT a,b,c,d FROM t1 WHERE (a,b)=(c,d) GROUP BY a,b;
SELECT a,b,c,d FROM t1 WHERE (a,b)=(c,d+1) GROUP BY a,b;
DROP TABLE t1;
DROP VIEW v1;
CREATE TABLE t1 ( col_varchar_10_utf8 VARCHAR(10) CHARACTER SET utf8, col_int_key INT, pk INT PRIMARY KEY );
CREATE TABLE t2 ( col_varchar_10_utf8 VARCHAR(10) CHARACTER SET utf8 DEFAULT NULL, col_int_key INT DEFAULT NULL, pk INT PRIMARY KEY );
CREATE VIEW v2 AS SELECT * FROM t2;
SELECT COUNT(*), t1.col_int_key FROM v2 LEFT OUTER JOIN t1 ON v2.col_varchar_10_utf8 = t1.col_varchar_10_utf8 WHERE v2.pk = 4;
DROP VIEW v2;
CREATE VIEW v2 AS SELECT CONCAT(col_varchar_10_utf8,' ') AS col_varchar_10_utf8, col_int_key, pk FROM t2;
SELECT COUNT(*), t1.col_int_key FROM v2 LEFT OUTER JOIN t1 ON v2.col_varchar_10_utf8 = t1.col_varchar_10_utf8 WHERE v2.pk = 4;
DROP VIEW v2;
CREATE VIEW v2 AS SELECT t1.pk, t2.col_int_key+1 as c, t1.pk+t2.col_int_key as p FROM t1, t2;
SELECT COUNT(*), v2.p FROM v2 WHERE v2.c=v2.p and v2.c=v2.pk AND v2.pk = 4;
DROP VIEW v2;
CREATE ALGORITHM=MERGE VIEW v2 AS SELECT t2.pk, COALESCE(t2.pk, 3) AS coa FROM t1 LEFT JOIN t2 ON 0;
SELECT v2.pk, v2.coa FROM t1 LEFT JOIN v2 AS v2 ON 0 GROUP BY v2.pk;
DROP VIEW v2;
DROP TABLE t1,t2;
CREATE TABLE t ( a INT, c INT GENERATED ALWAYS AS (a+2), d INT GENERATED ALWAYS AS (c+2) );
SELECT c FROM t GROUP BY a;
SELECT d FROM t GROUP BY c;
SELECT d FROM t GROUP BY a;
SELECT 1+c FROM t GROUP BY a;
SELECT 1+d FROM t GROUP BY c;
SELECT 1+d FROM t GROUP BY a;
SELECT t1.d FROM t as t1, t as t2 WHERE t2.d=t1.c GROUP BY t2.a;
SELECT t1.d FROM t as t1, t as t2 WHERE t2.d>t1.c GROUP BY t2.a;
DROP TABLE t;
CREATE TABLE t ( a INT, c INT GENERATED ALWAYS AS (COALESCE(a,3)) );
INSERT INTO t (a) VALUES(NULL);
CREATE TABLE u ( a INT );
INSERT INTO u VALUES(0),(1);
SELECT t.a,t.c FROM u LEFT JOIN t ON u.a>0;
SELECT t.a,t.c FROM u LEFT JOIN t ON u.a>0 GROUP BY t.a;
DROP TABLE t,u;
CREATE TABLE coll ( doc text ) ENGINE=InnoDB;
SELECT (je+1)+count(*) FROM (SELECT doc+1 AS je FROM coll) AS dt GROUP BY je;
SELECT je+(1+count(*)) FROM (SELECT doc+1 AS je FROM coll) AS dt GROUP BY je;
DROP TABLE coll;
CREATE TABLE t ( a INT, c INT GENERATED ALWAYS AS (a+2), d INT GENERATED ALWAYS AS (c+2) );
SELECT t1.d FROM t as t1, t as t2 WHERE t2.d>t1.c GROUP BY t2.a;
SELECT t1.d FROM t as t1, t as t2 WHERE t2.d>t1.c GROUP BY t2.a;
FLUSH TABLES;
SELECT (SELECT t1.c FROM t as t1 GROUP BY -3) FROM t as t2;
SELECT DISTINCT t1.a FROM t as t1 ORDER BY t1.d LIMIT 1;
SELECT (SELECT DISTINCT t1.a FROM t as t1 ORDER BY t1.d LIMIT 1) FROM t as t2;
DROP TABLE t;
CREATE TABLE t(a INT NULL, b INT NOT NULL, c INT, UNIQUE(a,b));
INSERT INTO t VALUES (NULL, 1, 4);
INSERT INTO t VALUES (NULL, 1, 5);
SELECT a,b,c FROM t GROUP BY a,b;
SELECT a,b,c FROM t WHERE a IS NOT NULL GROUP BY a,b;
SELECT a,b,c FROM t WHERE NOT (a IS NULL) GROUP BY a,b;
SELECT a,b,c FROM t WHERE a > 3 GROUP BY a,b;
SELECT a,b,c FROM t WHERE a = 3 GROUP BY b;
SELECT a,b,c FROM t WHERE a BETWEEN 3 AND 6 GROUP BY a,b;
SELECT a,b,c FROM t WHERE a <> 3 GROUP BY a,b;
SELECT a,b,c FROM t WHERE a IN (3,4) GROUP BY a,b;
SELECT a,b,c FROM t WHERE a IN (SELECT b FROM t) GROUP BY a,b;
SELECT a,b,c FROM t WHERE a IS TRUE GROUP BY a,b;
SELECT a,b,c FROM t WHERE (a <> 3) IS TRUE GROUP BY a,b;
SELECT a,b,c FROM t WHERE a IS FALSE GROUP BY a,b;
SELECT a,b,c FROM t WHERE (a <> 3) IS FALSE GROUP BY a,b;
SELECT a,b,c FROM t WHERE NOT(a IN (3,4)) GROUP BY a,b;
SELECT a,b,c FROM t WHERE a NOT IN (3,4) GROUP BY a,b;
SELECT a,b,c FROM t WHERE a LIKE "%abc%" GROUP BY a,b;
SELECT a,b,c FROM t WHERE a NOT LIKE "%abc%" GROUP BY a,b;
SELECT a,b,c FROM t WHERE a IS TRUE GROUP BY b;
SELECT a,b,c FROM t WHERE a<=>NULL GROUP BY b;
SELECT a,b,c FROM t WHERE a IS NOT TRUE GROUP BY a,b;
SELECT a,b,c FROM (SELECT * FROM t WHERE a IS NOT NULL) AS dt GROUP BY a,b;
SELECT /*+ NO_MERGE() */ a,b,c FROM (SELECT * FROM t WHERE a IS NOT NULL) AS dt GROUP BY a,b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
SELECT a,b,c FROM t WHERE a IS NULL GROUP BY a,b;
SELECT a,b,c FROM t WHERE NOT(a IS NOT NULL) GROUP BY a,b;
SELECT t.* FROM t LEFT JOIN t AS t1 ON t.a IS NOT NULL GROUP BY t.a,t.b;
SELECT t.* FROM t RIGHT JOIN t AS t1 ON t.a IS NOT NULL GROUP BY t.a,t.b;
DROP TABLE t;
CREATE TABLE t1 (a INT, b INT);
CREATE TABLE t2 (b INT);
CREATE TABLE t3 ( b INT NULL, c INT NULL, d INT NULL, e INT NULL, UNIQUE KEY (b,d,e));
SELECT * FROM t1, t2, t3 WHERE t2.b = t1.b AND t2.b = t3.b AND t3.d = 1 AND t3.e = 1 AND t3.d IS NOT NULL AND t1.a = 2 GROUP BY t1.b;
SELECT * FROM t1, t2, t3 WHERE t2.b = t1.b AND t2.b = t3.b AND t3.d = 1 AND t3.e = 1 AND t1.a = 2 GROUP BY t1.b;
SELECT show_json_object('"functional_dependencies_of_GROUP_columns": {', TRACE) FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
SELECT * FROM t1, t2, t3 WHERE t2.b = t1.b AND t2.b = t3.b AND t3.e = 1 AND t3.d IS NOT NULL AND t1.a = 2 GROUP BY t1.b;
explain select (select 2 from t2 where 1=(select t1.b from t3)) as col from t1 group by t1.a;
explain select (select 2 from t2 where exists(select t1.b from t3)) as col from t1 group by t1.a;
explain select (select 2 from t2 where not exists(select t1.b from t3)) as col from t1 group by t1.a;
explain select (select 2 from t2 where exists(select 1 from t3 where t1.b)) as col from t1 group by t1.a;
explain select (select 2 from t2 where not exists(select 1 from t3 where t1.b)) as col from t1 group by t1.a;
explain select (select 2 from t2 where 1 in(select t1.b from t3)) as col from t1 group by t1.a;
alter table t1 modify b int not null;
explain select (select 2 from t2 where 1 not in(select t1.b from t3)) as col from t1 group by t1.a;
explain select (select 2 from t2 where 1 in(select 1 from t3 where t1.b)) as col from t1 group by t1.a;
explain select (select 2 from t2 where 1 not in(select 1 from t3 where t1.b)) as col from t1 group by t1.a;
DROP TABLE t1, t2, t3;
DROP FUNCTION show_json_object;
CREATE TABLE t(i INT);
INSERT INTO t VALUES (-1),(2),(1);
SELECT ABS(i) AS a FROM t GROUP BY abs(i)             ORDER BY a + 1;
SELECT ABS(i) AS a FROM t GROUP BY abs(i) WITH ROLLUP ORDER BY a + 1;
SELECT ABS(i) AS a FROM t GROUP BY a                  ORDER BY a + 1;
SELECT ABS(i) AS a FROM t GROUP BY a      WITH ROLLUP ORDER BY a + 1;
DROP TABLE t;
CREATE TABLE t (a INT,b INT);
SELECT 1 FROM t AS ot WHERE 1 <= ( SELECT it2.a FROM ( SELECT ot.b FROM t AS it1 ) AS dt JOIN t AS it2 ON dt.b=it2.b GROUP BY it2.b ) ;
SELECT 1 FROM t AS ot WHERE 1 <= ( SELECT dt.b FROM ( SELECT ot.b FROM t AS it1 ) AS dt JOIN t AS it2 ON dt.b=it2.b GROUP BY it2.b ) ;
DROP TABLE t;
