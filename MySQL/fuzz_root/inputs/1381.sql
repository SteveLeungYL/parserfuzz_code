set @old_concurrent_insert= @@global.concurrent_insert;
set @@global.concurrent_insert= 0;
SET @old_log_output = @@global.log_output;
SET GLOBAL LOG_OUTPUT = 'FILE';
flush status;
show status like 'Table_lock%';
select * from performance_schema.session_status where variable_name like 'Table_lock%';
set sql_log_bin=0;
set @old_general_log = @@global.general_log;
set global general_log = 'OFF';
drop table if exists t1;
create table t1(n int);
insert into t1 values(1);
select get_lock('mysqltest_lock', 100);
update t1 set n = get_lock('mysqltest_lock', 100) ;
update t1 set n = 3;
select release_lock('mysqltest_lock');
reap;
select release_lock('mysqltest_lock');
reap;
show status like 'Table_locks_waited';
drop table t1;
set global general_log = @old_general_log;
select 1;
show status like 'last_query_cost';
create table t1 (a int);
insert into t1 values (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);
insert into t1 values (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);
insert into t1 values (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);
insert into t1 values (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);
insert into t1 values (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);
analyze table t1;
select * from t1 where a=6;
show status like 'last_query_cost';
show status like 'last_query_cost';
select 1;
show status like 'last_query_cost';
drop table t1;
FLUSH STATUS;
SET @wait_left = 10;
SET @max_used_connections = SUBSTRING('Max_used_connections	1', 21)+0;
SHOW STATUS LIKE 'max_used_connections';
SELECT * FROM performance_schema.session_status WHERE VARIABLE_NAME LIKE 'max_used_connections';
SET @save_thread_cache_size=@@thread_cache_size;
SET GLOBAL thread_cache_size=3;
SHOW STATUS LIKE 'max_used_connections';
SELECT * FROM performance_schema.session_status WHERE VARIABLE_NAME LIKE 'max_used_connections';
FLUSH STATUS;
SET @wait_left = 10;
SET @max_used_connections = SUBSTRING('Max_used_connections	2', 21)+0;
SHOW STATUS LIKE 'max_used_connections';
SELECT * FROM performance_schema.session_status WHERE VARIABLE_NAME LIKE 'max_used_connections';
SHOW STATUS LIKE 'max_used_connections';
SELECT * FROM performance_schema.session_status WHERE VARIABLE_NAME LIKE 'max_used_connections';
SHOW STATUS LIKE 'max_used_connections';
SELECT * FROM performance_schema.session_status WHERE VARIABLE_NAME LIKE 'max_used_connections';
SET GLOBAL thread_cache_size=@save_thread_cache_size;
CREATE TABLE t1 ( a INT );
INSERT INTO t1 VALUES (1), (2);
analyze table t1;
SELECT a FROM t1 LIMIT 1;
SHOW SESSION STATUS LIKE 'Last_query_cost';
EXPLAIN SELECT a FROM t1;
SHOW SESSION STATUS LIKE 'Last_query_cost';
SELECT a FROM t1 UNION SELECT a FROM t1 ORDER BY a;
SHOW SESSION STATUS LIKE 'Last_query_cost';
EXPLAIN SELECT a FROM t1 UNION SELECT a FROM t1 ORDER BY a;
SHOW SESSION STATUS LIKE 'Last_query_cost';
SELECT a IN (SELECT a FROM t1) FROM t1 LIMIT 1;
SHOW SESSION STATUS LIKE 'Last_query_cost';
SELECT (SELECT a FROM t1 LIMIT 1) x FROM t1 LIMIT 1;
SHOW SESSION STATUS LIKE 'Last_query_cost';
SELECT * FROM t1 a, t1 b ORDER BY a.a, b.a LIMIT 1;
SHOW SESSION STATUS LIKE 'Last_query_cost';
DROP TABLE t1;
flush status;
show status like 'Com%function';
create function f1 (x INTEGER) returns integer begin declare ret integer; set ret = x * 10; return ret; end ;
drop function f1;
show status like 'Com%function';
create database db37908;
create table db37908.t1(f1 int);
insert into db37908.t1 values(1);
create user mysqltest_1@localhost;
grant usage,execute on test.* to mysqltest_1@localhost;
create procedure proc37908() begin select 1; end ;
create function func37908() returns int sql security invoker return (select * from db37908.t1 limit 1);
select * from db37908.t1;
show status where variable_name ='uptime' and 2 in (select * from db37908.t1);
show procedure status where name ='proc37908' and 1 in (select f1 from db37908.t1);
show function status where name ='func37908' and 1 in (select func37908());
drop database db37908;
drop procedure proc37908;
drop function func37908;
REVOKE ALL PRIVILEGES, GRANT OPTION FROM mysqltest_1@localhost;
DROP USER mysqltest_1@localhost;
DROP PROCEDURE IF EXISTS p1;
DROP FUNCTION IF EXISTS f1;
CREATE FUNCTION f1() RETURNS INTEGER BEGIN DECLARE foo INTEGER; DECLARE bar INTEGER; SET foo=1; SET bar=2; RETURN foo; END ;
CREATE PROCEDURE p1() BEGIN SELECT 1; END ;
SELECT f1();
CALL p1();
SELECT 9;
DROP PROCEDURE p1;
DROP FUNCTION f1;
create table t1 (i int);
create table t2 (j int);
create table t3 (k int);
flush tables;
flush status;
set @old_table_open_cache= @@table_open_cache;
show status like 'table_open_cache_%';
select * from t1;
show status like 'table_open_cache_%';
select * from t1;
show status like 'table_open_cache_%';
select * from t2;
show status like 'table_open_cache_%';
select * from t2;
show status like 'table_open_cache_%';
select * from t1 as a, t2 as b, t1 as c, t2 as d, t1 as e, t2 as f;
show status like 'table_open_cache_%';
set @@global.table_open_cache= 4;
select * from t1;
show status like 'table_open_cache_%';
select * from t1 as a, t2 as b, t1 as c, t2 as d, t1 as e, t2 as f;
show status like 'table_open_cache_%';
select * from t3;
show status like 'table_open_cache_%';
set @@global.table_open_cache= @old_table_open_cache;
drop tables t1, t2, t3;
SHOW STATUS LIKE 'max_used_connections_time';
SHOW STATUS LIKE 'max_used_connections';
SHOW STATUS LIKE 'max_used_connections';
SELECT TIMESTAMPDIFF(SECOND,'2022-01-02 23:01:36','2022-01-02 23:01:36') <> 0;
SELECT TIMESTAMPDIFF(SECOND,'2022-01-02 23:01:36','2022-01-02 23:01:36') <> 0;
FLUSH STATUS;
SELECT TIMESTAMPDIFF(SECOND,'2022-01-02 23:01:39','2022-01-02 23:01:36') <> 0;
set @@global.concurrent_insert= @old_concurrent_insert;
SET GLOBAL log_output = 'FILE,TABLE';
CREATE TABLE t1(x INT, y INT);
INSERT INTO t1 VALUES (1, 2), (3, 4), (5, 6);
ANALYZE TABLE t1;
EXPLAIN SELECT * FROM t1;
SHOW STATUS LIKE 'Last_query_cost';
EXPLAIN SELECT (SELECT MAX(x) FROM t1) FROM t1;
SHOW STATUS LIKE 'Last_query_cost';
EXPLAIN SELECT * FROM t1 WHERE x IN (SELECT MAX(x) FROM t1);
SHOW STATUS LIKE 'Last_query_cost';
EXPLAIN SELECT /*+ NO_MERGE(a) */ * FROM (SELECT * FROM t1) a, t1 b;
SHOW STATUS LIKE 'Last_query_cost';
EXPLAIN SELECT * FROM t1 WHERE x > 0;
SHOW STATUS LIKE 'Last_query_cost';
EXPLAIN SELECT * FROM t1 WHERE y > 0;
SHOW STATUS LIKE 'Last_query_cost';
EXPLAIN SELECT * FROM t1 WHERE x > 0 UNION ALL SELECT * FROM t1 WHERE y > 0;
SHOW STATUS LIKE 'Last_query_cost';
EXPLAIN SELECT * FROM t1 WHERE x > 0 UNION DISTINCT SELECT * FROM t1 WHERE y > 0;
SHOW STATUS LIKE 'Last_query_cost';
EXPLAIN INSERT INTO t1 SELECT * FROM t1;
SHOW STATUS LIKE 'Last_query_cost';
EXPLAIN INSERT INTO t1 SELECT * FROM t1 WHERE x > 0 UNION ALL SELECT * FROM t1 WHERE y > 0;
SHOW STATUS LIKE 'Last_query_cost';
EXPLAIN INSERT INTO t1 SELECT * FROM t1 WHERE x > 0 UNION DISTINCT SELECT * FROM t1 WHERE y > 0;
SHOW STATUS LIKE 'Last_query_cost';
DROP TABLE t1;
CREATE TABLE t1 (pk INTEGER PRIMARY KEY, i1 INTEGER, i2 INTEGER NOT NULL, INDEX k1 (i1), INDEX k2 (i1, i2));
INSERT INTO t1 VALUES (1, NULL, 43), (11, NULL, 103), (10, 32,50), (9, 12, 43), (8, NULL, 13), (7, 48, 90), (6, 56, 90), (5, 87, 84), (4, 58, 98), (3, 30, 82), (2, 54, 57), (12, 232, 43), (13, 43, 103), (14, 32, 45), (15, 12, 43), (16, 89, 23), (17, 48, 90), (18, 56, 90), (19, 87, 84);
CREATE TABLE t2 (pk INTEGER PRIMARY KEY, i1 INTEGER NOT NULL, INDEX k1 (i1));
INSERT INTO t2 VALUES (3, 89), (4, 98), (5, 84), (6, 8), (7, 99), (8, 110), (9, 84), (10, 98), (11, 103), (12, 50), (13, 84), (14, 57), (15, 82), (16, 103), (2, 98), (1, 90);
ANALYZE TABLE t1, t2;
EXPLAIN SELECT * FROM t1, t2 WHERE t1.i1 = t2.i1 ORDER BY t1.i1 LIMIT 10;
SHOW STATUS LIKE 'Last_query_cost';
DROP TABLE t1, t2;
SET @@global.log_output = @old_log_output;
SET @@global.general_log = @old_general_log;
TRUNCATE TABLE mysql.general_log;
