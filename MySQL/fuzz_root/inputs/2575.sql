SELECT COUNT(*) AS should_be_0 FROM information_schema.COLUMN_STATISTICS;
ANALYZE TABLE all_types;
SELECT COUNT(*) AS should_be_0 FROM information_schema.COLUMN_STATISTICS;
ANALYZE TABLE all_types UPDATE HISTOGRAM ON col_bool, col_bit, col_tinyint, col_smallint, col_mediumint, col_integer, col_bigint, col_tinyint_unsigned, col_smallint_unsigned, col_mediumint_unsigned, col_integer_unsigned, col_bigint_unsigned, col_float, col_double, col_decimal, col_date, col_time, col_year, col_datetime, col_timestamp, col_char, col_varchar, col_tinytext, col_text, col_mediumtext, col_longtext, col_binary, col_varbinary, col_tinyblob, col_blob, col_mediumblob, col_longblob, col_enum, col_set WITH 1024 BUCKETS;
SELECT schema_name, table_name, column_name, JSON_REMOVE(histogram, '$."last-updated"') FROM information_schema.COLUMN_STATISTICS;
DROP TABLE all_types;
SELECT COUNT(*) AS should_be_0 FROM information_schema.COLUMN_STATISTICS;
CREATE TABLE unsupported_types (col_geometry GEOMETRY, col_point POINT, col_linestring LINESTRING, col_polygon POLYGON, col_multipoint MULTIPOINT, col_multilinestring MULTILINESTRING, col_multipolygon MULTIPOLYGON, col_geometrycollection GEOMETRYCOLLECTION, col_json JSON);
ANALYZE TABLE unsupported_types UPDATE HISTOGRAM ON col_geometry, col_point, col_linestring, col_polygon, col_multipoint, col_multilinestring, col_multipolygon, col_geometrycollection, col_json WITH 100 BUCKETS;
SELECT COUNT(*) AS should_be_0 FROM information_schema.COLUMN_STATISTICS;
DROP TABLE unsupported_types;
CREATE TABLE t1 (col_integer INT);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON foobar WITH 100 BUCKETS;
SELECT COUNT(*) AS should_be_0 FROM information_schema.COLUMN_STATISTICS;
ANALYZE TABLE foobar UPDATE HISTOGRAM ON foobar WITH 100 BUCKETS;
SELECT COUNT(*) AS should_be_0 FROM information_schema.COLUMN_STATISTICS;
CREATE TEMPORARY TABLE temp_table (col1 INT);
ANALYZE TABLE temp_table UPDATE HISTOGRAM ON col1 WITH 100 BUCKETS;
SELECT COUNT(*) AS should_be_0 FROM information_schema.COLUMN_STATISTICS;
DROP TABLE temp_table;
CREATE VIEW my_view AS SELECT * FROM t1;
ANALYZE TABLE my_view UPDATE HISTOGRAM ON col_integer WITH 100 BUCKETS;
SELECT COUNT(*) AS should_be_0 FROM information_schema.COLUMN_STATISTICS;
DROP VIEW my_view;
ALTER TABLE t1 ADD COLUMN virtual_generated INT AS (col_integer + 10) VIRTUAL, ADD COLUMN stored_generated INT AS (col_integer + 20) STORED;
INSERT INTO t1 (col_integer) VALUES (10), (20), (30);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_integer, virtual_generated, stored_generated WITH 100 BUCKETS;
SELECT schema_name, table_name, column_name, JSON_REMOVE(histogram, '$."last-updated"') FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 DROP COLUMN virtual_generated, DROP COLUMN stored_generated;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
DELETE FROM t1;
INSERT INTO t1 VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_integer WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name, JSON_EXTRACT(histogram, '$."histogram-type"') AS should_be_singleton FROM information_schema.COLUMN_STATISTICS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_integer WITH 9 BUCKETS;
SELECT schema_name, table_name, column_name, JSON_EXTRACT(histogram, '$."histogram-type"') AS should_be_equiheight FROM information_schema.COLUMN_STATISTICS;
DROP TABLE t1;
ANALYZE TABLE foo UPDATE HISTOGRAM ON foo WITH 0 BUCKETS;
ANALYZE TABLE foo UPDATE HISTOGRAM ON foo WITH 1025 BUCKETS;
ANALYZE TABLE foo UPDATE HISTOGRAM ON foo WITH -1 BUCKETS;
ANALYZE TABLE foo UPDATE HISTOGRAM ON tbl.col WITH 100 BUCKETS;
ANALYZE TABLE foo UPDATE HISTOGRAM ON db.tbl.col WITH 100 BUCKETS;
ANALYZE TABLE foo, foo2 UPDATE HISTOGRAM ON bar WITH 100 BUCKETS;
CREATE TABLE t1 (col1 INT PRIMARY KEY, col2 INT, col3 INT, UNIQUE INDEX index_1 (col2), UNIQUE INDEX index_2 (col3, col2));
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1, col2, col3 WITH 100 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 ALTER INDEX index_1 INVISIBLE;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col2 WITH 100 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
DROP TABLE t1;
CREATE TABLE t1 (col1 INT);
INSERT INTO t1 SELECT 1;
INSERT INTO t1 SELECT col1 + 1 FROM t1;
INSERT INTO t1 SELECT col1 + 2 FROM t1;
INSERT INTO t1 SELECT col1 + 4 FROM t1;
INSERT INTO t1 SELECT col1 + 8 FROM t1;
INSERT INTO t1 SELECT col1 + 16 FROM t1;
INSERT INTO t1 SELECT col1 + 32 FROM t1;
INSERT INTO t1 SELECT col1 + 64 FROM t1;
INSERT INTO t1 SELECT col1 + 128 FROM t1;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 10 BUCKETS;
SELECT JSON_LENGTH(histogram->'$.buckets') <= 10 FROM information_schema.COLUMN_STATISTICS WHERE schema_name = 'test' AND table_name = 't1' AND column_name = 'col1';
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 57 BUCKETS;
SELECT JSON_LENGTH(histogram->'$.buckets') <= 57 FROM information_schema.COLUMN_STATISTICS WHERE schema_name = 'test' AND table_name = 't1' AND column_name = 'col1';
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 255 BUCKETS;
SELECT JSON_LENGTH(histogram->'$.buckets') <= 255 FROM information_schema.COLUMN_STATISTICS WHERE schema_name = 'test' AND table_name = 't1' AND column_name = 'col1';
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1, col2, col1 WITH 10 BUCKETS;
DROP TABLE t1;
CREATE TABLE t1 (c1 INT);
INSERT INTO t1 (c1) VALUES (10), (20), (30);
CREATE TABLE t2 (c2 INT);
INSERT INTO t2 (c2) VALUES (10), (20), (30);
LOCK TABLES t2 READ;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON c1 WITH 10 BUCKETS;
SELECT COUNT(*) AS should_be_0 FROM information_schema.COLUMN_STATISTICS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON c2 WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
UNLOCK TABLES;
DROP TABLES t1, t2;
SELECT COUNT(*) AS should_be_0 FROM information_schema.COLUMN_STATISTICS;
CREATE TABLE t1 (col1 INT, col2 VARCHAR(255));
INSERT INTO t1 VALUES (1, "1"), (2, "2"), (3, "3"), (4, "4"), (5, "5"), (6, "6"), (7, "7"), (8, "8"), (9, "9"), (10, "10");
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1, col2 WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ANALYZE TABLE t1 DROP HISTOGRAM ON col2;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ANALYZE TABLE t1 DROP HISTOGRAM ON col1;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1, col2 WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ANALYZE TABLE t1 DROP HISTOGRAM ON col2, col1;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ANALYZE TABLE t1 DROP HISTOGRAM ON col1;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col2 WITH 10 BUCKETS;
ANALYZE TABLE t1 DROP HISTOGRAM ON col1, col2;
ANALYZE TABLE t1 DROP HISTOGRAM ON foobar;
ANALYZE TABLE foo DROP HISTOGRAM ON foobar;
CREATE TEMPORARY TABLE temp_table (col1 INT);
ANALYZE TABLE temp_table DROP HISTOGRAM ON col1;
DROP TABLE temp_table;
ANALYZE TABLE foo DROP HISTOGRAM ON foobar, foobar;
CREATE TABLE t2 (col1 INT);
ANALYZE TABLE t1, t2 DROP HISTOGRAM ON col1;
DROP TABLE t1, t2;
CREATE TABLE t1 (c1 INT);
INSERT INTO t1 (c1) VALUES (10), (20), (30);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON c1 WITH 10 BUCKETS;
CREATE TABLE t2 (c2 INT);
INSERT INTO t2 (c2) VALUES (10), (20), (30);
ANALYZE TABLE t2 UPDATE HISTOGRAM ON c2 WITH 10 BUCKETS;
LOCK TABLES t2 READ;
ANALYZE TABLE t1 DROP HISTOGRAM ON c1;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ANALYZE TABLE t2 DROP HISTOGRAM ON c2;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
UNLOCK TABLES;
DROP TABLES t1, t2;
SELECT COUNT(*) AS should_be_0 FROM information_schema.COLUMN_STATISTICS;
CREATE TABLE t1 (col1 INT);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
DROP TABLE t1;
SELECT COUNT(*) AS should_be_0 FROM information_schema.COLUMN_STATISTICS;
CREATE TABLE t1 (col1 INT, col2 INT);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1, col2 WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 CHANGE COLUMN col1 col1_renamed INT;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 CHANGE COLUMN col2 col2 VARCHAR(255);
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col2 WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 DROP COLUMN col2;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
INSERT INTO t1 VALUES (1), (2);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1_renamed WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name, JSON_REMOVE(histogram, '$."last-updated"') FROM information_schema.COLUMN_STATISTICS;
RENAME TABLE t1 TO t1_renamed;
SELECT schema_name, table_name, column_name, JSON_REMOVE(histogram, '$."last-updated"') FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1_renamed RENAME TO t1;
SELECT schema_name, table_name, column_name, JSON_REMOVE(histogram, '$."last-updated"') FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 RENAME TO t1_renamed, ALGORITHM = INPLACE;
SELECT schema_name, table_name, column_name, JSON_REMOVE(histogram, '$."last-updated"') FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1_renamed RENAME TO t1, ALGORITHM = COPY;
SELECT schema_name, table_name, column_name, JSON_REMOVE(histogram, '$."last-updated"') FROM information_schema.COLUMN_STATISTICS;
DROP TABLE t1;
CREATE TABLE t1 (col1 VARCHAR(255), col2 VARCHAR(255));
INSERT INTO t1 VALUES ('foo', 'foo'), ('bar', 'bar'), ('fo', 'fo'), ('yay', 'yay');
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 10 BUCKETS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col2 WITH 2 BUCKETS;
SELECT schema_name, table_name, column_name, JSON_REMOVE(histogram, '$."last-updated"') FROM information_schema.COLUMN_STATISTICS;
RENAME TABLE t1 TO t1_renamed;
SELECT schema_name, table_name, column_name, JSON_REMOVE(histogram, '$."last-updated"') FROM information_schema.COLUMN_STATISTICS;
DROP TABLE t1_renamed;
CREATE DATABASE histogram_db;
CREATE TABLE histogram_db.t1 (col1 INT);
ANALYZE TABLE histogram_db.t1 UPDATE HISTOGRAM ON col1 WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
DROP DATABASE histogram_db;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
CREATE TABLE t1 (col1 VARCHAR(255), col2 CHAR(10), col3 TEXT, col4 INT, col5 BLOB) CHARACTER SET latin1;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1, col2, col3, col4, col5 WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 CONVERT TO CHARACTER SET utf8mb4;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1, col2, col3, col4, col5 WITH 10 BUCKETS;
ALTER TABLE t1 MODIFY COLUMN col1 VARCHAR(255) CHARACTER SET latin1;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
DROP TABLE t1;
CREATE TABLE t1 (col1 INT);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 ADD COLUMN col2 INT;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 DROP COLUMN col2;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
DROP TABLE t1;
CREATE TABLE t1 (col1 INT, col2 INT);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON COL1, col2 WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 DROP COLUMN COL1;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
DROP TABLE t1;
CREATE TABLE t(x INT);
PREPARE ps FROM 'ANALYZE TABLE t UPDATE HISTOGRAM ON x WITH 10 BUCKETS';
EXECUTE ps;
EXECUTE ps;
DROP TABLE t;
CREATE TABLE t1 (col1 INT, col2 INT, col3 INT, col4 INT, col5 INT, col6 INT);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1, col2, col3, col4, col5, col6 WITH 4 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 ADD UNIQUE INDEX (col1);
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 ADD UNIQUE INDEX (col2), ALGORITHM = INPLACE;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 ADD UNIQUE INDEX (col3), ALGORITHM = COPY;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 ADD PRIMARY KEY (col4);
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 ADD UNIQUE INDEX (col5, col6);
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
CREATE UNIQUE INDEX index_col5 ON t1 (col5);
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
CREATE INDEX index_col6 ON t1 (col6);
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE t1 MODIFY COLUMN col6 INT UNIQUE;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
SET GLOBAL read_only = 1;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 1024 BUCKETS;
SET GLOBAL read_only = 0;
DROP TABLE t1;
CREATE TABLE t1 ( c1 int(11) DEFAULT NULL, c2 int(11) GENERATED ALWAYS AS ((c1 * 2)) VIRTUAL ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON c2 WITH 2 BUCKETS;
INSERT into t1(c1) VALUES (1);
ALTER TABLE t1 ADD UNIQUE INDEX i (c2);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON c2 WITH 2 BUCKETS;
ALTER TABLE t1 DROP KEY i;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON c2 WITH 2 BUCKETS;
DROP TABLE t1;
CREATE TABLE t1 (col1 INT);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 2 BUCKETS;
ALTER TABLE t1 DROP COLUMN foobar, CHANGE COLUMN col1 col2 INT;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
DROP TABLE t1;
CREATE TABLE foo (col1 INT, col2 INT AS (col1 + 1) VIRTUAL, col3 INT AS (col2 + 1) VIRTUAL);
INSERT INTO foo (col1) VALUES (1);
ANALYZE TABLE foo UPDATE HISTOGRAM ON col3 WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
DROP TABLE foo;
CREATE TABLE t1 (col1 INT);
INSERT INTO t1 SELECT 1;
INSERT INTO t1 SELECT col1 + 1 FROM t1;
INSERT INTO t1 SELECT col1 + 2 FROM t1;
INSERT INTO t1 SELECT col1 + 4 FROM t1;
INSERT INTO t1 SELECT col1 + 8 FROM t1;
INSERT INTO t1 SELECT col1 + 16 FROM t1;
INSERT INTO t1 SELECT col1 + 32 FROM t1;
INSERT INTO t1 SELECT col1 + 64 FROM t1;
INSERT INTO t1 SELECT col1 + 128 FROM t1;
INSERT INTO t1 SELECT col1 + 256 FROM t1 LIMIT 38;
INSERT INTO t1 SELECT NULL;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 1024 BUCKETS;
DROP TABLE t1;
CREATE TABLE p (col1 INT PRIMARY KEY, col2 INT, col3 INT) PARTITION BY KEY (col1) PARTITIONS 4;
INSERT INTO p VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3);
ANALYZE TABLE p UPDATE HISTOGRAM ON col2, col3 WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name, JSON_REMOVE(histogram, '$."last-updated"') FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE p PARTITION BY HASH (col1) PARTITIONS 2;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ANALYZE TABLE p UPDATE HISTOGRAM ON col2, col3 WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name, JSON_REMOVE(histogram, '$."last-updated"') FROM information_schema.COLUMN_STATISTICS;
DROP TABLE p;
CREATE SCHEMA foo;
CREATE SCHEMA bar;
CREATE TABLE foo.tbl (col1 INT);
ANALYZE TABLE foo.tbl UPDATE HISTOGRAM ON col1 WITH 10 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
RENAME TABLE foo.tbl TO bar.tbl2;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
DROP SCHEMA foo;
DROP SCHEMA bar;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
CREATE TABLE not_encrypted1 (col1 INT) ENCRYPTION='n';
CREATE TABLE not_encrypted2 (col1 INT) ENCRYPTION='N';
CREATE TABLE encrypted1 (col1 INT) ENCRYPTION='y';
CREATE TABLE encrypted2 (col1 INT) ENCRYPTION='Y';
INSERT INTO not_encrypted1 VALUES (1);
INSERT INTO not_encrypted2 VALUES (1);
INSERT INTO encrypted1 VALUES (1);
INSERT INTO encrypted2 VALUES (1);
ANALYZE TABLE not_encrypted1 UPDATE HISTOGRAM ON col1 WITH 2 BUCKETS;
ANALYZE TABLE not_encrypted2 UPDATE HISTOGRAM ON col1 WITH 2 BUCKETS;
ANALYZE TABLE encrypted1 UPDATE HISTOGRAM ON col1 WITH 2 BUCKETS;
ANALYZE TABLE encrypted2 UPDATE HISTOGRAM ON col1 WITH 2 BUCKETS;
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
ALTER TABLE not_encrypted1 ENCRYPTION='y';
ALTER TABLE not_encrypted2 ENCRYPTION='Y';
SELECT schema_name, table_name, column_name FROM information_schema.COLUMN_STATISTICS;
DROP TABLE encrypted1;
DROP TABLE not_encrypted1;
DROP TABLE encrypted2;
DROP TABLE not_encrypted2;
CREATE TABLE t1 (i INT, at INT, k INT) ENGINE=InnoDB;
CREATE TRIGGER ai AFTER INSERT ON t1 FOR EACH ROW SET @a:= NEW.at;
ALTER TABLE t1 ADD PRIMARY KEY (i);
DROP TABLE t1;
CREATE TABLE ftidx_encrypted (a VARCHAR(255), FULLTEXT ftidx(a)) ENGINE=InnoDB ENCRYPTION='N';
ALTER TABLE ftidx_encrypted RENAME TO ftidx_encrypted_renamed, KEY_BLOCK_SIZE=0;
DROP TABLE ftidx_encrypted_renamed;
CREATE TABLE t1 ( ten int(11) DEFAULT NULL, twenty int(11) DEFAULT NULL, forty int(11) DEFAULT NULL, eighty int(11) DEFAULT NULL, KEY idx3 (twenty,ten), KEY idx (ten) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
INSERT INTO t1 VALUES (6,16,36,76), (5,15,35,35), (9,19,39,79), (1,1,1,41), (7,17,17,17), (3,13,33,73), (7,17,37,37), (1,1,1,1), (9,9,9,9), (0,0,20,60), (5,15,35,75), (0,10,10,10), (3,3,3,3), (8,8,8,48), (8,18,38,38), (8,8,28,28), (3,13,33,33), (7,7,7,7), (2,2,22,62), (0,0,0,40), (0,0,0,0), (2,12,12,52), (6,6,6,6), (9,19,19,19), (5,15,15,15), (5,5,5,5), (5,5,25,65), (4,14,14,14), (3,3,23,23), (4,4,4,44), (4,14,34,74), (6,6,26,26), (7,17,17,57), (7,17,17,17), (8,18,18,18), (1,11,11,11), (4,4,4,4), (4,4,24,24), (8,18,18,18), (1,11,11,51), (7,7,27,27), (8,8,8,8), (9,9,29,29), (7,7,7,47), (1,1,1,1), (5,5,25,25), (4,4,24,64), (9,9,29,69), (0,10,10,10), (9,9,9,49);
ANALYZE TABLE t1;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON eighty WITH 40 BUCKETS;
EXPLAIN SELECT a.forty, b.twenty FROM t1 AS a, t1 AS b WHERE a.twenty = b.ten AND b.eighty >= (3 + 20);
DROP TABLE t1;
CREATE TABLE `t1` ( `two` blob, `ten` blob, `sixty` text, `eighty` blob, `tenPercent` text ) DEFAULT CHARSET=utf8mb4;
UPDATE mysql.innodb_table_stats SET n_rows = 197 WHERE database_name = "test" AND table_name = "t1";
ANALYZE TABLE t1 UPDATE HISTOGRAM ON tenPercent WITH 4 BUCKETS;
EXPLAIN SELECT a.two, b.eighty FROM t1 AS a,t1 AS b WHERE a.ten = b.sixty AND b.tenPercent < (9 + (5*10));
DROP TABLE t1;
CREATE TABLE t1 ( tenPercent int(11) DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
INSERT INTO t1 VALUES (6),(5),(9),(1),(7);
UPDATE mysql.innodb_table_stats SET n_rows = 5 WHERE database_name = "test" AND table_name = "t1";
ANALYZE TABLE t1 UPDATE HISTOGRAM ON tenPercent WITH 2 BUCKETS;
EXPLAIN SELECT b.tenPercent FROM t1 AS b WHERE  b.tenPercent NOT BETWEEN 3 AND 0;
EXPLAIN SELECT b.tenPercent FROM t1 AS b WHERE  b.tenPercent BETWEEN 3 AND 0;
DROP TABLE t1;
INSERT INTO k VALUES (1, 'wrhhsy', 'rhgpwcrafs', 'hgpwcrafsb', 'i', NULL, 'gpwcrafsbt', '1000-01-01 00:00:00', '1000-01-01', 'n', 'LUWOS', '1000-01-01', NULL, 'pwcrafsbtn', '2002-08-22 03:35:28');
INSERT INTO a VALUES (NULL, '2008-10-25 07:07:49', 'BXLIC', 'GSDDY', 'w', 'crbhsozfbh', 's', 1, 'the', '2005-04-01', 104529920, '1000-01-01', NULL, 'like', 'CGLFP');
INSERT INTO g VALUES ('o', '2009-05-15 00:00:00', 'PFJGE', 'ASUNU', 'yj', 'if', '1000-01-01', '2001-04-06', 4, -1442512896, 'm', 'his', 1, 'I', '2007-05-11 00:00:00');
ANALYZE TABLE g UPDATE HISTOGRAM ON col_varchar_10_utf8 WITH 250 BUCKETS;
EXPLAIN SELECT alias1 . col_date_key AS field1  FROM   k AS alias1 LEFT OUTER JOIN  a AS alias2 RIGHT OUTER JOIN g AS alias3  ON  alias2 . col_varchar_255_utf8_key =  alias3 . col_varchar_10_utf8 ON  alias1 . col_varchar_10_latin1 =  alias3 . col_varchar_255_latin1 LEFT OUTER JOIN g AS alias4  ON  alias1 . col_varchar_255_utf8_key =  alias4 . col_varchar_255_utf8_key WHERE  alias2 . pk = 3   ORDER BY field1;
DROP TABLE a, k, g;
CREATE TABLE t1 (col1 INT);
INSERT INTO t1 VALUES (1), (2), (3);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 1 BUCKETS;
UPDATE mysql.innodb_table_stats SET n_rows = 3 WHERE database_name = "test" AND table_name = "t1";
EXPLAIN SELECT * FROM t1 WHERE col1 <= 3;
DROP TABLE t1;
INSERT INTO table1 VALUES ('2000-09-05 00:00:00', '2003-11-25 11:17:04', 1, '2006-02-27', '00:20:06', 'l', 1, 'uajnlnsnzyo', '23:18:41', 7, 'a', '2001-02-18', 'jn');
ANALYZE TABLE table1 UPDATE HISTOGRAM ON col_varchar WITH 1 BUCKETS;
ANALYZE TABLE table1 UPDATE HISTOGRAM ON col_datetime WITH 20 BUCKETS;
ANALYZE TABLE table1 UPDATE HISTOGRAM ON col_time WITH 2 BUCKETS;
ANALYZE TABLE table1 UPDATE HISTOGRAM ON col_datetime_key WITH 20 BUCKETS;
ANALYZE TABLE table1 UPDATE HISTOGRAM ON col_date_key WITH 60 BUCKETS;
ANALYZE TABLE table1 UPDATE HISTOGRAM ON col_blob WITH 1023 BUCKETS;
ANALYZE TABLE table1 UPDATE HISTOGRAM ON col_int_key WITH 1023 BUCKETS;
ANALYZE TABLE table1 UPDATE HISTOGRAM ON col_date WITH 2 BUCKETS;
ANALYZE TABLE table1 UPDATE HISTOGRAM ON col_int WITH 1000 BUCKETS;
ANALYZE TABLE table1 UPDATE HISTOGRAM ON col_blob_key WITH 60 BUCKETS;
INSERT INTO table2 VALUES ('10:39:59', 'tymjpskqjjap', 9, '2006-07-17 08:29:28', 'y', '2002-10-02', '00:20:00', 'mjpskqjjapldefot', '2008-11-12', 3, 1, NULL, '2009-03-19 00:00:00');
ANALYZE TABLE table2 UPDATE HISTOGRAM ON col_blob_key WITH 4 BUCKETS;
ANALYZE TABLE table2 UPDATE HISTOGRAM ON col_date WITH 40 BUCKETS;
ANALYZE TABLE table2 UPDATE HISTOGRAM ON col_blob WITH 20 BUCKETS;
ANALYZE TABLE table2 UPDATE HISTOGRAM ON col_int WITH 1 BUCKETS;
ANALYZE TABLE table2 UPDATE HISTOGRAM ON col_datetime_key WITH 20 BUCKETS;
ANALYZE TABLE table2 UPDATE HISTOGRAM ON col_int_key WITH 2 BUCKETS;
ANALYZE TABLE table2 UPDATE HISTOGRAM ON col_time WITH 60 BUCKETS;
ANALYZE TABLE table2 UPDATE HISTOGRAM ON col_varchar WITH 60 BUCKETS;
INSERT INTO table3 VALUES (6, '2003-08-27 00:00:00', 1, '2002-07-10 12:41:35', NULL, 'xgtmzjkhjqplanraxafy', 5, '05:20:53', 'q', 'g', '00:30:27', '2008-11-18', '2008-05-26');
ANALYZE TABLE table3 UPDATE HISTOGRAM ON col_date_key WITH 2 BUCKETS;
ANALYZE TABLE table3 UPDATE HISTOGRAM ON col_time_key WITH 1024 BUCKETS;
ANALYZE TABLE table3 UPDATE HISTOGRAM ON col_date WITH 10 BUCKETS;
ANALYZE TABLE table3 UPDATE HISTOGRAM ON col_datetime_key WITH 1024 BUCKETS;
ANALYZE TABLE table3 UPDATE HISTOGRAM ON col_blob_key WITH 20 BUCKETS;
ANALYZE TABLE table3 UPDATE HISTOGRAM ON col_blob WITH 10 BUCKETS;
ANALYZE TABLE table3 UPDATE HISTOGRAM ON col_time WITH 10 BUCKETS;
ANALYZE TABLE table3 UPDATE HISTOGRAM ON col_int WITH 1000 BUCKETS;
ANALYZE TABLE table3 UPDATE HISTOGRAM ON col_varchar WITH 2 BUCKETS;
ANALYZE TABLE table3 UPDATE HISTOGRAM ON col_varchar_key WITH 4 BUCKETS;
ANALYZE TABLE table3 UPDATE HISTOGRAM ON col_datetime WITH 2 BUCKETS;
INSERT INTO table4 VALUES ('2009-05-17 00:00:00', '00:20:03', '00:20:04', 'u', 6, '2008-02-12', 0, 'orecqsomotqciisj', 'recqsomotqciisjzx', 'e', '2005-03-21', 1, '2009-11-16 02:30:22');
ANALYZE TABLE table4 UPDATE HISTOGRAM ON col_time_key WITH 100 BUCKETS;
ANALYZE TABLE table4 UPDATE HISTOGRAM ON col_date WITH 4 BUCKETS;
ANALYZE TABLE table4 UPDATE HISTOGRAM ON col_datetime_key WITH 4 BUCKETS;
ANALYZE TABLE table4 UPDATE HISTOGRAM ON col_int_key WITH 1024 BUCKETS;
ANALYZE TABLE table4 UPDATE HISTOGRAM ON col_blob WITH 60 BUCKETS;
ANALYZE TABLE table4 UPDATE HISTOGRAM ON col_time WITH 100 BUCKETS;
ANALYZE TABLE table4 UPDATE HISTOGRAM ON col_varchar_key WITH 1024 BUCKETS;
ANALYZE TABLE table4 UPDATE HISTOGRAM ON col_int WITH 4 BUCKETS;
ANALYZE TABLE table4 UPDATE HISTOGRAM ON col_blob_key WITH 80 BUCKETS;
ANALYZE TABLE table4 UPDATE HISTOGRAM ON col_varchar WITH 1024 BUCKETS;
ANALYZE TABLE table4 UPDATE HISTOGRAM ON col_date_key WITH 4 BUCKETS;
CREATE VIEW view_BB AS SELECT * FROM table2;
CREATE VIEW view_A AS SELECT * FROM table1;
WITH cte AS ( SELECT alias2 . col_time AS field1 FROM  view_BB AS alias1  LEFT  JOIN view_A AS alias2 ON  alias1 . col_varchar =  alias2 . col_varchar_key WHERE  alias2 . col_int_key > 2 AND alias2 . col_int_key < ( 5 + 1 ) ORDER BY field1 LIMIT 1000 OFFSET 35) UPDATE table3 AS OUTR1, table4 AS OUTR2, cte AS OUTRcte, cte AS OUTRcte1 SET OUTR1.col_varchar_key = 'hey' WHERE OUTRcte . field1 <> 3;
DROP VIEW view_BB, view_A;
DROP TABLE table1, table2, table3, table4;
CREATE TABLE t1 (col1 INT);
INSERT INTO t1 VALUES (1), (2), (3), (4), (5);
ANALYZE TABLE t1;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 64 BUCKETS;
EXPLAIN SELECT * FROM t1 WHERE col1 BETWEEN 4 AND 2;
EXPLAIN SELECT * FROM t1 WHERE col1 NOT BETWEEN 4 AND 2;
DROP TABLE t1;
CREATE TABLE t1 (col1 BIGINT);
INSERT INTO t1 VALUES (-8454100925504552960), (-3300857051885862912), (0), (0), (0), (0), (0), (2), (2), (2), (6), (16), (56), (86), (142), (191), (7294), (16729), (22243), (23035), (23731), (23807), (39158), (51338), (762515711909167104), (1976517286462226432), (5793317970658721792), (6453095316068499456), (7648519542158655488), (8601593813300936704);
ANALYZE TABLE t1;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 1 BUCKETS;
EXPLAIN SELECT * FROM t1 WHERE col1 <= 0;
DROP TABLE t1;
CREATE TABLE t1 (col1 VARCHAR(255));
INSERT INTO t1 VALUES ("c"), ("f"), ("get"), ("going"), ("look"), ("MOZVN"), ("n"), ("NJAOC"), ("o"), ("on"), ("qnqzklkafp"), ("say"), ("sckaeiqnqz"), ("the"), ("there"), ("VXPRU"), ("w"), ("WBQDQ"), ("your"), ("ZHZXW");
ANALYZE TABLE t1;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 4 BUCKETS;
EXPLAIN SELECT * FROM t1 WHERE col1 BETWEEN 'b' AND 'z';
DROP TABLE t1;
CREATE TABLE t1 (col1 INT);
INSERT INTO t1 VALUES (1), (2), (3);
ANALYZE TABLE t1;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 128 BUCKETS;
EXPLAIN SELECT * FROM t1 WHERE col1 > 3;
DELETE FROM t1;
INSERT INTO t1 VALUES (4), (5), (6);
EXPLAIN SELECT * FROM t1 WHERE col1 > 3;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 128 BUCKETS;
EXPLAIN SELECT * FROM t1 WHERE col1 > 3;
DROP TABLE t1;
SET @@SESSION.sql_mode='';
INSERT INTO t1 (pk, col_int, col_date, col_datetime, col_time, col_varchar) VALUES (10,8,'2006-08-19','2001-07-04 14:30:59','23:33:39','v'),(11,8,'2006-08-13','2006-12-15 06:22:01','11:50:10','j'),(12,9,'2008-05-12','2002-06-19 14:43:00','07:14:03','h'),(13,0,'2003-07-05','2005-08-19 04:46:53','18:13:22','q'),(14,1,'2003-10-21','2007-05-14 06:19:04','00:00:00','g'),(29,1,'2008-12-24','2004-04-02 07:16:01','16:30:10','e');
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_time WITH 4 BUCKETS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_time_key WITH 1024 BUCKETS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_varchar_key WITH 1023 BUCKETS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_datetime_key WITH 2 BUCKETS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_int WITH 40 BUCKETS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_date_key WITH 80 BUCKETS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_datetime WITH 40 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_int WITH 4 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_time_key WITH 1 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_datetime_key WITH 10 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_datetime WITH 100 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_date_key WITH 2 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_varchar WITH 1023 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_int_key WITH 4 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_time WITH 4 BUCKETS;
SELECT  STD( OUTR . pk ) AS x FROM t2 AS OUTR2 LEFT JOIN t2 AS OUTR ON ( OUTR2 . col_datetime_key >= OUTR . col_datetime_key ) WHERE OUTR . col_int IN ( SELECT DISTINCT INNR . col_int_key AS y FROM t1 AS INNR2 LEFT JOIN t1 AS INNR ON ( INNR2 . col_varchar_key > INNR . col_varchar_key ) WHERE INNR . col_varchar_key IS NOT NULL AND NOT OUTR . pk <> 7  ) AND OUTR . col_varchar_key IS NULL HAVING x <= 3 ORDER BY OUTR . pk , OUTR . pk;
DROP TABLE t1, t2;
SET @@SESSION.sql_mode=DEFAULT;
INSERT INTO t1 (pk, col_int, col_date, col_datetime, col_time, col_varchar) VALUES (10,3,'2007-02-04','2006-02-10 18:41:38',NULL,'t'), (11,48,'1900-01-01','2009-02-16 14:58:58',NULL,'d'), (12,8,'2001-03-14','2007-08-14 00:00:00','23:28:51','h'), (13,9,NULL,'1900-01-01 00:00:00',NULL,NULL), (14,2,'2008-10-05',NULL,'20:31:20','f'), (15,0,'2001-11-25','2008-12-03 06:59:23','21:39:14','l'), (16,205,'2003-01-27','2008-10-04 00:00:00','02:10:00','g'), (17,NULL,'2008-08-08','2009-07-07 07:00:21','02:03:54','v'), (18,3,'2006-07-03','2001-04-15 00:00:00','22:37:33',NULL), (19,3,'2002-11-21','2007-07-08 04:01:58','12:17:48','m');
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_datetime_key WITH 1023 BUCKETS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_int WITH 1000 BUCKETS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_time_key WITH 2 BUCKETS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_datetime WITH 1023 BUCKETS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_time WITH 80 BUCKETS;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col_int_key WITH 80 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_datetime_key WITH 100 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_varchar WITH 60 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_date_key WITH 2 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_datetime WITH 4 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_varchar_key WITH 2 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_int_key WITH 4 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_time WITH 10 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_date WITH 2 BUCKETS;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON col_time_key WITH 10 BUCKETS;
CREATE OR REPLACE VIEW view_AA AS SELECT * FROM t1;
CREATE OR REPLACE VIEW view_CC AS SELECT * FROM t2;
SELECT LEFT(col_varchar_key, 1) AS field1 FROM view_AA WHERE ( pk, NULL ) IN (  SELECT col_int AS subfield11, pk AS subfield12 FROM view_CC WHERE ( col_datetime, col_date_key, col_varchar_key ) IN (  SELECT col_time_key AS subfield21, pk AS subfield22, col_time_key AS subfield23 FROM t1 WHERE col_varchar != col_varchar_key    ) ORDER BY subfield12   ) OR col_int IS NOT NULL  ORDER BY field1 LIMIT 10 OFFSET 25;
DROP VIEW view_AA, view_CC;
DROP TABLE t1, t2;
CREATE TABLE t1 (col1 TIME, col2 DATE);
INSERT INTO t1 VALUES ("00:00:00", "2017-01-01");
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1, col2 WITH 8 BUCKETS;
ANALYZE TABLE t1;
EXPLAIN SELECT * FROM t1 WHERE col1 < "";
EXPLAIN SELECT * FROM t1 WHERE col2 < "";
DROP TABLE t1;
CREATE TABLE tbl_int (col1 INT);
INSERT INTO tbl_int VALUES (1), (2), (2), (2), (3), (6), (8), (8), (NULL), (NULL);
ANALYZE TABLE tbl_int;
ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 WITH 2 BUCKETS;
SELECT schema_name, table_name, column_name, JSON_REMOVE(histogram, '$."last-updated"') FROM information_schema.COLUMN_STATISTICS;
EXPLAIN SELECT * FROM tbl_int WHERE col1 > 0;
EXPLAIN SELECT * FROM tbl_int WHERE col1 > 1;
EXPLAIN SELECT * FROM tbl_int WHERE col1 > 2;
EXPLAIN SELECT * FROM tbl_int WHERE col1 > 3;
EXPLAIN SELECT * FROM tbl_int WHERE col1 > 4;
EXPLAIN SELECT * FROM tbl_int WHERE col1 > 5;
EXPLAIN SELECT * FROM tbl_int WHERE col1 > 6;
EXPLAIN SELECT * FROM tbl_int WHERE col1 > 7;
EXPLAIN SELECT * FROM tbl_int WHERE col1 > 8;
EXPLAIN SELECT * FROM tbl_int WHERE col1 > 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 >= 0;
EXPLAIN SELECT * FROM tbl_int WHERE col1 >= 1;
EXPLAIN SELECT * FROM tbl_int WHERE col1 >= 2;
EXPLAIN SELECT * FROM tbl_int WHERE col1 >= 3;
EXPLAIN SELECT * FROM tbl_int WHERE col1 >= 4;
EXPLAIN SELECT * FROM tbl_int WHERE col1 >= 5;
EXPLAIN SELECT * FROM tbl_int WHERE col1 >= 6;
EXPLAIN SELECT * FROM tbl_int WHERE col1 >= 7;
EXPLAIN SELECT * FROM tbl_int WHERE col1 >= 8;
EXPLAIN SELECT * FROM tbl_int WHERE col1 >= 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 = 0;
EXPLAIN SELECT * FROM tbl_int WHERE col1 = 1;
EXPLAIN SELECT * FROM tbl_int WHERE col1 = 2;
EXPLAIN SELECT * FROM tbl_int WHERE col1 = 3;
EXPLAIN SELECT * FROM tbl_int WHERE col1 = 4;
EXPLAIN SELECT * FROM tbl_int WHERE col1 = 5;
EXPLAIN SELECT * FROM tbl_int WHERE col1 = 6;
EXPLAIN SELECT * FROM tbl_int WHERE col1 = 7;
EXPLAIN SELECT * FROM tbl_int WHERE col1 = 8;
EXPLAIN SELECT * FROM tbl_int WHERE col1 = 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <= 0;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <= 1;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <= 2;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <= 3;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <= 4;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <= 5;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <= 6;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <= 7;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <= 8;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <= 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 < 0;
EXPLAIN SELECT * FROM tbl_int WHERE col1 < 1;
EXPLAIN SELECT * FROM tbl_int WHERE col1 < 2;
EXPLAIN SELECT * FROM tbl_int WHERE col1 < 3;
EXPLAIN SELECT * FROM tbl_int WHERE col1 < 4;
EXPLAIN SELECT * FROM tbl_int WHERE col1 < 5;
EXPLAIN SELECT * FROM tbl_int WHERE col1 < 6;
EXPLAIN SELECT * FROM tbl_int WHERE col1 < 7;
EXPLAIN SELECT * FROM tbl_int WHERE col1 < 8;
EXPLAIN SELECT * FROM tbl_int WHERE col1 < 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <> 0;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <> 1;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <> 2;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <> 3;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <> 4;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <> 5;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <> 6;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <> 7;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <> 8;
EXPLAIN SELECT * FROM tbl_int WHERE col1 <> 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 0 AND 0;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 0 AND 1;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 0 AND 2;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 0 AND 3;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 0 AND 4;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 0 AND 5;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 0 AND 6;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 0 AND 7;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 0 AND 8;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 0 AND 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 0 AND 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 1 AND 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 2 AND 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 3 AND 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 4 AND 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 5 AND 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 6 AND 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 7 AND 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 8 AND 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 BETWEEN 9 AND 9;
EXPLAIN SELECT * FROM tbl_int WHERE col1 IN (0,1,2,3,4,5,6,7,8,9);
EXPLAIN SELECT * FROM tbl_int WHERE col1 IN (2,3,4,5,6,7,8,9);
EXPLAIN SELECT * FROM tbl_int WHERE col1 IN (3,4,5,6,7,8,9);
EXPLAIN SELECT * FROM tbl_int WHERE col1 IN (4,5,6,7,8,9);
EXPLAIN SELECT * FROM tbl_int WHERE col1 IN (5,6,7,8,9);
EXPLAIN SELECT * FROM tbl_int WHERE col1 IN (6,7,8,9);
EXPLAIN SELECT * FROM tbl_int WHERE col1 IN (7,8,9);
EXPLAIN SELECT * FROM tbl_int WHERE col1 IN (8,9);
EXPLAIN SELECT * FROM tbl_int WHERE col1 IN (9);
EXPLAIN SELECT * FROM tbl_int WHERE col1 IN (1,3,5,7);
EXPLAIN SELECT * FROM tbl_int WHERE col1 IN (2,4,6,8);
EXPLAIN SELECT * FROM tbl_int WHERE col1 IN (2,5,6);
EXPLAIN SELECT * FROM tbl_int WHERE col1 IN (9,10,11,12,13);
DROP TABLE tbl_int;
CREATE TABLE tbl_float (col double);
INSERT INTO tbl_float VALUES (0.1), (0.2), (0.3), (0.3), (0.4), (0.5), (0.5), (0.8), (NULL), (NULL);
ANALYZE TABLE tbl_float;
ANALYZE TABLE tbl_float UPDATE HISTOGRAM ON col WITH 4 BUCKETS;
SELECT schema_name, table_name, column_name, JSON_REMOVE(histogram, '$."last-updated"') FROM information_schema.COLUMN_STATISTICS;
EXPLAIN SELECT * FROM tbl_float WHERE col > 0.0;
EXPLAIN SELECT * FROM tbl_float WHERE col > 0.1;
EXPLAIN SELECT * FROM tbl_float WHERE col > 0.2;
EXPLAIN SELECT * FROM tbl_float WHERE col > 0.3;
EXPLAIN SELECT * FROM tbl_float WHERE col > 0.4;
EXPLAIN SELECT * FROM tbl_float WHERE col > 0.5;
EXPLAIN SELECT * FROM tbl_float WHERE col > 0.6;
EXPLAIN SELECT * FROM tbl_float WHERE col > 0.7;
EXPLAIN SELECT * FROM tbl_float WHERE col > 0.8;
EXPLAIN SELECT * FROM tbl_float WHERE col > 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col >= 0.0;
EXPLAIN SELECT * FROM tbl_float WHERE col >= 0.1;
EXPLAIN SELECT * FROM tbl_float WHERE col >= 0.2;
EXPLAIN SELECT * FROM tbl_float WHERE col >= 0.3;
EXPLAIN SELECT * FROM tbl_float WHERE col >= 0.4;
EXPLAIN SELECT * FROM tbl_float WHERE col >= 0.5;
EXPLAIN SELECT * FROM tbl_float WHERE col >= 0.6;
EXPLAIN SELECT * FROM tbl_float WHERE col >= 0.7;
EXPLAIN SELECT * FROM tbl_float WHERE col >= 0.8;
EXPLAIN SELECT * FROM tbl_float WHERE col >= 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col = 0.0;
EXPLAIN SELECT * FROM tbl_float WHERE col = 0.1;
EXPLAIN SELECT * FROM tbl_float WHERE col = 0.2;
EXPLAIN SELECT * FROM tbl_float WHERE col = 0.3;
EXPLAIN SELECT * FROM tbl_float WHERE col = 0.4;
EXPLAIN SELECT * FROM tbl_float WHERE col = 0.5;
EXPLAIN SELECT * FROM tbl_float WHERE col = 0.6;
EXPLAIN SELECT * FROM tbl_float WHERE col = 0.7;
EXPLAIN SELECT * FROM tbl_float WHERE col = 0.8;
EXPLAIN SELECT * FROM tbl_float WHERE col = 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col <= 0.0;
EXPLAIN SELECT * FROM tbl_float WHERE col <= 0.1;
EXPLAIN SELECT * FROM tbl_float WHERE col <= 0.2;
EXPLAIN SELECT * FROM tbl_float WHERE col <= 0.3;
EXPLAIN SELECT * FROM tbl_float WHERE col <= 0.4;
EXPLAIN SELECT * FROM tbl_float WHERE col <= 0.5;
EXPLAIN SELECT * FROM tbl_float WHERE col <= 0.6;
EXPLAIN SELECT * FROM tbl_float WHERE col <= 0.7;
EXPLAIN SELECT * FROM tbl_float WHERE col <= 0.8;
EXPLAIN SELECT * FROM tbl_float WHERE col <= 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col < 0.0;
EXPLAIN SELECT * FROM tbl_float WHERE col < 0.1;
EXPLAIN SELECT * FROM tbl_float WHERE col < 0.2;
EXPLAIN SELECT * FROM tbl_float WHERE col < 0.3;
EXPLAIN SELECT * FROM tbl_float WHERE col < 0.4;
EXPLAIN SELECT * FROM tbl_float WHERE col < 0.5;
EXPLAIN SELECT * FROM tbl_float WHERE col < 0.6;
EXPLAIN SELECT * FROM tbl_float WHERE col < 0.7;
EXPLAIN SELECT * FROM tbl_float WHERE col < 0.8;
EXPLAIN SELECT * FROM tbl_float WHERE col < 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col <> 0.0;
EXPLAIN SELECT * FROM tbl_float WHERE col <> 0.1;
EXPLAIN SELECT * FROM tbl_float WHERE col <> 0.2;
EXPLAIN SELECT * FROM tbl_float WHERE col <> 0.3;
EXPLAIN SELECT * FROM tbl_float WHERE col <> 0.4;
EXPLAIN SELECT * FROM tbl_float WHERE col <> 0.5;
EXPLAIN SELECT * FROM tbl_float WHERE col <> 0.6;
EXPLAIN SELECT * FROM tbl_float WHERE col <> 0.7;
EXPLAIN SELECT * FROM tbl_float WHERE col <> 0.8;
EXPLAIN SELECT * FROM tbl_float WHERE col <> 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.0 AND 0.0;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.0 AND 0.1;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.0 AND 0.2;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.0 AND 0.3;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.0 AND 0.4;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.0 AND 0.5;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.0 AND 0.6;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.0 AND 0.7;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.0 AND 0.8;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.0 AND 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.0 AND 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.1 AND 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.2 AND 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.3 AND 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.4 AND 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.5 AND 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.6 AND 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.7 AND 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.8 AND 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col BETWEEN 0.9 AND 0.9;
EXPLAIN SELECT * FROM tbl_float WHERE col IN (0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9);
EXPLAIN SELECT * FROM tbl_float WHERE col IN (0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9);
EXPLAIN SELECT * FROM tbl_float WHERE col IN (0.3,0.4,0.5,0.6,0.7,0.8,0.9);
EXPLAIN SELECT * FROM tbl_float WHERE col IN (0.4,0.5,0.6,0.7,0.8,0.9);
EXPLAIN SELECT * FROM tbl_float WHERE col IN (0.5,0.6,0.7,0.8,0.9);
EXPLAIN SELECT * FROM tbl_float WHERE col IN (0.6,0.7,0.8,0.9);
EXPLAIN SELECT * FROM tbl_float WHERE col IN (0.7,0.8,0.9);
EXPLAIN SELECT * FROM tbl_float WHERE col IN (0.8,0.9);
EXPLAIN SELECT * FROM tbl_float WHERE col IN (0.9);
EXPLAIN SELECT * FROM tbl_float WHERE col IN (0.1,0.3,0.5,0.7);
EXPLAIN SELECT * FROM tbl_float WHERE col IN (0.2,0.4,0.6,0.8);
EXPLAIN SELECT * FROM tbl_float WHERE col IN (0.2,0.5,0.6);
EXPLAIN SELECT * FROM tbl_float WHERE col IN (0.9,1.0,1.1,1.2,1.3);
DROP TABLE tbl_float;
CREATE TABLE t1 (col1 BIGINT, col2 BIGINT UNSIGNED, col3 DOUBLE);
INSERT INTO t1 VALUES (-9223372036854775808, 0, -1.7976931348623157E+308), (9223372036854775806, 18446744073709551614, 1.7976931348623155e+308), (9223372036854775807, 18446744073709551615, 1.7976931348623157e+308);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1, col2, col3 WITH 2 BUCKETS;
ANALYZE TABLE t1;
EXPLAIN SELECT * FROM t1 WHERE col1 < 100;
EXPLAIN SELECT * FROM t1 WHERE col2 < 100;
EXPLAIN SELECT * FROM t1 WHERE col3 < 100;
DROP TABLE t1;
CREATE TABLE t1 (col1 VARCHAR(255));
SET cte_max_recursion_depth = 10000;
INSERT INTO t1 (col1) WITH RECURSIVE cte (n, val) AS ( SELECT 1, CONCAT(MD5(RAND()), MD5(RAND())) UNION ALL SELECT n + 1, CONCAT(MD5(RAND()), MD5(RAND())) FROM cte WHERE n < 10000 ) SELECT val FROM cte;
SET histogram_generation_max_mem_size = 1000000;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1 WITH 2 BUCKETS;
SELECT histogram->>'$."sampling-rate"' < 1.0 AS should_be_true FROM INFORMATION_SCHEMA.COLUMN_STATISTICS;
SET cte_max_recursion_depth = DEFAULT;
SET histogram_generation_max_mem_size = DEFAULT;
DROP TABLE t1;
CREATE TABLE t1 (col1 INT);
INSERT INTO t1 VALUES (10), (20), (30);
ANALYZE TABLE t1 UPDATE HISTOGRAM ON col1;
SELECT JSON_EXTRACT(histogram, '$."number-of-buckets-specified"') FROM INFORMATION_SCHEMA.column_statistics WHERE table_name = "t1" AND column_name = "col1";
DROP TABLE t1;
CREATE TABLE t1 (a INT);
SET lock_wait_timeout= 1;
LOCK INSTANCE FOR BACKUP;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON a WITH 5 BUCKETS;
UNLOCK INSTANCE;
DROP TABLE t1;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
show session status;
