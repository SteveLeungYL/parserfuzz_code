CREATE TABLE t0 ( i0 INTEGER );
INSERT INTO t0 VALUES (0),(1),(2),(3),(4);
CREATE TABLE t1 (f1 INTEGER, f2 INTEGER, f3 INTEGER, KEY(f1), KEY(f1,f2), KEY(f3));
INSERT INTO t1 SELECT i0, i0 + 10*i0, i0 + 10*i0 + 100*i0 FROM t0 AS a0;
INSERT INTO t1 SELECT i0, i0 + 10*i0, i0 + 10*i0 + 100*i0 FROM t0 AS a0;
INSERT INTO t1 VALUES (NULL, 1, 2);
INSERT INTO t1 VALUES (NULL, 1, 3);
SET optimizer_switch="derived_merge=off,derived_condition_pushdown=on";
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, f2 FROM t1) as dt WHERE f1 > 2;
SELECT * FROM (SELECT f1, f2 FROM t1) as dt WHERE f1 > 2;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, f2 FROM t1) as dt WHERE f1 < 3 and f2 > 11;
SELECT * FROM (SELECT f1, f2 FROM t1) as dt WHERE f1 < 3 and f2 > 11;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, f2, f3 FROM t1) as dt WHERE f1 > 2 and f2 < 25 and f3 > 200;
SELECT * FROM (SELECT f1, f2, f3 FROM t1) as dt WHERE f1 > 2 and f2 < 25 and f3 > 200;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, f2, f3 FROM t1) as dt WHERE f1 > 3 and f2 < 50 or f3 > 200;
SELECT * FROM (SELECT f1, f2, f3 FROM t1) as dt WHERE f1 > 3 and f2 < 50 or f3 > 200;
EXPLAIN FORMAT=tree SELECT t1.f2 as f2, dt.f1 as f1, dt.f3 as f3 FROM t1, (SELECT f1, f2, f3 FROM t1) as dt WHERE (dt.f1 = 6) or( t1.f2 = 50 and dt.f3 = 200);
SELECT t1.f2 as f2, dt.f1 as f1, dt.f3 as f3 FROM t1, (SELECT f1, f2, f3 FROM t1) as dt WHERE (dt.f1 = 6) or( t1.f2 = 50 and dt.f3 = 200);
EXPLAIN FORMAT=tree SELECT /*+ JOIN_ORDER(t0, dt) */ * FROM (SELECT f1, f2, f3 FROM t1) as dt, t0 WHERE f1 > 3 and f2 < 50 and i0 > 3;
SELECT /*+ JOIN_ORDER(t0, dt) */ * FROM (SELECT f1, f2, f3 FROM t1) as dt, t0 WHERE f1 > 3 and f2 < 50 and i0 > 3;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3 and f2 < 50 and f3 > 200;
SELECT * FROM (SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3 and f2 < 50 and f3 > 200;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, f2, f3 FROM t1) as dt WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300;
SELECT * FROM (SELECT f1, f2, f3 FROM t1) as dt WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, f2, f3 FROM t1) as dt WHERE (f1 > 2 and f2 < 35) or (f1+f3) > 300 or (f1 < 2);
SELECT * FROM (SELECT f1, f2, f3 FROM t1) as dt WHERE (f1 > 2 and f2 < 35) or (f1+f3) > 300 or (f1 < 2);
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, f2 FROM t1) as dt1, (SELECT f3 FROM t1) as dt2 WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300 and (f3 < 400);
SELECT * FROM (SELECT f1, f2 FROM t1) as dt1, (SELECT f3 FROM t1) as dt2 WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300 and (f3 < 400);
EXPLAIN FORMAT=tree SELECT * FROM (SELECT * FROM (SELECT f1, f2 FROM t1) as dt1, (SELECT f3 FROM t1) as dt2) as dt3 WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 200 and (f3 < 300);
SELECT * FROM (SELECT * FROM (SELECT f1, f2 FROM t1) as dt1, (SELECT f3 FROM t1) as dt2) as dt3 WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 200 and (f3 < 300);
EXPLAIN FORMAT=tree SELECT i, j, k FROM (SELECT f1 as i, f2 as j, f2 as k FROM t1) as dt WHERE i > 1 and i+j > 40;
SELECT i, j, k FROM (SELECT f1 as i, f2 as j, f2 as k FROM t1) as dt WHERE i > 1 and i+j > 40;
EXPLAIN FORMAT=tree SELECT i, j, k FROM (SELECT l as i, m as j, n as k FROM (SELECT f1 as l, f2 as m, f3 as n FROM t1) as dt1 ) as dt2 WHERE i > 1 and i+j > 40;
SELECT i, j, k FROM (SELECT l as i, m as j, n as k FROM (SELECT f1 as l, f2 as m, f3 as n FROM t1) as dt1 ) as dt2 WHERE i > 1 and i+j > 40;
EXPLAIN FORMAT=tree SELECT i, j, l, m, n FROM (SELECT f1 as i, f2 as j FROM t1 ) as dt1 , (SELECT f1 as l, f2 as m, f3 as n FROM t1) as dt2 WHERE i > 1 and i+j > 40 and m < 20 and m+i > 20;
SELECT i, j, l, m, n FROM (SELECT f1 as i, f2 as j FROM t1 ) as dt1 , (SELECT f1 as l, f2 as m, f3 as n FROM t1) as dt2 WHERE i > 1 and i+j > 40 and m < 20 and m+i > 20;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT (i+j) AS g, f1 FROM (SELECT (f1+f2) AS i, (f1-f2) AS j FROM (SELECT f1+10 AS f1, f2+10 AS f2 FROM t1) AS dt0) AS dt1, (SELECT f1, f2 FROM t1) AS dt2) AS dt3 WHERE g > 26 and g+f1 > 31;
SELECT * FROM (SELECT (i+j) AS g, f1 FROM (SELECT (f1+f2) AS i, (f1-f2) AS j FROM (SELECT f1+10 AS f1, f2+10 AS f2 FROM t1) AS dt0) AS dt1, (SELECT f1, f2 FROM t1) AS dt2) AS dt3 WHERE g > 26 and g+f1 > 31;
EXPLAIN FORMAT=tree SELECT l, m  FROM (SELECT (i+3) as l, (j+4) as m FROM (SELECT (f1+f2) as i, (f3+10) as j FROM t1) as dt1) as dt2 WHERE l > 20 and l+m > 10 ;
SELECT l, m  FROM (SELECT (i+3) as l, (j+4) as m FROM (SELECT (f1+f2) as i, (f3+10) as j FROM t1) as dt1) as dt2 WHERE l > 20 and l+m > 10 ;
EXPLAIN FORMAT=tree SELECT i FROM (SELECT f1 FROM t1) as dt(i) WHERE i > 10;
SELECT i FROM (SELECT f1 FROM t1) as dt(i) WHERE i > 10;
EXPLAIN FORMAT=tree SELECT m FROM (SELECT k+2 as l FROM (SELECT f1+f2 as j FROM t1) as dt1(k)) as dt(m) WHERE m > 30;
SELECT m FROM (SELECT k+2 as l FROM (SELECT f1+f2 as j FROM t1) as dt1(k)) as dt(m) WHERE m > 30;
EXPLAIN FORMAT=tree SELECT f1 FROM (SELECT f1, SUM(f2) FROM t1 GROUP BY f1) as dt WHERE f1 > 3;
SELECT f1 FROM (SELECT f1, SUM(f2) FROM t1 GROUP BY f1) as dt WHERE f1 > 3;
EXPLAIN FORMAT=tree SELECT f1 FROM (SELECT f1, f2, SUM(f3) FROM t1 GROUP BY f1,f2) as dt WHERE f1+f2 > 30;
SELECT f1 FROM (SELECT f1, f2, SUM(f3) FROM t1 GROUP BY f1,f2) as dt WHERE f1+f2 > 30;
EXPLAIN FORMAT=tree SELECT f1 FROM (SELECT f1, SUM(f2) FROM t1 GROUP BY f1 WITH ROLLUP) as dt WHERE f1 IS NULL;
SELECT f1 FROM (SELECT f1, SUM(f2) FROM t1 GROUP BY f1 WITH ROLLUP) as dt WHERE f1 IS NULL;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1 as j, SUM(f2) as sum FROM t1 GROUP BY f1 WITH ROLLUP) as dt WHERE j+sum > 50 OR j IS NULL;
SELECT * FROM (SELECT f1 as j, SUM(f2) as sum FROM t1 GROUP BY f1 WITH ROLLUP) as dt WHERE j+sum > 50 OR j IS NULL;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1 as j, SUM(f2) as sum FROM t1 GROUP BY f1 WITH ROLLUP HAVING AVG(f2) > 1) AS dt WHERE j+sum > 50 OR j IS NULL;
SELECT * FROM (SELECT f1 as j, SUM(f2) as sum FROM t1 GROUP BY f1 WITH ROLLUP HAVING AVG(f2) > 1) AS dt WHERE j+sum > 50 OR j IS NULL;
EXPLAIN FORMAT=tree SELECT f1 FROM (SELECT f1, f2 FROM t1 ORDER BY f2) as dt WHERE f1 > 3;
SELECT f1 FROM (SELECT f1, f2 FROM t1 ORDER BY f2) as dt WHERE f1 > 3;
EXPLAIN FORMAT=tree SELECT f1 FROM (SELECT f1, f2 FROM t1 ORDER BY f2 LIMIT 4) as dt WHERE f1 > 0 ;
SELECT f1 FROM (SELECT f1, f2 FROM t1 ORDER BY f2 LIMIT 4) as dt WHERE f1 > 0 ;
EXPLAIN FORMAT=tree SELECT f1 FROM (SELECT f1, f2 FROM t1 LIMIT 4) as dt WHERE f1 > 0;
SELECT f1 FROM (SELECT f1, f2 FROM t1 LIMIT 4) as dt WHERE f1 > 0;
set sql_mode="";
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, SUM(f2) OVER() FROM t1 GROUP BY f1) as dt WHERE f1 > 2;
SELECT * FROM (SELECT f1, SUM(f2) OVER() FROM t1 GROUP BY f1) as dt WHERE f1 > 2;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, SUM(f2) OVER(PARTITION BY f1) FROM t1 GROUP BY f1) as dt WHERE f1 > 2;
SELECT * FROM (SELECT f1, SUM(f2) OVER(PARTITION BY f1) FROM t1 GROUP BY f1) as dt WHERE f1 > 2;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f2) FROM t1 GROUP BY f1) as dt WHERE f2 > 30;
SELECT * FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f2) FROM t1 GROUP BY f1) as dt WHERE f2 > 30;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1) FROM t1 GROUP BY f1) as dt WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
SELECT * FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1) FROM t1 GROUP BY f1) as dt WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2) FROM t1 GROUP BY f1) as dt WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
SELECT * FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2) FROM t1 GROUP BY f1) as dt WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2), AVG(f3) OVER (PARTITION BY f1) FROM t1 GROUP BY f1) as dt WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
SELECT * FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2), AVG(f3) OVER (PARTITION BY f1) FROM t1 GROUP BY f1) as dt WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, SUM(f2) as SUM, AVG(f3) OVER (PARTITION BY SUM(f2)) FROM t1 GROUP BY f1) as dt WHERE SUM > 40;
SELECT * FROM (SELECT f1, SUM(f2) as SUM, AVG(f3) OVER (PARTITION BY SUM(f2)) FROM t1 GROUP BY f1) as dt WHERE SUM > 40;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, SUM(f2) OVER (PARTITION by f1,f2), AVG(f3) OVER (PARTITION BY f2,f1), FIRST_VALUE(f3) OVER (PARTITION by f1) FROM t1) as dt WHERE f1 > 2 ;
SELECT * FROM (SELECT f1, SUM(f2) OVER (PARTITION by f1,f2), AVG(f3) OVER (PARTITION BY f2,f1), FIRST_VALUE(f3) OVER (PARTITION by f1) FROM t1) as dt WHERE f1 > 2 ;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, SUM(f1) OVER (PARTITION by f2), AVG(f2) OVER (PARTITION BY f1) FROM t1) as dt WHERE f1 > 2 ;
SELECT * FROM (SELECT f1, SUM(f1) OVER (PARTITION by f2), AVG(f2) OVER (PARTITION BY f1) FROM t1) as dt WHERE f1 > 2 ;
set sql_mode=default;
SET @p1 = 3;
PREPARE p FROM "SELECT f1 FROM (SELECT f1 FROM t1) as dt WHERE f1 > ?";
EXECUTE p USING @p1;
PREPARE p FROM "EXPLAIN FORMAT=tree SELECT f1 FROM (SELECT f1 FROM t1) as dt WHERE f1 > ?";
EXECUTE p USING @p1;
DROP PREPARE p;
SET @p1 = 10;
PREPARE p FROM "SELECT l, m  FROM (SELECT (i+3) as l, (j+4) as m FROM (SELECT (f1+f2) as i, (f3+?) as j FROM t1) as dt1) as dt2 WHERE l > 20 and l+m > 10 ";
EXECUTE p USING @p1;
PREPARE p FROM "EXPLAIN FORMAT=tree SELECT l, m  FROM (SELECT (i+3) as l, (j+4) as m FROM (SELECT (f1+f2) as i, (f3+?) as j FROM t1) as dt1) as dt2 WHERE l > 20 and l+m > 10 ";
EXECUTE p USING @p1;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT RAND() as a FROM t1) as dt WHERE a > 0.5;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, SUM(f2) FROM t1 GROUP BY f1) as dt WHERE f1 > 3*RAND() AND f1 < 10;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, SUM(f2) OVER(PARTITION BY f1) FROM t1) as dt WHERE f1 > 3*RAND() AND f1 < 10;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1 FROM t1) as dt WHERE f1 > 3*RAND() AND f1<10;
EXPLAIN FORMAT=tree SELECT f1 FROM (SELECT f1 FROM t1 UNION SELECT f2 FROM t1) as dt WHERE f1 > 2;
SELECT f1 FROM (SELECT f1 FROM t1 UNION SELECT f2 FROM t1) as dt WHERE f1 > 2;
EXPLAIN FORMAT=tree SELECT f1 FROM (SELECT (SELECT 1 FROM t1 LIMIT 1) as f1 FROM t1) as dt WHERE f1 = 1;
SELECT f1 FROM (SELECT (SELECT 1 FROM t1 LIMIT 1) as f1 FROM t1) as dt WHERE f1 = 1;
CREATE FUNCTION p() RETURNS INTEGER BEGIN DECLARE retn INTEGER; SELECT count(f1) FROM t1 INTO retn; RETURN retn; END;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, SUM(f2) FROM t1 GROUP BY f1) as dt WHERE p() = 1;
SELECT * FROM (SELECT f1, SUM(f2) FROM t1 GROUP BY f1) as dt WHERE p() = 1;
DROP FUNCTION p;
CREATE FUNCTION p() RETURNS INTEGER DETERMINISTIC BEGIN DECLARE retn INTEGER; SELECT count(f1) FROM t1 INTO retn; RETURN retn; END;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, SUM(f2) FROM t1 GROUP BY f1) as dt WHERE p() = 1;
SELECT * FROM (SELECT f1, SUM(f2) FROM t1 GROUP BY f1) as dt WHERE p() = 1;
DROP FUNCTION p;
CREATE PROCEDURE p() BEGIN DECLARE val INTEGER; SET val = 2; EXPLAIN FORMAT=tree SELECT AVG(f1) FROM (SELECT * FROM t1) as dt WHERE f2 > val; SELECT AVG(f1) FROM (SELECT * FROM t1) as dt WHERE f2 > val; END;
CALL p();
DROP PROCEDURE p;
EXPLAIN FORMAT=tree SELECT * FROM ((WITH qn AS (SELECT 10*f1 as f1 FROM t1), qn2 AS (SELECT 3*f1 AS f2 FROM qn) SELECT * from qn2)) as dt WHERE f2 > 1;
SELECT * FROM ((WITH qn AS (SELECT 10*f1 as f1 FROM t1), qn2 AS (SELECT 3*f1 AS f2 FROM qn) SELECT * from qn2)) as dt WHERE f2 > 1;
EXPLAIN FORMAT=tree SELECT * FROM ((WITH qn AS (SELECT 10*f1 as f1 FROM t1), qn2 AS (SELECT 3*f1 AS f2 FROM qn) SELECT * from qn,qn2)) as dt WHERE f1 < 10 and f2 > 1;
SELECT * FROM ((WITH qn AS (SELECT 10*f1 as f1 FROM t1), qn2 AS (SELECT 3*f1 AS f2 FROM qn) SELECT * from qn,qn2)) as dt WHERE f1 < 10 and f2 > 1;
EXPLAIN FORMAT=tree SELECT * FROM t1 JOIN (SELECT f1, f2 FROM t1) as dt USING (f2) WHERE dt.f1 > 31 and t1.f2  > 40;
SELECT * FROM t1 JOIN (SELECT f1, f2 FROM t1) as dt USING (f2) WHERE dt.f1 > 31 and t1.f2  > 40;
EXPLAIN FORMAT=tree SELECT * FROM t1 LEFT JOIN (SELECT f1, f2 FROM t1) as dt USING (f2) WHERE dt.f1 is null;
SELECT * FROM t1 LEFT JOIN (SELECT f1, f2 FROM t1) as dt USING (f2) WHERE dt.f1 is null;
EXPLAIN FORMAT=tree SELECT * FROM t1 LEFT JOIN (SELECT f1, f2 FROM t1) as dt USING (f2) WHERE dt.f1 > 3;
SELECT * FROM t1 LEFT JOIN (SELECT f1, f2 FROM t1) as dt USING (f2) WHERE dt.f1 > 3;
EXPLAIN FORMAT=tree SELECT * FROM t1 INNER JOIN (SELECT f1, f2 FROM t1) as dt ON dt.f1 > 3;
SELECT * FROM t1 INNER JOIN (SELECT f1, f2 FROM t1) as dt ON dt.f1 > 3;
EXPLAIN FORMAT = tree SELECT * FROM t1 INNER JOIN(SELECT t2.f1, t2.f2 FROM t1 LEFT JOIN t1 AS t2 ON TRUE) AS dt ON dt.f1 > 3;
set optimizer_switch="derived_merge=on";
EXPLAIN FORMAT=tree SELECT * FROM (SELECT * FROM (SELECT f1, SUM(f2) AS sum FROM t1 GROUP BY f1) as dt1 WHERE f1 > 10) dt2 WHERE sum > 10;
SELECT * FROM (SELECT * FROM (SELECT f1, SUM(f2) AS sum FROM t1 GROUP BY f1) as dt1 WHERE f1 > 10) dt2 WHERE sum > 10;
EXPLAIN FORMAT=tree SELECT * FROM (SELECT f1, SUM(f2) AS sum FROM (SELECT f1, f2 FROM t1 WHERE f1 > 10) as dt1 GROUP BY f1) dt2 WHERE sum > 10;
SELECT * FROM (SELECT f1, SUM(f2) AS sum FROM (SELECT f1, f2 FROM t1 WHERE f1 > 10) as dt1 GROUP BY f1) dt2 WHERE sum > 10;
SELECT * FROM (SELECT f1 FROM (SELECT f1 FROM t1) AS dt1 GROUP BY f1) AS dt2 WHERE f1 > 3;
SELECT * FROM (SELECT dt1.f1 FROM (SELECT f1 FROM t1) AS dt1, t1 AS t0 GROUP BY dt1.f1) AS dt2 WHERE dt2.f1 > 3;
EXPLAIN SELECT /*+ no_merge(dt,dt1) */ * FROM ((SELECT f1, f2 FROM t1) as dt, (SELECT f1, f2 FROM t1) as dt1) WHERE FALSE;
SELECT /*+ no_merge(dt,dt1) */ * FROM ((SELECT f1, f2 FROM t1) as dt, (SELECT f1, f2 FROM t1) as dt1) WHERE FALSE;
set optimizer_switch="derived_merge=off";
EXPLAIN FORMAT=tree SELECT /*+ NO_DERIVED_CONDITION_PUSHDOWN(dt2) */ * FROM (SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
SELECT /*+ NO_DERIVED_CONDITION_PUSHDOWN(dt2) */ * FROM (SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
EXPLAIN FORMAT=tree SELECT /*+ NO_DERIVED_CONDITION_PUSHDOWN() */ * FROM (SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
SELECT /*+ NO_DERIVED_CONDITION_PUSHDOWN() */ * FROM (SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
set optimizer_switch="derived_condition_pushdown=off";
EXPLAIN FORMAT=tree SELECT /*+ DERIVED_CONDITION_PUSHDOWN(dt2) */ * FROM (SELECT /*+ NO_DERIVED_CONDITION_PUSHDOWN(dt1) */ * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
SELECT /*+ DERIVED_CONDITION_PUSHDOWN(dt2) */ * FROM (SELECT /*+ NO_DERIVED_CONDITION_PUSHDOWN(dt1) */ * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
set optimizer_switch=default;
SELECT f1 FROM (SELECT DISTINCT * FROM t1 WHERE f2 = 4) AS alias1 WHERE ( alias1 . f1 = 24 AND alias1 . f3 = 101 );
SELECT f1 FROM (SELECT DISTINCT * FROM t1 WHERE f2 = 4) AS alias1 WHERE ( alias1 . f1 BETWEEN 24 AND 30 AND alias1 . f3 BETWEEN 101 and 103);
DROP TABLE t0, t1;
CREATE TABLE t(f0 INTEGER PRIMARY KEY, f1 INTEGER,f2 INTEGER);
SELECT NULL IN(SELECT (f1 between 0 and 1) FROM (SELECT f1 FROM t WHERE  (@b:=NULL) - f2)as dt );
DROP TABLE t;
set optimizer_switch="derived_merge=off";
SELECT 1 FROM information_schema.tables WHERE 123 IN (CONCAT_WS(TABLE_ROWS, ''));
set optimizer_switch="derived_merge=on";
CREATE TABLE t1(g INTEGER);
SELECT w.g FROM t1 INNER JOIN ( SELECT g, ROW_NUMBER() OVER (PARTITION BY g) AS r FROM t1 ) w ON w.g=t1.g AND w.r=1 WHERE w.g IS NULL;
DROP TABLE t1;
CREATE TABLE t(f1 INTEGER);
EXPLAIN SELECT a1, a2 FROM (SELECT MAX(2) AS a1 FROM t) as dt1, (SELECT @a AS a2 FROM t) as dt2 WHERE dt1.a1 <= dt2.a2;
SELECT a1, a2 FROM (SELECT MAX(f1) AS a1 FROM t) as dt1, (SELECT @a AS a2 FROM t) as dt2 WHERE dt1.a1 <= dt2.a2;
DROP TABLE t;
CREATE TABLE t(f1 INTEGER);
CREATE ALGORITHM=temptable VIEW v AS SELECT f1 FROM t;
SELECT f1 FROM (SELECT f1 FROM v) AS dt1 NATURAL JOIN v dt2 WHERE f1 > 5;
DROP TABLE t;
DROP VIEW v;
CREATE TABLE t1(f1 INTEGER, KEY(f1));
CREATE TABLE t2(f1 INTEGER);
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
CREATE ALGORITHM=temptable VIEW v AS SELECT f1 FROM t1;
EXPLAIN format=tree INSERT INTO t2 SELECT * FROM v WHERE f1=2;
INSERT INTO t2 SELECT * FROM v WHERE f1=2;
EXPLAIN format=tree UPDATE t2 SET f1=3 WHERE f1 IN (SELECT f1 FROM v WHERE f1=2);
UPDATE t2 SET f1=3 WHERE f1 IN (SELECT f1 FROM v WHERE f1=2);
EXPLAIN format=tree DELETE FROM t2 WHERE f1 IN (SELECT f1 FROM v WHERE f1=3);
DELETE FROM t2 WHERE f1 IN (SELECT f1 FROM v WHERE f1=3);
DROP TABLE t1;
DROP TABLE t2;
DROp VIEW v;
