DROP TABLE IF EXISTS t1;
DROP PROCEDURE IF EXISTS p1;
CREATE TABLE t1 (get INT);
CREATE PROCEDURE p1() BEGIN DECLARE get INT DEFAULT 1; END;
CREATE TABLE t1 (`get` INT);
INSERT INTO t1 (`get`) values (1);
DROP TABLE t1;
CREATE PROCEDURE p1() BEGIN DECLARE `get` INT DEFAULT 1; SELECT `get`; END;
CALL p1();
DROP PROCEDURE p1;
DROP TABLE IF EXISTS t1;
DROP PROCEDURE IF EXISTS p1;
CREATE TABLE t1 (current INT, diagnostics INT, number INT, returned_sqlstate INT);
INSERT INTO t1 (current, diagnostics, number, returned_sqlstate) values (1,2,3,4);
DROP TABLE t1;
CREATE PROCEDURE p1() BEGIN DECLARE current INT DEFAULT 1; DECLARE diagnostics INT DEFAULT 2; DECLARE number INT DEFAULT 3; DECLARE returned_sqlstate INT DEFAULT 4; SELECT current, diagnostics, number, returned_sqlstate; END;
CALL p1();
DROP PROCEDURE p1;
DROP PROCEDURE IF EXISTS p1;
GET;
GET CURRENT;
GET DIAGNOSTICS;
GET CURRENT DIAGNOSTICS;
GET DIAGNOSTICS @var;
GET DIAGNOSTICS var;
CREATE PROCEDURE p1() BEGIN GET DIAGNOSTICS var; END;
CREATE PROCEDURE p1() BEGIN DECLARE var INT; GET DIAGNOSTICS var; END;
GET DIAGNOSTICS @var =;
GET DIAGNOSTICS @var = INVALID;
GET DIAGNOSTICS @var = MORE;
GET DIAGNOSTICS @var = CLASS_ORIGIN;
GET DIAGNOSTICS @var = INVALID,;
GET DIAGNOSTICS @var1 = NUMBER, @var2;
GET DIAGNOSTICS @var1 = NUMBER, @var2 = INVALID;
GET DIAGNOSTICS @@var1 = NUMBER;
GET DIAGNOSTICS @var1 = NUMBER, @@var2 = NUMBER;
CREATE PROCEDURE p1() BEGIN DECLARE var INT; GET DIAGNOSTICS var = INVALID; END;
CREATE PROCEDURE p1() BEGIN DECLARE var CONDITION FOR SQLSTATE '12345'; GET DIAGNOSTICS var = NUMBER; END;
CREATE PROCEDURE p1() BEGIN DECLARE var INT; GET DIAGNOSTICS var = NUMBER, var1 = ROW_COUNT; END;
GET DIAGNOSTICS @var = NUMBER;
GET DIAGNOSTICS @var = ROW_COUNT;
GET DIAGNOSTICS @var1 = NUMBER, @var2 = ROW_COUNT;
GET DIAGNOSTICS @var1 = ROW_COUNT, @var2 = NUMBER;
CREATE PROCEDURE p1() BEGIN DECLARE var  INT; DECLARE var1 INT; DECLARE var2 INT; GET DIAGNOSTICS var = NUMBER; GET DIAGNOSTICS var = ROW_COUNT; GET DIAGNOSTICS var1 = NUMBER, var2 = ROW_COUNT; GET DIAGNOSTICS var1 = ROW_COUNT, var2 = NUMBER; END;
DROP PROCEDURE p1;
GET DIAGNOSTICS CONDITION;
GET DIAGNOSTICS CONDITION a;
GET DIAGNOSTICS CONDITION 1;
GET DIAGNOSTICS CONDITION 1 @var;
GET DIAGNOSTICS CONDITION 1 var;
CREATE PROCEDURE p1() BEGIN GET DIAGNOSTICS CONDITION 1 var; END;
CREATE PROCEDURE p1() BEGIN DECLARE var INT; GET DIAGNOSTICS CONDITION 1 var; END;
GET DIAGNOSTICS CONDITION 1 @var =;
GET DIAGNOSTICS CONDITION 1 @var = INVALID;
GET DIAGNOSTICS CONDITION 1 @var = NUMBER;
GET DIAGNOSTICS CONDITION 1 @var = INVALID,;
GET DIAGNOSTICS CONDITION 1 @var1 = CLASS_ORIGIN, @var2;
GET DIAGNOSTICS CONDITION 1 @var1 = CLASS_ORIGIN, @var2 = INVALID;
GET DIAGNOSTICS CONDITION 1 @@var1 = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION 1 @var1 = CLASS_ORIGIN, @@var2 = CLASS_ORIGIN;
CREATE PROCEDURE p1() BEGIN DECLARE var INT; GET DIAGNOSTICS CONDITION 1 var = INVALID; END;
CREATE PROCEDURE p1() BEGIN DECLARE var CONDITION FOR SQLSTATE '12345'; GET DIAGNOSTICS CONDITION 1 var = NUMBER; END;
