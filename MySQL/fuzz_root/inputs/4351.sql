SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
CREATE TABLE t1 (a INT, b INT);
CREATE TABLE t2 (a INT, b INT);
CREATE TABLE t3 (a INT);
INSERT INTO t2 VALUES (11, 12), (21, 22);
CREATE TRIGGER t3_ai AFTER INSERT ON t3 FOR EACH ROW INSERT INTO t1 SELECT * FROM t2;
INSERT INTO t3 (a) VALUES (1);
SELECT * FROM t1;
SELECT * FROM t2;
ALTER TABLE t1 ADD COLUMN c INT;
ALTER TABLE t2 ADD COLUMN c INT;
INSERT INTO t2 VALUES (31, 32, 33);
INSERT INTO t3 (a) VALUES (2);
SELECT * FROM t1;
SELECT * FROM t2;
DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;
CREATE TABLE t1 (a INT);
INSERT INTO t1(a) VALUES (1);
CREATE TRIGGER t1_bu BEFORE UPDATE ON t1 FOR EACH ROW BEGIN SET @a = OLD.a; SET @b = NEW.a; SELECT OLD.a INTO @c; SELECT NEW.a INTO @d; SET NEW.a = NEW.a * 2; END;
UPDATE t1 SET a = a * 10;
SELECT @a, @c, @b, @d;
SELECT a FROM t1;
DROP TABLE t1;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2);
CREATE PROCEDURE p1() SELECT * FROM t1;
CALL p1();
ALTER TABLE t1 ADD COLUMN b INT DEFAULT 0;
CALL p1();
ALTER TABLE t1 DROP COLUMN a;
CALL p1();
ALTER TABLE t1 CHANGE COLUMN b b VARCHAR(255) DEFAULT 'n/a';
DELETE FROM t1;
INSERT INTO t1 VALUES (b), ('hello');
CALL p1();
DROP TABLE t1;
DROP PROCEDURE p1;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2);
CREATE PROCEDURE p1() SELECT * FROM t1;
CALL p1();
DROP TABLE t1;
CALL p1();
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2);
CALL p1();
DROP TABLE t1;
DROP PROCEDURE p1;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2);
CREATE PROCEDURE p1() SELECT * FROM t1;
CALL p1();
DROP TABLE t1;
CALL p1();
CREATE TABLE t1 (b VARCHAR(10), c VARCHAR(10));
INSERT INTO t1 VALUES ('a', 'b'), ('c', 'd');
CALL p1();
DROP TABLE t1;
DROP PROCEDURE p1;
CREATE VIEW v1 AS SELECT 1, 2, 3;
CREATE PROCEDURE p1() SELECT * FROM v1;
CALL p1();
ALTER VIEW v1 AS SELECT 1, 2, 3, 4, 5;
CALL p1();
ALTER VIEW v1 AS SELECT 1, 5;
CALL p1();
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
DROP VIEW v1;
CREATE VIEW v1 AS SELECT * FROM t1;
DROP PROCEDURE p1;
CREATE PROCEDURE p1() SELECT * FROM v1;
CALL p1();
ALTER TABLE t1 ADD COLUMN c INT DEFAULT 3;
CALL p1();
DROP TABLE t1;
CREATE TABLE t1(a INT, b INT, c INT);
INSERT INTO t1 VALUES (1, 2, 3);
DROP VIEW v1;
CREATE VIEW v1 AS SELECT b, c FROM t1;
DROP PROCEDURE p1;
CREATE PROCEDURE p1() SELECT * FROM v1;
CALL p1();
ALTER TABLE t1 DROP COLUMN a;
CALL p1();
ALTER TABLE t1 DROP COLUMN b;
CALL p1();
DROP TABLE t1;
CREATE TABLE t1(a INT, b INT, c INT);
INSERT INTO t1 VALUES (1, 2, 3);
DROP VIEW v1;
CREATE VIEW v1 AS SELECT b, c FROM t1;
DROP PROCEDURE p1;
CREATE PROCEDURE p1() SELECT * FROM v1;
CALL p1();
ALTER TABLE t1 CHANGE COLUMN b b VARCHAR(255) DEFAULT 'n/a';
DELETE FROM t1;
INSERT INTO t1(a, c) VALUES (10, 30);
CALL p1();
DROP VIEW v1;
DROP TABLE t1;
DROP PROCEDURE p1;
CREATE VIEW v1 AS SELECT 1, 2, 3;
CREATE PROCEDURE p1() SELECT * FROM v1;
CALL p1();
DROP VIEW v1;
CALL p1();
CREATE VIEW v1 AS SELECT 4, 5, 6;
CALL p1();
DROP VIEW v1;
DROP PROCEDURE p1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE VIEW v1 AS SELECT * FROM t1;
CREATE PROCEDURE p1() SELECT * FROM v1;
CALL p1();
DROP TABLE t1;
CALL p1();
CREATE TABLE t1(a VARCHAR(255), b VARCHAR(255));
INSERT INTO t1 VALUES ('a', 'b'), ('c', 'd');
CALL p1();
DROP VIEW v1;
DROP TABLE t1;
DROP PROCEDURE p1;
CREATE TEMPORARY TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() SELECT * FROM t1;
CALL p1();
ALTER TABLE t1 ADD COLUMN c INT DEFAULT 3;
CALL p1();
ALTER TABLE t1 DROP COLUMN a;
CALL p1();
ALTER TABLE t1 CHANGE COLUMN b b VARCHAR(255) DEFAULT 'n/a';
INSERT INTO t1(c) VALUES (4);
CALL p1();
DROP TEMPORARY TABLE t1;
CREATE TEMPORARY TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CALL p1();
DROP TEMPORARY TABLE t1;
CREATE TEMPORARY TABLE t1(a VARCHAR(255), b VARCHAR(255), c VARCHAR(255));
INSERT INTO t1 VALUES ('aa', 'bb', 'cc');
CALL p1();
DROP TEMPORARY TABLE t1;
DROP PROCEDURE p1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() SELECT a, b FROM t1;
CALL p1();
ALTER TABLE t1 DROP COLUMN b;
CALL p1();
DROP PROCEDURE p1;
DROP TABLE t1;
CREATE TEMPORARY TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() SELECT a, b FROM t1;
CALL p1();
ALTER TABLE t1 DROP COLUMN b;
CALL p1();
DROP PROCEDURE p1;
DROP TEMPORARY TABLE t1;
CREATE VIEW v1 AS SELECT 1 AS a, 2 AS b;
CREATE PROCEDURE p1() SELECT a, b FROM v1;
CALL p1();
ALTER VIEW v1 AS SELECT 1 AS a;
CALL p1();
DROP PROCEDURE p1;
DROP VIEW v1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() SELECT a, b FROM t1;
CALL p1();
DROP TABLE t1;
CALL p1();
DROP PROCEDURE p1;
CREATE VIEW v1 AS SELECT 1 AS a, 2 AS b;
CREATE PROCEDURE p1() SELECT a, b FROM v1;
CALL p1();
DROP VIEW v1;
CALL p1();
DROP PROCEDURE p1;
CREATE TEMPORARY TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() SELECT a, b FROM t1;
CALL p1();
DROP TABLE t1;
CALL p1();
DROP PROCEDURE p1;
CREATE TABLE t1(a INT);
CREATE TABLE t2(a INT);
CREATE PROCEDURE p1() BEGIN DECLARE CONTINUE HANDLER FOR 1146 SELECT 'Table t1 does not exist anymore' as msg; SELECT * FROM t1; INSERT INTO t2 VALUES (1); SELECT GET_LOCK('m1', 10000); SELECT * FROM t1; END;
SELECT GET_LOCK('m1', 0);
CALL p1();
DROP TABLE t1;
SELECT RELEASE_LOCK('m1');
reap;
DROP TABLE t2;
DROP PROCEDURE p1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() SELECT * FROM t1;
CALL p1();
DROP TABLE t1;
CREATE VIEW t1 AS SELECT 1 AS a, 2 AS b;
CALL p1();
DROP PROCEDURE p1;
DROP VIEW t1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() SELECT * FROM t1;
CALL p1();
DROP TABLE t1;
CREATE TEMPORARY TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CALL p1();
DROP PROCEDURE p1;
DROP TEMPORARY TABLE t1;
CREATE VIEW t1 AS SELECT 1 AS a, 2 AS b;
CREATE PROCEDURE p1() SELECT * FROM t1;
CALL p1();
DROP VIEW t1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CALL p1();
DROP PROCEDURE p1;
DROP TABLE t1;
CREATE VIEW t1 AS SELECT 1 AS a, 2 AS b;
CREATE PROCEDURE p1() SELECT * FROM t1;
CALL p1();
DROP VIEW t1;
CREATE TEMPORARY TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CALL p1();
DROP PROCEDURE p1;
DROP TEMPORARY TABLE t1;
CREATE TEMPORARY TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() SELECT * FROM t1;
CALL p1();
DROP TEMPORARY TABLE t1;
CREATE VIEW t1 AS SELECT 1 AS a, 2 AS b;
CALL p1();
DROP PROCEDURE p1;
DROP VIEW t1;
CREATE TEMPORARY TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() SELECT * FROM t1;
CALL p1();
DROP TEMPORARY TABLE t1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CALL p1();
DROP PROCEDURE p1;
DROP TABLE t1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE TRIGGER t1_bu BEFORE UPDATE ON t1 FOR EACH ROW BEGIN SET @x = OLD.a; SET @y = NEW.a; END;
SET @x = 0, @y = 0;
UPDATE t1 SET a = 3, b = 4;
SELECT @x, @y;
ALTER TABLE t1 ADD COLUMN c INT DEFAULT -1;
SET @x = 0, @y = 0;
UPDATE t1 SET a = 5, b = 6;
SELECT @x, @y;
ALTER TABLE t1 CHANGE COLUMN a a VARCHAR(255);
SET @x = 0, @y = 0;
UPDATE t1 SET a = CONCAT('xxx_', a), b = 7;
SELECT @x, @y;
DROP TABLE t1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE TRIGGER t1_bu BEFORE UPDATE ON t1 FOR EACH ROW BEGIN SET @x = OLD.a; SET @y = NEW.b; END;
UPDATE t1 SET a = 3, b = 4;
ALTER TABLE t1 CHANGE COLUMN a a2 INT;
UPDATE t1 SET a2 = 5, b = 6;
ALTER TABLE t1 CHANGE COLUMN a2 a INT;
ALTER TABLE t1 CHANGE COLUMN b b2 INT;
UPDATE t1 SET a = 5, b2 = 6;
DROP TABLE t1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() ALTER TABLE t1 ADD COLUMN c INT DEFAULT 3;
CREATE PROCEDURE p2() BEGIN SELECT a, b FROM t1; CALL p1(); SELECT a, b FROM t1; END;
CALL p2();
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP TABLE t1;
CREATE TEMPORARY TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() ALTER TABLE t1 ADD COLUMN c INT DEFAULT 3;
CREATE PROCEDURE p2() BEGIN SELECT a, b FROM t1; CALL p1(); SELECT a, b FROM t1; END;
CALL p2();
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP TEMPORARY TABLE t1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() BEGIN DROP TABLE t1; CREATE TABLE t1(a INT, b INT, c INT); INSERT INTO t1 VALUES (1, 2, 3); END;
CREATE PROCEDURE p2() BEGIN SELECT a, b FROM t1; CALL p1(); SELECT a, b FROM t1; END;
CALL p2();
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP TABLE t1;
CREATE TEMPORARY TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() BEGIN DROP TEMPORARY TABLE t1; CREATE TEMPORARY TABLE t1(a INT, b INT, c INT); INSERT INTO t1 VALUES (1, 2, 3); END;
CREATE PROCEDURE p2() BEGIN SELECT a, b FROM t1; CALL p1(); SELECT a, b FROM t1; END;
CALL p2();
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP TEMPORARY TABLE t1;
CREATE VIEW v1 AS SELECT 1 AS a, 2 AS b;
CREATE PROCEDURE p1() BEGIN DROP VIEW v1; CREATE VIEW v1 AS SELECT 1 AS a, 2 AS b, 3 AS c; END;
CREATE PROCEDURE p2() BEGIN SELECT a, b FROM v1; CALL p1(); SELECT a, b FROM v1; END;
CALL p2();
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP VIEW v1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() ALTER TABLE t1 DROP COLUMN a;
CREATE PROCEDURE p2() BEGIN SELECT a, b FROM t1; CALL p1(); SELECT a, b FROM t1; END;
CALL p2();
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP TABLE t1;
CREATE TEMPORARY TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() ALTER TABLE t1 DROP COLUMN a;
CREATE PROCEDURE p2() BEGIN SELECT a, b FROM t1; CALL p1(); SELECT a, b FROM t1; END;
CALL p2();
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP TEMPORARY TABLE t1;
CREATE TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() BEGIN DROP TABLE t1; CREATE TABLE t1(b INT, c INT); INSERT INTO t1 VALUES (2, 3); END;
CREATE PROCEDURE p2() BEGIN SELECT a, b FROM t1; CALL p1(); SELECT a, b FROM t1; END;
CALL p2();
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP TABLE t1;
CREATE TEMPORARY TABLE t1(a INT, b INT);
INSERT INTO t1 VALUES (1, 2);
CREATE PROCEDURE p1() BEGIN DROP TEMPORARY TABLE t1; CREATE TEMPORARY TABLE t1(b INT, c INT); INSERT INTO t1 VALUES (2, 3); END;
CREATE PROCEDURE p2() BEGIN SELECT a, b FROM t1; CALL p1(); SELECT a, b FROM t1; END;
CALL p2();
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP TEMPORARY TABLE t1;
CREATE VIEW v1 AS SELECT 1 AS a, 2 AS b;
CREATE PROCEDURE p1() BEGIN DROP VIEW v1; CREATE VIEW v1 AS SELECT 2 AS b, 3 AS c; END;
CREATE PROCEDURE p2() BEGIN SELECT a, b FROM v1; CALL p1(); SELECT a, b FROM v1; END;
CALL p2();
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP VIEW v1;
CREATE PROCEDURE p1() BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SELECT 'SQLEXCEPTION caught' AS msg; CREATE TABLE t1(a INT, b INT); INSERT INTO t1 VALUES (1, 2); END; SELECT * FROM t1; SELECT * FROM t1; DROP TABLE t1; END;
CREATE PROCEDURE p2() BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SELECT 'SQLEXCEPTION caught' AS msg; CREATE TEMPORARY TABLE t1(a INT, b INT); INSERT INTO t1 VALUES (1, 2); END; SELECT * FROM t1; SELECT * FROM t1; DROP TEMPORARY TABLE t1; END;
CREATE PROCEDURE p3() BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SELECT 'SQLEXCEPTION caught' AS msg; CREATE VIEW v1 AS SELECT 1 AS a, 2 AS b; END; SELECT * FROM v1; SELECT * FROM v1; DROP VIEW v1; END;
CALL p1();
CALL p2();
CALL p3();
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP PROCEDURE p3;
CREATE PROCEDURE p1() BEGIN IF(SELECT * FROM t1)THEN SELECT 1; ELSE SELECT 2; END IF; END;
CREATE PROCEDURE p2() BEGIN DECLARE v INT DEFAULT 1; IF v * (SELECT * FROM t1) THEN SELECT 1; ELSE SELECT 2; END IF; END;
CREATE FUNCTION f1() RETURNS INT BEGIN IF (SELECT * FROM t1) THEN RETURN 1; ELSE RETURN 2; END IF; RETURN 3; END;
CREATE FUNCTION f2() RETURNS INT BEGIN DECLARE v INT DEFAULT 1; IF v * (SELECT * FROM t1) THEN RETURN 1; ELSE RETURN 2; END IF; RETURN 3; END;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (1);
CALL p1();
CALL p2();
SELECT f1();
SELECT f2();
UPDATE t1 SET a = 0;
CALL p1();
CALL p2();
SELECT f1();
SELECT f2();
ALTER TABLE t1 ADD COLUMN b INT DEFAULT 1;
CALL p1();
CALL p2();
SELECT f1();
SELECT f2();
ALTER TABLE t1 DROP COLUMN a;
CALL p1();
CALL p2();
SELECT f1();
SELECT f2();
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP FUNCTION f1;
DROP FUNCTION f2;
DROP TABLE t1;
CREATE PROCEDURE p1(x INT) BEGIN WHILE(SELECT * FROM t1)DO SELECT x; UPDATE t1 SET a = x; SET x = x - 1; END WHILE; END;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (0);
CALL p1(3);
UPDATE t1 SET a = 1;
CALL p1(3);
UPDATE t1 SET a = 1;
ALTER TABLE t1 ADD COLUMN b INT DEFAULT 1;
CALL p1(3);
ALTER TABLE t1 DROP COLUMN a;
CALL p1(3);
DROP PROCEDURE p1;
DROP TABLE t1;
CREATE PROCEDURE p1(x INT) BEGIN REPEAT SELECT x; UPDATE t1 SET a = x; SET x = x - 1; UNTIL(NOT (SELECT * FROM t1))END REPEAT; END;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (0);
CALL p1(3);
UPDATE t1 SET a = 1;
CALL p1(3);
UPDATE t1 SET a = 1;
ALTER TABLE t1 ADD COLUMN b INT DEFAULT 1;
CALL p1(3);
ALTER TABLE t1 DROP COLUMN a;
CALL p1(3);
DROP PROCEDURE p1;
DROP TABLE t1;
CREATE PROCEDURE p1() BEGIN CASE WHEN (SELECT * FROM t1) = 1 THEN SELECT 'a1'; WHEN (SELECT * FROM t1) = 2 THEN SELECT 'a2'; WHEN (SELECT * FROM t1) = 3 THEN SELECT 'a3'; ELSE SELECT 'a4'; END CASE; END;
CREATE PROCEDURE p2() BEGIN CASE (SELECT * FROM t1) WHEN 1 THEN SELECT 'a1'; WHEN 2 THEN SELECT 'a2'; WHEN 3 THEN SELECT 'a3'; ELSE SELECT 'a4'; END CASE; END;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (0);
CALL p1();
CALL p2();
UPDATE t1 SET a = 3;
CALL p1();
CALL p2();
ALTER TABLE t1 ADD COLUMN b INT DEFAULT 2;
CALL p1();
CALL p2();
ALTER TABLE t1 DROP COLUMN a;
CALL p1();
CALL p2();
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP TABLE t1;
CREATE TABLE t1(a INT);
CREATE TABLE t2(a INT);
INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (1);
CREATE FUNCTION f1() RETURNS INT BEGIN SET @x = @x + 1; RETURN (SELECT a FROM t1); END;
CREATE PROCEDURE p1() BEGIN CASE f1() WHEN 1 THEN SELECT 'a1'; WHEN 2 THEN SELECT 'a2'; WHEN (SELECT * FROM t2) THEN SELECT 'subselect'; ELSE SELECT 'else'; END CASE; END;
SET @x = 0;
CALL p1();
SELECT @x;
UPDATE t1 SET a = 3;
ALTER TABLE t2 ADD COLUMN b INT DEFAULT 3;
SET @x = 0;
CALL p1();
SELECT @x;
ALTER TABLE t2 DROP COLUMN a;
SET @x = 0;
CALL p1();
SELECT @x;
DROP PROCEDURE p1;
DROP FUNCTION f1;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (1);
CREATE PROCEDURE p1() BEGIN DECLARE v INT DEFAULT (SELECT * FROM t1); SELECT v; END;
CALL p1();
ALTER TABLE t1 ADD COLUMN b INT DEFAULT 2;
CALL p1();
ALTER TABLE t1 DROP COLUMN a;
CALL p1();
DROP PROCEDURE p1;
DROP TABLE t1;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (1);
CREATE TABLE t2(a INT);
INSERT INTO t2 VALUES (1);
CREATE PROCEDURE p1() BEGIN DECLARE x INT; SET x = (SELECT * FROM t1); SELECT x; END;
CREATE PROCEDURE p2() BEGIN SET @x = NULL; SET @x = (SELECT * FROM t1); SELECT @x; END;
CREATE TRIGGER t2_bu BEFORE UPDATE ON t2 FOR EACH ROW BEGIN SET NEW.a = (SELECT * FROM t1) * 2; END;
CALL p1();
CALL p2();
UPDATE t2 SET a = 10;
ALTER TABLE t1 ADD COLUMN b INT DEFAULT 2;
CALL p1();
CALL p2();
UPDATE t2 SET a = 20;
ALTER TABLE t1 DROP COLUMN a;
CALL p1();
CALL p2();
UPDATE t2 SET a = 30;
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (1);
CREATE PROCEDURE p1() BEGIN DECLARE v INT; DECLARE c CURSOR FOR SELECT * FROM t1; ALTER TABLE t1 ADD COLUMN b INT DEFAULT 2; ALTER TABLE t1 DROP COLUMN a; OPEN c; FETCH c INTO v; CLOSE c; SELECT v; END;
CALL p1();
DROP TABLE t1;
DROP PROCEDURE p1;
CREATE TEMPORARY TABLE t1(a INT);
INSERT INTO t1 VALUES (1);
CREATE PROCEDURE p1() BEGIN DECLARE v INT; DECLARE c CURSOR FOR SELECT * FROM t1; ALTER TABLE t1 ADD COLUMN b INT DEFAULT 2; ALTER TABLE t1 DROP COLUMN a; OPEN c; FETCH c INTO v; CLOSE c; SELECT v; END;
CALL p1();
DROP TEMPORARY TABLE t1;
DROP PROCEDURE p1;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (1);
CREATE PROCEDURE p1() BEGIN DECLARE v INT; DECLARE c CURSOR FOR SELECT * FROM t1; OPEN c; ALTER TABLE t1 ADD COLUMN b INT DEFAULT 2; ALTER TABLE t1 DROP COLUMN a; FETCH c INTO v; CLOSE c; SELECT v; END;
CALL p1();
DROP TABLE t1;
DROP PROCEDURE p1;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (1);
CREATE PROCEDURE p1() BEGIN DECLARE f1 INT; DECLARE f2 INT; DECLARE f3 INT; DECLARE x INT DEFAULT 1; DECLARE y INT DEFAULT 2; DECLARE c CURSOR FOR SELECT x, y, t1.a FROM t1; ALTER TABLE t1 ADD COLUMN b INT; BEGIN DECLARE x INT DEFAULT 10; DECLARE y INT DEFAULT 20; OPEN c; FETCH c INTO f1, f2, f3; SELECT f1, f2, f3; CLOSE c; END; END;
CALL p1();
DROP TABLE t1;
DROP PROCEDURE p1;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2);
CREATE VIEW v1 AS SELECT * FROM t1;
CREATE PROCEDURE p1() SELECT * FROM v1;
CALL p1();
ALTER TABLE t1 ADD COLUMN (b INT);
ALTER VIEW v1 AS SELECT * FROM t1;
CALL p1();
DROP VIEW v1;
DROP TABLE t1;
DROP PROCEDURE p1;
CREATE TEMPORARY TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2);
CREATE PROCEDURE p1() SELECT * FROM t1;
CALL p1();
ALTER TABLE t1 ADD COLUMN (b INT);
CALL p1();
ALTER TABLE t1 DROP COLUMN a;
CALL p1();
DROP PROCEDURE p1;
DROP TABLE t1;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2);
CREATE FUNCTION f1() RETURNS INT BEGIN CREATE TEMPORARY TABLE t1_result_set AS SELECT * FROM t1; RETURN 0; END;
SELECT f1();
SELECT * FROM t1_result_set;
DROP TABLE t1_result_set;
ALTER TABLE t1 ADD COLUMN (b INT);
SELECT f1();
SELECT * FROM t1_result_set;
DROP TABLE t1_result_set;
ALTER TABLE t1 DROP COLUMN a;
SELECT f1();
SELECT * FROM t1_result_set;
DROP TABLE t1_result_set;
DROP TABLE t1;
DROP FUNCTION f1;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2);
CREATE FUNCTION f1() RETURNS INT BEGIN CREATE TEMPORARY TABLE t1_result_set AS SELECT * FROM t1; RETURN 0; END;
SELECT f1();
SELECT * FROM t1_result_set;
DROP TABLE t1_result_set;
DROP TABLE t1;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2);
SELECT f1();
SELECT * FROM t1_result_set;
DROP TABLE t1_result_set;
DROP FUNCTION f1;
DROP TABLE t1;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2);
CREATE VIEW v1 AS SELECT * FROM t1;
CREATE FUNCTION f1() RETURNS INT BEGIN CREATE TEMPORARY TABLE t1_result_set AS SELECT * FROM v1; RETURN 0; END;
SELECT f1();
SELECT * FROM t1_result_set;
DROP TABLE t1_result_set;
ALTER TABLE t1 ADD COLUMN (b INT);
ALTER VIEW v1 AS SELECT * FROM t1;
SELECT f1();
SELECT * FROM t1_result_set;
DROP TABLE t1_result_set;
DROP TABLE t1;
DROP VIEW v1;
DROP FUNCTION f1;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2);
CREATE FUNCTION f1() RETURNS INT BEGIN CREATE TEMPORARY TABLE t1_result_set AS SELECT * FROM t1; RETURN 0; END;
CREATE PROCEDURE p1() SELECT * FROM t1;
CALL p1();
SELECT f1();
SELECT * FROM t1_result_set;
DROP TABLE t1_result_set;
DROP TABLE t1;
CREATE TEMPORARY TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2);
CALL p1;
SELECT f1();
SELECT * FROM t1_result_set;
DROP TABLE t1_result_set;
DROP TABLE t1;
CREATE TABLE t2 (a INT);
INSERT INTO t2 VALUES (1), (2);
CREATE VIEW t1 AS SELECT * FROM t2;
CALL p1;
SELECT f1();
SELECT * FROM t1_result_set;
DROP TABLE t1_result_set;
DROP TABLE t2;
DROP VIEW t1;
DROP FUNCTION f1;
DROP PROCEDURE p1;
CREATE TABLE t1 (a INT);
CREATE TRIGGER trg1 BEFORE INSERT ON t1 FOR EACH ROW SET new.a = new.a + 100;
INSERT INTO t1 VALUES (1), (2);
SELECT * FROM t1;
ALTER TABLE t1 ADD COLUMN (b INT);
INSERT INTO t1 VALUES (3, 4);
SELECT * FROM t1;
DROP TRIGGER trg1;
DROP TABLE t1;
CREATE TABLE t1 (a INT, b INT);
CREATE TRIGGER trg1 BEFORE INSERT ON t1 FOR EACH ROW SET new.a = new.a + 100;
INSERT INTO t1 VALUES (1, 2), (3, 4);
SELECT * FROM t1;
ALTER TABLE t1 DROP COLUMN b;
INSERT INTO t1 VALUES (5);
SELECT * FROM t1;
DROP TRIGGER trg1;
DROP TABLE t1;
CREATE TABLE t1 (a INT, b INT);
CREATE TRIGGER trg1 BEFORE INSERT ON t1 FOR EACH ROW SET new.a = new.a + 100;
INSERT INTO t1 VALUES (1, 2), (3, 4);
SELECT * FROM t1;
ALTER TABLE t1 DROP COLUMN a;
INSERT INTO t1 VALUES (5);
DROP TRIGGER trg1;
DROP TABLE t1;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (1);
CREATE TABLE t2(a INT);
INSERT INTO t2 VALUES (1);
CREATE VIEW v1 AS SELECT a FROM t1;
CREATE TRIGGER t2_bu BEFORE UPDATE ON t2 FOR EACH ROW BEGIN INSERT INTO v1 VALUES (NEW.a); SET @x = (SELECT CHARSET(a) FROM v1 LIMIT 1); END;
SET @x = NULL;
UPDATE t2 SET a = 10;
SELECT * FROM v1;
SELECT @x;
ALTER TABLE t1 CHANGE COLUMN a a CHAR(2);
SET @x = NULL;
UPDATE t2 SET a = 20;
SELECT * FROM v1;
SELECT @x;
DROP TABLE t1;
DROP TABLE t2;
DROP VIEW v1;
SET sql_mode = default;
