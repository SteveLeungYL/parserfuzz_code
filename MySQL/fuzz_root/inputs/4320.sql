create table mysql.db_copy as select * from mysql.db;
delete from mysql.db where host='%';
flush privileges;
set @orig_sql_mode_session= @@SESSION.sql_mode;
set @orig_sql_mode_global= @@GLOBAL.sql_mode;
set @orig_partial_revokes = @@global.partial_revokes;
SET GLOBAL partial_revokes= OFF;
use test;
create user user1@localhost;
create user ''@'%';
create user user1;
delete from mysql.db;
insert into mysql.db select * from mysql.db_copy;
flush privileges;
drop table if exists t1;
drop database if exists db1_secret;
create database db1_secret;
create procedure db1_secret.dummy() begin end;
drop procedure db1_secret.dummy;
use db1_secret;
create table t1 ( u varchar(64), i int );
insert into t1 values('test', 0);
create procedure stamp(i int) insert into db1_secret.t1 values (user(), i);
show procedure status like 'stamp';
create function db() returns varchar(64) begin declare v varchar(64); select u into v from t1 limit 1; return v; end;
show function status like 'db';
call stamp(1);
select * from t1;
select db();
grant execute on procedure db1_secret.stamp to user1@'%';
grant execute on function db1_secret.db to user1@'%';
grant execute on procedure db1_secret.stamp to ''@'%';
grant execute on function db1_secret.db to ''@'%';
call db1_secret.stamp(2);
select db1_secret.db();
select * from db1_secret.t1;
create procedure db1_secret.dummy() begin end;
drop procedure db1_secret.dummy;
drop procedure db1_secret.stamp;
drop function db1_secret.db;
call db1_secret.stamp(3);
select db1_secret.db();
select * from db1_secret.t1;
create procedure db1_secret.dummy() begin end;
drop procedure db1_secret.dummy;
drop procedure db1_secret.stamp;
drop function db1_secret.db;
select * from t1;
alter procedure stamp sql security invoker;
show procedure status like 'stamp';
alter function db sql security invoker;
show function status like 'db';
call stamp(4);
select * from t1;
select db();
call db1_secret.stamp(5);
select db1_secret.db();
call db1_secret.stamp(6);
select db1_secret.db();
drop database if exists db2;
create database db2;
use db2;
create table t2 (s1 int);
insert into t2 values (0);
create user user2@localhost;
grant usage on db2.* to user1@localhost;
grant select on db2.* to user1@localhost;
grant usage on db2.* to user2@localhost;
grant select,insert,update,delete,create routine on db2.* to user2@localhost;
grant create routine on db2.* to user1@localhost;
flush privileges;
use db2;
create procedure p () insert into t2 values (1);
call p();
use db2;
call p();
select * from t2;
create procedure q () insert into t2 values (2);
call q();
select * from t2;
grant usage on procedure db2.q to user2@localhost with grant option;
grant execute on procedure db2.q to user1@localhost;
use db2;
call q();
select * from t2;
alter procedure p modifies sql data;
drop procedure p;
alter procedure q modifies sql data;
drop procedure q;
use db2;
alter procedure q modifies sql data;
drop procedure q;
use test;
select routine_type, routine_schema, routine_name from information_schema.routines where routine_schema like 'db%' order by routine_type, routine_name;
drop database db1_secret;
drop database db2;
select routine_type, routine_schema, routine_name from information_schema.routines where routine_schema like 'db%';
delete from mysql.user where user='user1' or user='user2';
delete from mysql.user where user='' and host='%';
delete from mysql.procs_priv where user='user1' or user='user2';
delete from mysql.procs_priv where user='' and host='%';
delete from mysql.db where user='user1' or user='user2';
flush privileges;
create user usera@localhost;
create user userb@localhost;
create user userc@localhost;
create database sptest;
create table t1 ( u varchar(64), i int );
create procedure sptest.p1(i int) insert into test.t1 values (user(), i);
grant insert on t1 to usera@localhost;
grant execute on procedure sptest.p1 to usera@localhost;
show grants for usera@localhost;
grant execute on procedure sptest.p1 to userc@localhost with grant option;
show grants for userc@localhost;
call sptest.p1(1);
grant execute on procedure sptest.p1 to userb@localhost;
drop procedure sptest.p1;
call sptest.p1(2);
grant execute on procedure sptest.p1 to userb@localhost;
drop procedure sptest.p1;
call sptest.p1(3);
grant execute on procedure sptest.p1 to userb@localhost;
drop procedure sptest.p1;
call sptest.p1(4);
grant execute on procedure sptest.p1 to userb@localhost;
drop procedure sptest.p1;
select * from t1;
grant all privileges on procedure sptest.p1 to userc@localhost;
show grants for userc@localhost;
show grants for userb@localhost;
revoke all privileges on procedure sptest.p1 from userb@localhost;
show grants for userb@localhost;
use test;
drop database sptest;
delete from mysql.user where user='usera' or user='userb' or user='userc';
delete from mysql.procs_priv where user='usera' or user='userb' or user='userc';
delete from mysql.tables_priv where user='usera';
flush privileges;
drop table t1;
create user user1@localhost;
drop function if exists bug_9503;
create database mysqltest;
use mysqltest;
create table t1 (s1 int);
grant select on t1 to user1@localhost;
create function bug_9503 () returns int sql security invoker begin declare v int; select min(s1) into v from t1; return v; end;
use mysqltest;
select bug_9503();
grant execute on function bug_9503 to user1@localhost;
do 1;
use test;
REVOKE ALL PRIVILEGES, GRANT OPTION FROM user1@localhost;
drop function bug_9503;
use test;
drop database mysqltest;
use test;
select current_user();
select user();
create procedure bug7291_0 () sql security invoker select current_user(), user();
create procedure bug7291_1 () sql security definer call bug7291_0();
create procedure bug7291_2 () sql security invoker call bug7291_0();
grant execute on procedure bug7291_0 to user1@localhost;
grant execute on procedure bug7291_1 to user1@localhost;
grant execute on procedure bug7291_2 to user1@localhost;
call bug7291_2();
call bug7291_1();
drop procedure bug7291_1;
drop procedure bug7291_2;
drop procedure bug7291_0;
REVOKE ALL PRIVILEGES, GRANT OPTION FROM user1@localhost;
drop user user1@localhost;
drop database if exists mysqltest_1;
create database mysqltest_1;
create procedure mysqltest_1.p1() begin select 1 from dual; end;
create user mysqltest_1@localhost;
call mysqltest_1.p1();
call mysqltest_1.p1();
drop procedure mysqltest_1.p1;
drop database mysqltest_1;
revoke usage on *.* from mysqltest_1@localhost;
drop user mysqltest_1@localhost;
drop function if exists bug12812;
create function bug12812() returns char(2) begin return 'ok'; end; create user user_bug12812@localhost IDENTIFIED BY 'ABC';
SELECT test.bug12812();
CREATE VIEW v1 AS SELECT test.bug12812();
DROP USER user_bug12812@localhost;
drop function bug12812;
create database db_bug14834;
create user user1_bug14834@localhost identified by '';
grant all on `db\_bug14834`.* to user1_bug14834@localhost;
create user user2_bug14834@localhost identified by '';
grant all on `db\_bug14834`.* to user2_bug14834@localhost;
create user user3_bug14834@localhost identified by '';
grant all on `db__ug14834`.* to user3_bug14834@localhost;
create procedure p_bug14834() select user(), current_user();
call p_bug14834();
call p_bug14834();
call p_bug14834();
drop user user1_bug14834@localhost;
drop user user2_bug14834@localhost;
drop user user3_bug14834@localhost;
drop database db_bug14834;
create database db_bug14533;
use db_bug14533;
create table t1 (id int);
create user user_bug14533@localhost identified by '';
create procedure bug14533_1() sql security definer desc db_bug14533.t1;
create procedure bug14533_2() sql security definer select * from db_bug14533.t1;
grant execute on procedure db_bug14533.bug14533_1 to user_bug14533@localhost;
grant execute on procedure db_bug14533.bug14533_2 to user_bug14533@localhost;
call db_bug14533.bug14533_1();
call db_bug14533.bug14533_2();
desc db_bug14533.t1;
select * from db_bug14533.t1;
drop user user_bug14533@localhost;
drop database db_bug14533;
DROP DATABASE IF EXISTS mysqltest;
CREATE DATABASE mysqltest;
CREATE USER mysqltest_1@localhost;
GRANT ALL PRIVILEGES ON mysqltest.* TO mysqltest_1@localhost;
CREATE USER mysqltest_2@localhost;
GRANT SUPER ON *.* TO mysqltest_2@localhost;
GRANT ALL PRIVILEGES ON mysqltest.* TO mysqltest_2@localhost;
USE mysqltest;
CREATE PROCEDURE wl2897_p1() SELECT 1;
CREATE FUNCTION wl2897_f1() RETURNS INT RETURN 1;
USE mysqltest;
CREATE DEFINER=root@localhost PROCEDURE wl2897_p2() SELECT 2;
CREATE DEFINER=root@localhost FUNCTION wl2897_f2() RETURNS INT RETURN 2;
use mysqltest;
CREATE DEFINER='a @ b @ c'@localhost PROCEDURE wl2897_p3() SELECT 3;
CREATE DEFINER='a @ b @ c'@localhost FUNCTION wl2897_f3() RETURNS INT RETURN 3;
USE mysqltest;
SHOW CREATE PROCEDURE wl2897_p1;
SHOW CREATE PROCEDURE wl2897_p3;
SHOW CREATE FUNCTION wl2897_f1;
SHOW CREATE FUNCTION wl2897_f3;
DROP USER mysqltest_1@localhost;
DROP USER mysqltest_2@localhost;
DROP DATABASE mysqltest;
DROP DATABASE IF EXISTS mysqltest;
CREATE DATABASE mysqltest;
CREATE USER mysqltest_1@localhost;
GRANT ALL PRIVILEGES ON mysqltest.* TO mysqltest_1@localhost;
CREATE USER mysqltest_2@localhost;
GRANT ALL PRIVILEGES ON mysqltest.* TO mysqltest_2@localhost;
USE mysqltest;
CREATE PROCEDURE bug13198_p1() SELECT 1;
CREATE FUNCTION bug13198_f1() RETURNS INT RETURN 1;
CALL bug13198_p1();
SELECT bug13198_f1();
USE mysqltest;
CALL bug13198_p1();
SELECT bug13198_f1();
DROP USER mysqltest_1@localhost;
USE mysqltest;
CALL bug13198_p1();
SELECT bug13198_f1();
DROP USER mysqltest_2@localhost;
DROP DATABASE mysqltest;
CREATE USER user19857@localhost IDENTIFIED BY 'meow';
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE ROUTINE, ALTER ROUTINE ON test.* TO user19857@localhost;
SELECT Host,User FROM mysql.user WHERE User='user19857';
USE test;
CREATE PROCEDURE sp19857() DETERMINISTIC BEGIN DECLARE a INT; SET a=1; SELECT a; END ;
SHOW CREATE PROCEDURE test.sp19857;
DROP PROCEDURE IF EXISTS test.sp19857;
SELECT Host,User FROM mysql.user WHERE User='user19857';
DROP USER user19857@localhost;
use test;
DROP TABLE IF EXISTS t1;
DROP VIEW IF EXISTS v1;
DROP FUNCTION IF EXISTS f_suid;
DROP PROCEDURE IF EXISTS p_suid;
DROP FUNCTION IF EXISTS f_evil;
DELETE FROM mysql.user WHERE user LIKE 'mysqltest\_%';
DELETE FROM mysql.db WHERE user LIKE 'mysqltest\_%';
DELETE FROM mysql.tables_priv WHERE user LIKE 'mysqltest\_%';
DELETE FROM mysql.columns_priv WHERE user LIKE 'mysqltest\_%';
FLUSH PRIVILEGES;
CREATE TABLE t1 (i INT);
CREATE FUNCTION f_suid(i INT) RETURNS INT SQL SECURITY DEFINER RETURN 0;
CREATE PROCEDURE p_suid(IN i INT) SQL SECURITY DEFINER SET @c:= 0;
CREATE USER mysqltest_u1@localhost;
GRANT EXECUTE ON test.* TO mysqltest_u1@localhost;
CREATE DEFINER=mysqltest_u1@localhost FUNCTION f_evil () RETURNS INT SQL SECURITY INVOKER BEGIN SET @a:= CURRENT_USER(); SET @b:= (SELECT COUNT(*) FROM t1); RETURN @b; END;
CREATE SQL SECURITY INVOKER VIEW v1 AS SELECT f_evil();
SELECT COUNT(*) FROM t1;
SELECT f_evil();
SELECT @a, @b;
SELECT f_suid(f_evil());
SELECT @a, @b;
CALL p_suid(f_evil());
SELECT @a, @b;
SELECT * FROM v1;
SELECT @a, @b;
DROP VIEW v1;
DROP FUNCTION f_evil;
DROP USER mysqltest_u1@localhost;
DROP PROCEDURE p_suid;
DROP FUNCTION f_suid;
DROP TABLE t1;
CREATE DATABASE B48872;
USE B48872;
CREATE TABLE `TestTab` (id INT);
INSERT INTO `TestTab` VALUES (1),(2);
CREATE FUNCTION `f_Test`() RETURNS INT RETURN 123;
CREATE FUNCTION `f_Test_denied`() RETURNS INT RETURN 123;
CREATE USER 'tester';
CREATE USER 'Tester';
GRANT SELECT ON TABLE `TestTab` TO 'tester';
GRANT EXECUTE ON FUNCTION `f_Test` TO 'tester';
GRANT EXECUTE ON FUNCTION `f_Test_denied` TO 'Tester';
SELECT f_Test();
SELECT * FROM TestTab;
SELECT * FROM TestTab;
SELECT `f_Test`();
SELECT `F_TEST`();
SELECT f_Test();
SELECT F_TEST();
SELECT * FROM TestTab;
SELECT `f_Test`();
SELECT `F_TEST`();
SELECT f_Test();
SELECT F_TEST();
SELECT `f_Test_denied`();
SELECT `F_TEST_DENIED`();
DROP TABLE `TestTab`;
DROP FUNCTION `f_Test`;
DROP FUNCTION `f_Test_denied`;
USE test;
DROP USER 'tester';
DROP USER 'Tester';
DROP DATABASE B48872;
drop database if exists mysqltest_db;
create database mysqltest_db;
create user bug57061_user@localhost;
create function mysqltest_db.f1() returns int return 0;
create procedure mysqltest_db.p1() begin end;
drop function if exists mysqltest_db.f_does_not_exist;
drop procedure if exists mysqltest_db.p_does_not_exist;
drop function if exists mysqltest_db.f1;
drop procedure if exists mysqltest_db.p1;
drop user bug57061_user@localhost;
drop database mysqltest_db;
drop database if exists mysqltest_db;
create database mysqltest_db;
create function mysqltest_db.f1() returns int return 0;
create procedure mysqltest_db.p1() begin end;
create user bug12602983_user@localhost;
select mysqltest_db.f_does_not_exist();
call mysqltest_db.p_does_not_exist();
select mysqltest_db.f1();
call mysqltest_db.p1();
create view bug12602983_v1 as select mysqltest_db.f_does_not_exist();
create view bug12602983_v1 as select mysqltest_db.f1();
drop user bug12602983_user@localhost;
drop database mysqltest_db;
CREATE DATABASE mysqltest_db;
CREATE PROCEDURE mysqltest_db.p1(IN f1 INT) SELECT 1;
CREATE USER user@localhost;
SELECT routine_schema, routine_name, routine_type, routine_definition FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_schema = 'mysqltest_db';
SELECT specific_schema, specific_name, parameter_name FROM INFORMATION_SCHEMA.PARAMETERS WHERE specific_schema = 'mysqltest_db';
GRANT EXECUTE ON PROCEDURE mysqltest_db.p1 TO user@localhost;
SELECT routine_schema, routine_name, routine_type, routine_definition FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_schema = 'mysqltest_db';
SELECT specific_schema, specific_name, parameter_name FROM INFORMATION_SCHEMA.PARAMETERS WHERE specific_schema = 'mysqltest_db';
REVOKE EXECUTE ON PROCEDURE mysqltest_db.p1 FROM user@localhost;
SELECT routine_schema, routine_name, routine_type, routine_definition FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_schema = 'mysqltest_db';
SELECT specific_schema, specific_name, parameter_name FROM INFORMATION_SCHEMA.PARAMETERS WHERE specific_schema = 'mysqltest_db';
GRANT SELECT ON *.* TO user@localhost;
SELECT routine_schema, routine_name, routine_type, routine_definition FROM INFORMATION_SCHEMA.ROUTINES WHERE routine_schema = 'mysqltest_db';
SELECT specific_schema, specific_name, parameter_name FROM INFORMATION_SCHEMA.PARAMETERS WHERE specific_schema = 'mysqltest_db';
CREATE USER u1@localhost IDENTIFIED BY 'foo';
GRANT SYSTEM_USER,SET_USER_ID, EXECUTE ON *.* TO u1@localhost;
CREATE DEFINER=root@localhost PROCEDURE p1() SELECT current_user();
CALL p1();
SELECT CURRENT_USER();
DROP PROCEDURE p1;
DROP USER u1@localhost;
DROP USER user@localhost;
DROP DATABASE mysqltest_db;
CREATE ROLE r1;
GRANT EXECUTE, SELECT ON *.* TO r1;
CREATE DEFINER=r1 PROCEDURE p1() SELECT current_user();
CALL p1();
DROP PROCEDURE p1;
DROP ROLE r1;
CREATE SCHEMA testdb;
CREATE USER usr_no_priv@localhost, usr_show_routine@localhost, usr_global_select@localhost, usr_definer@localhost, usr_role@localhost, usr_create_routine@localhost, usr_alter_routine@localhost, usr_execute@localhost;
CREATE ROLE role_show_routine;
GRANT role_show_routine to usr_role@localhost;
GRANT SHOW_ROUTINE ON *.* TO usr_show_routine@localhost, role_show_routine;
GRANT SELECT ON *.* TO usr_global_select@localhost;
GRANT EXECUTE ON *.* TO usr_execute@localhost;
GRANT CREATE ROUTINE ON *.* TO usr_create_routine@localhost;
GRANT ALTER ROUTINE ON *.* TO usr_alter_routine@localhost;
CREATE PROCEDURE testdb.proc_root() SELECT "ProcRoot";
CREATE FUNCTION testdb.func_root() RETURNS VARCHAR(8) DETERMINISTIC RETURN "FuncRoot";
CREATE DEFINER = `usr_definer`@`localhost` PROCEDURE testdb.proc_definer() SELECT "ProcDefiner";
CREATE DEFINER = `usr_definer`@`localhost` FUNCTION testdb.func_definer() RETURNS VARCHAR(11) DETERMINISTIC RETURN "FuncDefiner";
SELECT ROUTINE_DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA="testdb" ORDER BY ROUTINE_DEFINITION;
SHOW CREATE PROCEDURE testdb.proc_root;
SHOW CREATE PROCEDURE testdb.proc_definer;
SHOW CREATE FUNCTION testdb.func_root;
SHOW CREATE FUNCTION testdb.func_definer;
SHOW PROCEDURE STATUS WHERE db="testdb";
SHOW FUNCTION STATUS WHERE db="testdb";
SELECT ROUTINE_DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA="testdb" ORDER BY ROUTINE_DEFINITION;
SHOW CREATE PROCEDURE testdb.proc_root;
SHOW CREATE PROCEDURE testdb.proc_definer;
SHOW CREATE FUNCTION testdb.func_root;
SHOW CREATE FUNCTION testdb.func_definer;
SHOW PROCEDURE STATUS WHERE db="testdb";
SHOW FUNCTION STATUS WHERE db="testdb";
SELECT ROUTINE_DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA="testdb" ORDER BY ROUTINE_DEFINITION;
SHOW CREATE PROCEDURE testdb.proc_root;
SHOW CREATE PROCEDURE testdb.proc_definer;
SHOW CREATE FUNCTION testdb.func_root;
SHOW CREATE FUNCTION testdb.func_definer;
SHOW PROCEDURE STATUS WHERE db="testdb";
SHOW FUNCTION STATUS WHERE db="testdb";
SET ROLE role_show_routine;
SELECT ROUTINE_DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA="testdb" ORDER BY ROUTINE_DEFINITION;
SHOW CREATE PROCEDURE testdb.proc_root;
SHOW CREATE PROCEDURE testdb.proc_definer;
SHOW CREATE FUNCTION testdb.func_root;
SHOW CREATE FUNCTION testdb.func_definer;
SHOW PROCEDURE STATUS WHERE db="testdb";
SHOW FUNCTION STATUS WHERE db="testdb";
SHOW CREATE PROCEDURE testdb.proc_root;
SHOW CREATE PROCEDURE testdb.proc_definer;
SHOW CREATE FUNCTION testdb.func_root;
SHOW CREATE FUNCTION testdb.func_definer;
SHOW PROCEDURE STATUS WHERE db="testdb";
SHOW FUNCTION STATUS WHERE db="testdb";
SELECT ROUTINE_DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA="testdb" ORDER BY ROUTINE_DEFINITION;
SHOW CREATE PROCEDURE testdb.proc_root;
SHOW CREATE FUNCTION testdb.func_root;
SHOW CREATE PROCEDURE testdb.proc_definer;
SHOW CREATE FUNCTION testdb.func_definer;
SHOW PROCEDURE STATUS WHERE db="testdb";
SHOW FUNCTION STATUS WHERE db="testdb";
SELECT ROUTINE_DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA="testdb" ORDER BY ROUTINE_DEFINITION;
SHOW CREATE PROCEDURE testdb.proc_root;
SHOW CREATE PROCEDURE testdb.proc_definer;
SHOW CREATE FUNCTION testdb.func_root;
SHOW CREATE FUNCTION testdb.func_definer;
SHOW PROCEDURE STATUS WHERE db="testdb";
SHOW FUNCTION STATUS WHERE db="testdb";
SELECT ROUTINE_DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA="testdb" ORDER BY ROUTINE_DEFINITION;
SHOW CREATE PROCEDURE testdb.proc_root;
SHOW CREATE PROCEDURE testdb.proc_definer;
SHOW CREATE FUNCTION testdb.func_root;
SHOW CREATE FUNCTION testdb.func_definer;
SHOW PROCEDURE STATUS WHERE db="testdb";
SHOW FUNCTION STATUS WHERE db="testdb";
SELECT ROUTINE_DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA="testdb" ORDER BY ROUTINE_DEFINITION;
SHOW CREATE PROCEDURE testdb.proc_root;
SHOW CREATE PROCEDURE testdb.proc_definer;
SHOW CREATE FUNCTION testdb.func_root;
SHOW CREATE FUNCTION testdb.func_definer;
SHOW PROCEDURE STATUS WHERE db="testdb";
SHOW FUNCTION STATUS WHERE db="testdb";
SET @start_partial_revokes = @@global.partial_revokes;
SET @@global.partial_revokes=ON;
REVOKE SELECT ON testdb.* FROM usr_global_select@localhost;
SELECT ROUTINE_DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA="testdb" ORDER BY ROUTINE_DEFINITION;
SHOW CREATE PROCEDURE testdb.proc_root;
SHOW CREATE PROCEDURE testdb.proc_definer;
SHOW CREATE FUNCTION testdb.func_root;
SHOW CREATE FUNCTION testdb.func_definer;
SHOW PROCEDURE STATUS WHERE db="testdb";
SHOW FUNCTION STATUS WHERE db="testdb";
DROP USER usr_global_select@localhost;
SET @@global.partial_revokes = @start_partial_revokes;
DROP USER usr_no_priv@localhost, usr_show_routine@localhost, usr_definer@localhost, usr_role@localhost, usr_create_routine@localhost, usr_alter_routine@localhost, usr_execute@localhost;
DROP ROLE role_show_routine;
DROP SCHEMA testdb;
delete from mysql.db;
insert into mysql.db select * from mysql.db_copy;
flush privileges;
drop table mysql.db_copy;
SET GLOBAL sql_mode= @orig_sql_mode_global;
SET SESSION sql_mode= @orig_sql_mode_session;
SET GLOBAL partial_revokes = @orig_partial_revokes;
