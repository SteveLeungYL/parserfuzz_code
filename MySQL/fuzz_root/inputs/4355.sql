drop table if exists t1,t2,v1,v2;
drop view if exists t1,t2,v1,v2;
CREATE TABLE `t1` ( a int not null auto_increment, `pseudo` varchar(35) character set latin2 NOT NULL default '', `email` varchar(60) character set latin2 NOT NULL default '', PRIMARY KEY  (a), UNIQUE KEY `email` USING BTREE (`email`) ) ENGINE=HEAP CHARSET=latin1 ROW_FORMAT DYNAMIC;
set @@sql_mode="";
show variables like 'sql_mode';
show create table t1;
set @@sql_mode="ansi_quotes";
show variables like 'sql_mode';
show create table t1;
drop table t1;
set session sql_mode = '';
create table t1 ( min_num   dec(6,6)     default .000001);
show create table t1;
drop table t1 ;
set session sql_mode = 'IGNORE_SPACE';
create table t1 ( min_num   dec(6,6)     default 0.000001);
show create table t1;
drop table t1 ;
create table t1 ( min_num   dec(6,6)     default .000001);
show create table t1;
drop table t1 ;
set @@SQL_MODE=NULL;
set session sql_mode=ansi;
create table t1 (f1 integer auto_increment primary key, f2 timestamp not null default current_timestamp on update current_timestamp);
show create table t1;
drop table t1;
SET @OLD_SQL_MODE=@@SQL_MODE, @@SQL_MODE='';
show local variables like 'SQL_MODE';
CREATE TABLE t1 (p int not null auto_increment, a varchar(20), primary key(p)) charset latin1;
INSERT t1 (a) VALUES ('\\'), ('\n'), ('\b'), ('\r'), ('\t'), ('\x'), ('\a'), ('\aa'), ('\\a'), ('\\aa'), ('_'), ('\_'), ('\\_'), ('\\\_'), ('\\\\_'), ('%'), ('\%'), ('\\%'), ('\\\%'), ('\\\\%') ;
SELECT p, hex(a) FROM t1;
delete from t1 where a in ('\n','\r','\t', '\b');
select masks.p, masks.a as mask, examples.a as example from t1 as masks left join t1 as examples on examples.a LIKE masks.a order by masks.p, example;
DROP TABLE t1;
SET @@SQL_MODE='NO_BACKSLASH_ESCAPES';
show local variables like 'SQL_MODE';
CREATE TABLE t1 (p int not null auto_increment, a varchar(20), primary key(p)) charset latin1;
INSERT t1 (a) VALUES ('\\'), ('\n'), ('\b'), ('\r'), ('\t'), ('\x'), ('\a'), ('\aa'), ('\\a'), ('\\aa'), ('_'), ('\_'), ('\\_'), ('\\\_'), ('\\\\_'), ('%'), ('\%'), ('\\%'), ('\\\%'), ('\\\\%') ;
SELECT p, hex(a) FROM t1;
delete from t1 where a in ('\n','\r','\t', '\b');
select masks.p, masks.a as mask, examples.a as example from t1 as masks left join t1 as examples on examples.a LIKE masks.a order by masks.p, example;
DROP TABLE t1;
SET @@SQL_MODE='NO_BACKSLASH_ESCAPES';
SELECT 'a\\b', 'a\\\"b', 'a''\\b', 'a''\\\"b';
SELECT "a\\b", "a\\\'b", "a""\\b", "a""\\\'b";
SET @@SQL_MODE='';
SELECT 'a\\b', 'a\\\"b', 'a''\\b', 'a''\\\"b';
SELECT "a\\b", "a\\\'b", "a""\\b", "a""\\\'b";
SET @@SQL_MODE='';
create function `foo` () returns int return 5;
show create function `foo`;
SET @@SQL_MODE='ANSI_QUOTES';
show create function `foo`;
drop function `foo`;
create function `foo` () returns int return 5;
show create function `foo`;
SET @@SQL_MODE='';
show create function `foo`;
drop function `foo`;
SET @@SQL_MODE='';
create table t1 (a int);
create table t2 (a int);
create view v1 as select a from t1;
show create view v1;
SET @@SQL_MODE='ANSI_QUOTES';
show create view v1;
create view v2 as select a from t2 where a in (select a from v1);
drop view v2, v1;
drop table t1, t2;
select @@sql_mode;
set sql_mode=2097152;
select @@sql_mode;
set sql_mode=4194304;
select @@sql_mode;
set sql_mode=32+(65536*4);
select @@sql_mode;
set sql_mode=4294967296*2;
select @@sql_mode;
set sql_mode=PAD_CHAR_TO_FULL_LENGTH;
create table t1 (a int auto_increment primary key, b char(5));
insert into t1 (b) values('a'),('b\t'),('c ');
select concat('x',b,'x') from t1;
set sql_mode=0;
select concat('x',b,'x') from t1;
drop table t1;
SET @@SQL_MODE=@OLD_SQL_MODE;
set @OLD_SQL_MODE=@@SESSION.SQL_MODE;
set session sql_mode='PAD_CHAR_TO_FULL_LENGTH';
flush privileges;
set session sql_mode=@OLD_SQL_MODE;
flush privileges;
SET @org_mode=@@sql_mode;
SET @@sql_mode='traditional';
SELECT @@sql_mode LIKE '%NO_ENGINE_SUBSTITUTION%';
SET sql_mode=@org_mode;
DROP TABLE IF EXISTS t1,t2;
CREATE TABLE t1 (f1 BIGINT);
CREATE TABLE t2 (f1 CHAR(3) NOT NULL, f2 CHAR(20));
SET @OLD_SQL_MODE = @@SESSION.SQL_MODE;
SET SESSION SQL_MODE = 'PAD_CHAR_TO_FULL_LENGTH';
SET SESSION SQL_MODE = @OLD_SQL_MODE;
FLUSH PRIVILEGES;
DROP TABLE t1;
DROP TABLE t2;
DROP TABLE IF EXISTS test_table;
DROP FUNCTION IF EXISTS test_function;
CREATE TABLE test_table (c1 CHAR(50));
SET @org_mode=@@sql_mode;
SET @@sql_mode='';
PREPARE insert_stmt FROM 'INSERT INTO test_table VALUES (?)';
PREPARE update_stmt FROM 'UPDATE test_table SET c1= ? WHERE c1= ?';
CREATE FUNCTION test_function(var CHAR(50)) RETURNS CHAR(50) BEGIN DECLARE char_val CHAR(50); SELECT c1 INTO char_val FROM test_table WHERE c1=var; RETURN char_val; END ;
SET @var1='abcd\'ef';
SET @var2='abcd\"ef';
SET @var3='abcd\bef';
SET @var4='abcd\nef';
SET @var5='abcd\ref';
SET @var6='abcd\tef';
SET @var7='abcd\\ef';
SET @var8='abcd\%ef';
SET @var9='abcd\_ef';
SET @to_var1='wxyz\'ef';
SET @to_var2='wxyz\"ef';
SET @to_var3='wxyz\bef';
SET @to_var4='wxyz\nef';
SET @to_var5='wxyz\ref';
SET @to_var6='wxyz\tef';
SET @to_var7='wxyz\\ef';
SET @to_var8='wxyz\%ef';
SET @to_var9='wxyz\_ef';
EXECUTE insert_stmt USING @var1;
EXECUTE insert_stmt USING @var2;
EXECUTE insert_stmt USING @var3;
EXECUTE insert_stmt USING @var4;
EXECUTE insert_stmt USING @var5;
EXECUTE insert_stmt USING @var6;
EXECUTE insert_stmt USING @var7;
EXECUTE insert_stmt USING @var8;
EXECUTE insert_stmt USING @var9;
SELECT * FROM test_table;
EXECUTE update_stmt USING @to_var1, @var1;
EXECUTE update_stmt USING @to_var2, @var2;
EXECUTE update_stmt USING @to_var3, @var3;
EXECUTE update_stmt USING @to_var4, @var4;
EXECUTE update_stmt USING @to_var5, @var5;
EXECUTE update_stmt USING @to_var6, @var6;
EXECUTE update_stmt USING @to_var7, @var7;
EXECUTE update_stmt USING @to_var8, @var8;
EXECUTE update_stmt USING @to_var9, @var9;
SELECT * FROM test_table;
select test_function(@to_var1);
SELECT test_function(@to_var2);
SELECT test_function(@to_var3);
SELECT test_function(@to_var4);
SELECT test_function(@to_var5);
SELECT test_function(@to_var6);
SELECT test_function(@to_var7);
SELECT test_function(@to_var8);
SELECT test_function(@to_var9);
DELETE FROM test_table;
DROP FUNCTION test_function;
SET @@sql_mode='NO_BACKSLASH_ESCAPES';
CREATE FUNCTION test_function(var CHAR(50)) RETURNS CHAR(50) BEGIN DECLARE char_val CHAR(50); SELECT c1 INTO char_val FROM test_table WHERE c1=var; RETURN char_val; END ;
EXECUTE insert_stmt USING @var1;
EXECUTE insert_stmt USING @var2;
EXECUTE insert_stmt USING @var3;
EXECUTE insert_stmt USING @var4;
EXECUTE insert_stmt USING @var5;
EXECUTE insert_stmt USING @var6;
EXECUTE insert_stmt USING @var7;
EXECUTE insert_stmt USING @var8;
EXECUTE insert_stmt USING @var9;
SELECT * FROM test_table;
EXECUTE update_stmt USING @to_var1, @var1;
EXECUTE update_stmt USING @to_var2, @var2;
EXECUTE update_stmt USING @to_var3, @var3;
EXECUTE update_stmt USING @to_var4, @var4;
EXECUTE update_stmt USING @to_var5, @var5;
EXECUTE update_stmt USING @to_var6, @var6;
EXECUTE update_stmt USING @to_var7, @var7;
EXECUTE update_stmt USING @to_var8, @var8;
EXECUTE update_stmt USING @to_var9, @var9;
SELECT * FROM test_table;
select test_function(@to_var1);
SELECT test_function(@to_var2);
SELECT test_function(@to_var3);
SELECT test_function(@to_var4);
SELECT test_function(@to_var5);
SELECT test_function(@to_var6);
SELECT test_function(@to_var7);
SELECT test_function(@to_var8);
SELECT test_function(@to_var9);
DROP TABLE test_table;
DROP FUNCTION test_function;
SET @@sql_mode= @org_mode;
SET @org_mode= @@sql_mode;
SET sql_mode= 'NO_ZERO_DATE';
SELECT @@sql_mode;
SET sql_mode= 'NO_ZERO_IN_DATE';
SELECT @@sql_mode;
SET sql_mode= 'ERROR_FOR_DIVISION_BY_ZERO';
SELECT @@sql_mode;
SET sql_mode= @org_mode;
SET @org_mode=@@sql_mode;
SET @@sql_mode='';
SET @@sql_mode='NO_BACKSLASH_ESCAPES';
SET @@sql_mode= @org_mode;
SELECT '\'';
SET SQL_MODE=DEFAULT;
CREATE TABLE test(id INT, count DOUBLE);
INSERT INTO test VALUES (1,0), (2,0);
UPDATE test SET count = count + 1 WHERE id = '1invalid';
PREPARE stmt FROM 'UPDATE test SET count = count + 1 WHERE id = ?';
SET @a = '1invalid';
EXECUTE stmt USING @a;
SET SQL_MODE='';
EXECUTE stmt USING @a;
SELECT * FROM test;
SET SQL_MODE=DEFAULT;
DROP TABLE test;
SET sql_mode= 'PAD_CHAR_TO_FULL_LENGTH';
SET sql_mode= DEFAULT;
