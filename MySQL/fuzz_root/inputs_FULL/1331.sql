drop database if exists events_test;
drop database if exists mysqltest_db1;
drop database if exists mysqltest_db2;
create database events_test;
use events_test;
set @concurrent_insert= @@global.concurrent_insert;
set @@global.concurrent_insert = 0;
select * from performance_schema.global_variables where variable_name like 'event_scheduler';
SET GLOBAL event_scheduler = 'OFF';
CREATE EVENT lower_case ON SCHEDULE EVERY 1 MINUTE DO SELECT 1;
CREATE EVENT Lower_case ON SCHEDULE EVERY 2 MINUTE DO SELECT 2;
DROP EVENT Lower_case;
SET NAMES cp1251;
CREATE EVENT ‰ÓÎÂÌ_Â„ËÒÚ˙_1251 ON SCHEDULE EVERY 1 YEAR DO SELECT 100;
CREATE EVENT ƒÓÀÂÕ_Â„ËÒÚ˙_1251 ON SCHEDULE EVERY 2 YEAR DO SELECT 200;
DROP EVENT ƒÓÀÂÕ_Â„ËÒÚ˙_1251;
SET NAMES utf8;
CREATE EVENT –¥–æ–ª–µ–Ω_—Ä–µ–≥–∏—Å—Ç—ä—Ä_—É—Ç—Ñ8 ON SCHEDULE EVERY 3 YEAR DO SELECT 300;
CREATE EVENT –î–û–õ–ï–ù_—Ä–µ–≥–∏—Å—Ç—ä—Ä_—É—Ç—Ñ8 ON SCHEDULE EVERY 4 YEAR DO SELECT 400;
DROP EVENT –î–û–õ–ï–ù_—Ä–µ–≥–∏—Å—Ç—ä—Ä_—É—Ç—Ñ8;
SET NAMES latin1;
set @a=3;
CREATE PROCEDURE p_16 () CREATE EVENT e_16 ON SCHEDULE EVERY @a SECOND DO SET @a=5;
create event e_55 on schedule at 99990101000000 do drop table t;
create event e_55 on schedule every 10 hour starts 99990101000000 do drop table t;
create event e_55 on schedule every 10 minute ends 99990101000000 do drop table t;
create event e_55 on schedule at 10000101000000 do drop table t;
create event e_55 on schedule at 20000101000000 do drop table t;
show events;
create event e_55 on schedule at 20380101000000 starts 10000101000000 do drop table t;
create event e_55 on schedule at 20380101000000 ends 10000101000000 do drop table t;
create event e_55 on schedule at 20380101000000 starts 10000101000000 ends 10000101000000 do drop table t;
create event e_55 on schedule every 10 hour starts 10000101000000 do drop table t;
set global event_scheduler=off;
set global event_scheduler= on;
set @old_sql_mode:=@@sql_mode;
set sql_mode=ansi;
select get_lock('test_bug16407', 60);
create event e_16407 on schedule every 60 second do begin select get_lock('test_bug16407', 60); end;
select /*1*/ user, host, db, info from information_schema.processlist where state = 'User lock' and info = 'select get_lock(\'test_bug16407\', 60)';
select release_lock('test_bug16407');
set global event_scheduler= off;
select event_schema, event_name, sql_mode from information_schema.events order by event_schema, event_name;
set sql_mode='traditional';
alter event e_16407 do select 1;
select event_schema, event_name, sql_mode from information_schema.events order by event_schema, event_name;
drop event e_16407;
set sql_mode="ansi";
select get_lock('ee_16407_2', 60);
set global event_scheduler= 1;
set sql_mode="traditional";
create table events_smode_test(ev_name char(10), a date);
create event ee_16407_2 on schedule every 60 second do begin select get_lock('ee_16407_2', 60) /*ee_16407_2*/; select release_lock('ee_16407_2'); insert into events_test.events_smode_test values('ee_16407_2','1980-19-02'); end;
insert into events_test.events_smode_test values ('test','1980-19-02');
create event ee_16407_3 on schedule every 60 second do begin select get_lock('ee_16407_2', 60) /*ee_16407_3*/; select release_lock('ee_16407_2'); insert into events_test.events_smode_test values ('ee_16407_3','1980-02-19'); insert into events_test.events_smode_test values ('ee_16407_3','1980-02-29'); end;
set sql_mode="";
create event ee_16407_4 on schedule every 60 second do begin select get_lock('ee_16407_2', 60) /*ee_16407_4*/; select release_lock('ee_16407_2'); insert into events_test.events_smode_test values ('ee_16407_4','10-11-1956'); end;
select event_schema, event_name, sql_mode from information_schema.events order by event_schema, event_name;
select /*2*/ user, host, db, info from information_schema.processlist where state = 'User lock' and info = 'select get_lock(\'ee_16407_2\', 60)';
select release_lock('ee_16407_2');
select /*3*/ user, host, db, info from information_schema.processlist where state = 'User lock' and info = 'select get_lock(\'ee_16407_2\', 60)';
set global event_scheduler= off;
select * from events_test.events_smode_test order by ev_name, a;
select event_schema, event_name, sql_mode from information_schema.events order by event_schema, event_name;
drop event ee_16407_2;
drop event ee_16407_3;
drop event ee_16407_4;
delete from events_test.events_smode_test;
set sql_mode='ansi';
select get_lock('ee_16407_5', 60);
set global event_scheduler= on;
set sql_mode='traditional';
create procedure ee_16407_5_pendant() begin insert into events_test.events_smode_test values('ee_16407_5','2001-02-29'); end;
create procedure ee_16407_6_pendant() begin insert into events_test.events_smode_test values('ee_16407_6','2004-02-29'); end;
create event ee_16407_5 on schedule every 60 second do begin select get_lock('ee_16407_5', 60) /*ee_16407_5*/; select release_lock('ee_16407_5'); call events_test.ee_16407_5_pendant(); end;
create event ee_16407_6 on schedule every 60 second do begin select get_lock('ee_16407_5', 60) /*ee_16407_6*/; select release_lock('ee_16407_5'); call events_test.ee_16407_6_pendant(); end;
select /*4*/ user, host, db, info from information_schema.processlist where state = 'User lock' and info = 'select get_lock(\'ee_16407_5\', 60)';
select release_lock('ee_16407_5');
select /*5*/ user, host, db, info from information_schema.processlist where state = 'User lock' and info = 'select get_lock(\'ee_16407_5\', 60)';
select * from events_test.events_smode_test order by ev_name, a;
select event_schema, event_name, sql_mode from information_schema.events order by event_schema, event_name;
drop event ee_16407_5;
drop event ee_16407_6;
drop procedure ee_16407_5_pendant;
drop procedure ee_16407_6_pendant;
set global event_scheduler= off;
drop table events_smode_test;
set sql_mode=@old_sql_mode;
set global event_scheduler=off;
delete from mysql.user where User like 'mysqltest_%';
delete from mysql.db where User like 'mysqltest_%';
flush privileges;
drop database if exists mysqltest_db1;
create user mysqltest_user1@localhost;
create database mysqltest_db1;
grant event on events_test.* to mysqltest_user1@localhost;
create event mysqltest_user1 on schedule every 10 second do select 42;
alter event mysqltest_user1 rename to mysqltest_db1.mysqltest_user1;
select database();
alter event events_test.mysqltest_user1 rename to mysqltest_user1;
select event_schema, event_name, definer, event_type, status from information_schema.events;
drop event events_test.mysqltest_user1;
drop user mysqltest_user1@localhost;
drop database mysqltest_db1;
create event e_53 on schedule at (select s1 from ttx) do drop table t;
create event e_53 on schedule every (select s1 from ttx) second do drop table t;
create event e_53 on schedule every 5 second starts (select s1 from ttx) do drop table t;
create event e_53 on schedule every 5 second ends (select s1 from ttx) do drop table t;
drop event if exists e_16;
drop procedure if exists p_16;
create event e_16 on schedule every 1 second do set @a=5;
create procedure p_16 () alter event e_16 on schedule every @a second;
set @a = null;
call p_16();
call p_16();
set @a= 6;
call p_16();
drop procedure p_16;
drop event e_16;
drop function if exists f22830;
drop event if exists e22830;
drop event if exists e22830_1;
drop event if exists e22830_2;
drop event if exists e22830_3;
drop event if exists e22830_4;
drop table if exists t1;
drop table if exists t2;
create table t1 (a int);
insert into t1 values (2);
create table t2 (a char(20));
insert into t2 values ("e22830_1");
create function f22830 () returns int return 5;
select get_lock('ee_22830', 60);
set global event_scheduler=on;
create procedure p22830_wait() begin select get_lock('ee_22830', 60); select release_lock('ee_22830'); end;
create event e22830 on schedule every f22830() second do begin call p22830_wait(); select 123; end;
create event e22830_1 on schedule every 1 hour do begin call p22830_wait(); alter event e22830_1 on schedule every (select 8 from dual) hour; end;
create event e22830_2 on schedule every 1 hour do begin call p22830_wait(); alter event e22830_2 on schedule every (select 8 from t1) hour; end;
create event e22830_3 on schedule every 1 hour do begin call p22830_wait(); alter event e22830_3 on schedule every f22830() hour; end;
create event e22830_4 on schedule every 1 hour do begin call p22830_wait(); alter event e22830_4 on schedule every (select f22830() from dual) hour; end;
select event_name, event_definition, interval_value, interval_field from information_schema.events order by event_name;
select release_lock('ee_22830');
set global event_scheduler=off;
select event_name, event_definition, interval_value, interval_field from information_schema.events order by event_name;
drop procedure p22830_wait;
drop function f22830;
drop event (select a from t2);
drop event e22830_1;
drop event e22830_2;
drop event e22830_3;
drop event e22830_4;
drop table t1;
drop table t2;
DROP USER mysqltest_u1@localhost;
CREATE USER mysqltest_u1@localhost;
GRANT EVENT ON events_test.* TO mysqltest_u1@localhost;
CREATE EVENT e1 ON SCHEDULE EVERY 1 DAY DO SELECT 1;
SELECT event_name, definer FROM INFORMATION_SCHEMA.EVENTS;
DROP EVENT e1;
CREATE DEFINER=CURRENT_USER EVENT e1 ON SCHEDULE EVERY 1 DAY DO SELECT 1;
SELECT event_name, definer FROM INFORMATION_SCHEMA.EVENTS;
ALTER DEFINER=mysqltest_u1@localhost EVENT e1 ON SCHEDULE EVERY 1 HOUR;
SELECT event_name, definer FROM INFORMATION_SCHEMA.EVENTS;
DROP EVENT e1;
CREATE DEFINER=CURRENT_USER() EVENT e1 ON SCHEDULE EVERY 1 DAY DO SELECT 1;
SELECT event_name, definer FROM INFORMATION_SCHEMA.EVENTS;
DROP EVENT e1;
CREATE DEFINER=mysqltest_u1@localhost EVENT e1 ON SCHEDULE EVERY 1 DAY DO SELECT 1;
SELECT event_name, definer FROM INFORMATION_SCHEMA.EVENTS;
DROP EVENT e1;
CREATE EVENT e1 ON SCHEDULE EVERY 1 DAY DO SELECT 1;
SELECT event_name, definer FROM INFORMATION_SCHEMA.EVENTS;
DROP EVENT e1;
CREATE DEFINER=CURRENT_USER EVENT e1 ON SCHEDULE EVERY 1 DAY DO SELECT 1;
SELECT event_name, definer FROM INFORMATION_SCHEMA.EVENTS;
ALTER DEFINER=root@localhost EVENT e1 ON SCHEDULE EVERY 1 HOUR;
SELECT event_name, definer FROM INFORMATION_SCHEMA.EVENTS;
DROP EVENT e1;
CREATE DEFINER=CURRENT_USER() EVENT e1 ON SCHEDULE EVERY 1 DAY DO SELECT 1;
SELECT event_name, definer FROM INFORMATION_SCHEMA.EVENTS;
DROP EVENT e1;
CREATE DEFINER=root@localhost EVENT e1 ON SCHEDULE EVERY 1 DAY DO SELECT 1;
DROP EVENT e1;
DROP USER mysqltest_u1@localhost;
SET GLOBAL EVENT_SCHEDULER= OFF;
SET @save_time_zone= @@TIME_ZONE;
SET TIME_ZONE= '+00:00';
SET TIMESTAMP= UNIX_TIMESTAMP('2005-12-31 23:58:59');
CREATE EVENT e1 ON SCHEDULE EVERY 1 DAY DO SELECT 1;
SHOW EVENTS;
SET TIME_ZONE= '-01:00';
ALTER EVENT e1 ON SCHEDULE EVERY 1 DAY STARTS '2000-01-01 00:00:00';
SHOW EVENTS;
SET TIME_ZONE= '+02:00';
ALTER EVENT e1 ON SCHEDULE AT '2000-01-02 00:00:00'   ON COMPLETION PRESERVE DISABLE;
SHOW EVENTS;
SET TIME_ZONE= '-03:00';
ALTER EVENT e1 ON SCHEDULE EVERY 1 DAY ENDS '2038-01-03 00:00:00'   ON COMPLETION PRESERVE DISABLE;
SHOW EVENTS;
SET TIME_ZONE= '+04:00';
ALTER EVENT e1 DO SELECT 2;
SHOW EVENTS;
DROP EVENT e1;
SET TIME_ZONE='+05:00';
CREATE EVENT e1 ON SCHEDULE EVERY 1 DAY STARTS '2006-01-01 00:00:00' DO SELECT 1;
SET TIMESTAMP= @@TIMESTAMP + 1;
SET TIME_ZONE='-05:00';
CREATE EVENT e2 ON SCHEDULE EVERY 1 DAY STARTS '2006-01-01 00:00:00' DO SELECT 1;
SET TIMESTAMP= @@TIMESTAMP + 1;
SET TIME_ZONE='+00:00';
CREATE EVENT e3 ON SCHEDULE EVERY 1 DAY STARTS '2006-01-01 00:00:00' DO SELECT 1;
SELECT * FROM INFORMATION_SCHEMA.EVENTS ORDER BY event_name;
SHOW EVENTS;
SHOW CREATE EVENT e1;
SHOW CREATE EVENT e2;
SHOW CREATE EVENT e3;
ALTER EVENT e1 ON SCHEDULE EVERY 1 HOUR STARTS '1999-01-01 00:00:00'   ENDS '1999-01-02 00:00:00';
ALTER EVENT e1 ON SCHEDULE EVERY 1 HOUR STARTS '1999-01-01 00:00:00'   ENDS '1999-01-02 00:00:00' DISABLE;
CREATE EVENT e4 ON SCHEDULE EVERY 1 HOUR STARTS '1999-01-01 00:00:00'   ENDS '1999-01-02 00:00:00' DO SELECT 1;
CREATE EVENT e4 ON SCHEDULE EVERY 1 HOUR STARTS '1999-01-01 00:00:00'   ENDS '1999-01-02 00:00:00' DISABLE DO SELECT 1;
CREATE EVENT e4 ON SCHEDULE AT '1999-01-01 00:00:00' DO SELECT 1;
CREATE EVENT e4 ON SCHEDULE AT '1999-01-01 00:00:00' DISABLE DO SELECT 1;
SHOW EVENTS;
ALTER EVENT e1 ON SCHEDULE EVERY 1 HOUR STARTS '1999-01-01 00:00:00'   ENDS '1999-01-02 00:00:00' ON COMPLETION PRESERVE;
CREATE EVENT e4 ON SCHEDULE EVERY 1 HOUR STARTS '1999-01-01 00:00:00'   ENDS '1999-01-02 00:00:00' ON COMPLETION PRESERVE DO SELECT 1;
CREATE EVENT e5 ON SCHEDULE AT '1999-01-01 00:00:00'   ON COMPLETION PRESERVE DO SELECT 1;
ALTER EVENT e2 ON SCHEDULE EVERY 1 HOUR STARTS '1999-01-01 00:00:00';
ALTER EVENT e3 ON SCHEDULE EVERY 1 HOUR STARTS '1999-01-01 00:00:00'   ENDS '1999-01-02 00:00:00' ON COMPLETION PRESERVE DISABLE;
CREATE EVENT e6 ON SCHEDULE EVERY 1 HOUR STARTS '1999-01-01 00:00:00' DO SELECT 1;
CREATE EVENT e7 ON SCHEDULE EVERY 1 HOUR STARTS '1999-01-01 00:00:00'   ENDS '1999-01-02 00:00:00' ON COMPLETION PRESERVE DISABLE DO SELECT 1;
CREATE EVENT e8 ON SCHEDULE AT '1999-01-01 00:00:00'   ON COMPLETION PRESERVE DISABLE DO SELECT 1;
SHOW EVENTS;
DROP EVENT e8;
DROP EVENT e7;
DROP EVENT e6;
DROP EVENT e5;
DROP EVENT e4;
DROP EVENT e3;
DROP EVENT e2;
DROP EVENT e1;
SET TIME_ZONE=@save_time_zone;
SET TIMESTAMP=DEFAULT;
drop event if exists new_event;
CREATE EVENT new_event ON SCHEDULE EVERY 0 SECOND DO SELECT 1;
CREATE EVENT new_event ON SCHEDULE EVERY (SELECT 0) SECOND DO SELECT 1;
CREATE EVENT new_event ON SCHEDULE EVERY "abcdef" SECOND DO SELECT 1;
CREATE EVENT new_event ON SCHEDULE EVERY "0abcdef" SECOND DO SELECT 1;
CREATE EVENT new_event ON SCHEDULE EVERY "a1bcdef" SECOND DO SELECT 1;
CREATE EVENT new_event ON SCHEDULE EVERY (SELECT "abcdef" UNION SELECT "abcdef") SECOND DO SELECT 1;
CREATE EVENT new_event ON SCHEDULE EVERY (SELECT "0abcdef") SECOND DO SELECT 1;
CREATE EVENT new_event ON SCHEDULE EVERY (SELECT "a1bcdef") SECOND DO SELECT 1;
CREATE EVENT new_event ON SCHEDULE AT "every day" DO SELECT 1;
CREATE EVENT new_event ON SCHEDULE AT "0every day" DO SELECT 1;
CREATE EVENT new_event ON SCHEDULE AT (SELECT "every day") DO SELECT 1;
CREATE EVENT new_event ON SCHEDULE AT NOW() STARTS NOW() DO SELECT 1;
CREATE EVENT new_event ON SCHEDULE AT NOW() ENDS NOW() DO SELECT 1;
CREATE EVENT new_event ON SCHEDULE AT NOW() STARTS NOW() ENDS NOW() DO SELECT 1;
USE test;
SHOW GRANTS FOR CURRENT_USER;
SET GLOBAL event_scheduler = ON;
CREATE TABLE events_test.event_log (id int KEY AUTO_INCREMENT, ev_nm char(40), ev_cnt int, ev_tm timestamp);
SET @save_session_autocommit = @@session.autocommit;
SET @@session.autocommit=0;
CREATE USER evtest1@localhost;
ALTER USER evtest1@localhost IDENTIFIED BY 'ev1';
REVOKE ALL PRIVILEGES, GRANT OPTION FROM evtest1@localhost;
GRANT create, insert, select, event ON events_test.* TO evtest1@localhost;
GRANT select,insert ON test.* TO evtest1@localhost;
SHOW GRANTS FOR evtest1@localhost;
CREATE EVENT ev_sched_1823 ON SCHEDULE EVERY 2 SECOND DO BEGIN SET AUTOCOMMIT = 0; SET @evname = 'ev_sched_1823'; SET @cnt = 0; SELECT COUNT(*) INTO @cnt FROM events_test.event_log WHERE ev_nm = @evname; IF @cnt < 6 THEN INSERT INTO events_test.event_log VALUES (NULL,@evname,@cnt+1,current_timestamp()); COMMIT; END IF; SELECT COUNT(*) INTO @cnt FROM events_test.event_log WHERE ev_nm = @evname; IF @cnt < 6 THEN INSERT INTO events_test.event_log VALUES (NULL,@evname,@cnt+1,current_timestamp()); ROLLBACK; END IF; END;;
SELECT COUNT(*) > 0 AS "Expect 1" FROM events_test.event_log;
SELECT COUNT(*) INTO @row_cnt FROM events_test.event_log;
SELECT COUNT(*) > @row_cnt AS "Expect 0" FROM events_test.event_log;
DROP EVENT events_test.ev_sched_1823;
DROP USER evtest1@localhost;
DROP TABLE events_test.event_log;
SET GLOBAL event_scheduler = OFF;
SET @@session.autocommit = @save_session_autocommit;
SET GLOBAL event_scheduler= ON;
CREATE EVENT bug28641 ON SCHEDULE AT '2038.01.18 03:00:00' DO BEGIN SELECT 1; END;;
SET GLOBAL event_scheduler= OFF;
DROP EVENT bug28641;
DROP USER mysqltest_u1@localhost;
DROP EVENT IF EXISTS e1;
DROP EVENT IF EXISTS e2;
CREATE USER mysqltest_u1@localhost;
GRANT EVENT ON *.* TO mysqltest_u1@localhost;
SET GLOBAL READ_ONLY = 1;
CREATE EVENT e1 ON SCHEDULE AT '2038-01-01 00:00:00' DO SET @a = 1;
ALTER EVENT e1 COMMENT 'comment';
DROP EVENT e1;
CREATE EVENT e1 ON SCHEDULE AT '2038-01-01 00:00:00' DO SET @a = 1;
ALTER EVENT e1 COMMENT 'comment';
DROP EVENT e1;
SET GLOBAL READ_ONLY = 0;
CREATE EVENT e1 ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 SECOND DO SET @a = 1;
CREATE EVENT e2 ON SCHEDULE EVERY 1 SECOND DO SET @a = 1;
SELECT event_name, last_executed IS NULL, definer FROM INFORMATION_SCHEMA.EVENTS WHERE event_schema = 'events_test';
SET GLOBAL READ_ONLY = 1;
SET GLOBAL EVENT_SCHEDULER = ON;
SET GLOBAL EVENT_SCHEDULER = OFF;
SELECT event_name, last_executed IS NULL, definer FROM INFORMATION_SCHEMA.EVENTS WHERE event_schema = 'events_test';
DROP EVENT e1;
DROP EVENT e2;
SET GLOBAL READ_ONLY = 0;
DROP USER mysqltest_u1@localhost;
drop procedure if exists p;
set @old_mode= @@sql_mode;
set @@sql_mode= cast(pow(2,33)-1 as unsigned integer) & ~0x1003ff00;
create event e1 on schedule every 1 day do select 1;
select @@sql_mode into @full_mode;
set @@sql_mode= @old_mode;
select event_name from information_schema.events where event_name = 'e1' and sql_mode = @full_mode;
drop event e1;
SET @old_server_id = @@GLOBAL.server_id;
SET GLOBAL server_id = (1 << 32) - 1;
SELECT @@GLOBAL.server_id;
CREATE EVENT ev1 ON SCHEDULE EVERY 1 DAY DO SELECT 1;
SELECT event_name, originator FROM INFORMATION_SCHEMA.EVENTS;
DROP EVENT ev1;
SET GLOBAL server_id = @old_server_id;
CREATE DATABASE event_test12;
USE event_test12;
CREATE EVENT ev1 ON SCHEDULE EVERY 1 DAY DO SELECT 1;
CREATE DATABASE event_test1;
USE event_test1;
SHOW EVENTS;
DROP DATABASE event_test1;
DROP DATABASE event_test12;
USE events_test;
SET GLOBAL event_scheduler = ON;
DROP TABLE IF EXISTS table_bug12546938;
DROP EVENT IF EXISTS event_Bug12546938;
CREATE TABLE table_bug12546938 (i INT);
CREATE EVENT event_Bug12546938 ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 SECOND ON COMPLETION PRESERVE ENABLE DO BEGIN  INSERT INTO table_bug12546938 VALUES(1); END ;
CREATE EVENT IF NOT EXISTS event_bug12546938 ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 SECOND ON COMPLETION PRESERVE ENABLE DO BEGIN INSERT INTO table_bug12546938 VALUES (1); END ;
SELECT COUNT(*) FROM table_bug12546938;
DROP EVENT IF EXISTS event_Bug12546938;
DROP TABLE table_bug12546938;
SET GLOBAL EVENT_SCHEDULER = OFF;
DROP DATABASE IF EXISTS event_test11764334;
CREATE DATABASE event_test11764334;
USE event_test11764334;
CREATE EVENT ev1 ON SCHEDULE EVERY 3 SECOND DISABLE DO SELECT 1;
SHOW EVENTS IN event_test11764334 WHERE NAME='ev1';
ALTER EVENT ev1 ON SCHEDULE EVERY 4 SECOND;
SHOW EVENTS IN event_test11764334 WHERE NAME='ev1';
DROP EVENT ev1;
DROP DATABASE event_test11764334;
USE test;
ALTER EVENT e1 ON SCHEDULE EVERY EXISTS (SELECT 1 AS x ORDER BY x LIMIT 0) NOT IN (1) MINUTE_SECOND;
ALTER EVENT e1 ON SCHEDULE EVERY EXISTS (SELECT 1 AS x ORDER BY x LIMIT 0) NOT IN (2) MINUTE_SECOND;
CREATE EVENT e1 ON SCHEDULE EVERY 2 HOUR DO SELECT 1;
ALTER EVENT e1 ON SCHEDULE EVERY EXISTS (SELECT 1 AS x ORDER BY x LIMIT 0) NOT IN (2) MINUTE_SECOND;
DROP EVENT e1;
SET GLOBAL event_scheduler= 'ON';
CREATE TABLE t1(_userid CHAR (1)KEY) ENGINE=InnoDB;
SET @save_autocommit_value= @@global.autocommit;
SET @@global.autocommit= OFF;
SET @@session.TIMESTAMP=200;
CREATE EVENT e1 ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 DAY DO INSERT INTO t1 VALUES(1);
SELECT SLEEP(3);
SET @@global.autocommit=@save_autocommit_value;
SET @@session.TIMESTAMP=default;
DROP TABLE t1;
SET NAMES utf8;
CREATE EVENT cafe ON SCHEDULE EVERY 2 YEAR DO SELECT 1;
CREATE EVENT caf√© ON SCHEDULE EVERY 2 YEAR DO SELECT 1;
CREATE EVENT CAFE ON SCHEDULE EVERY 2 YEAR DO SELECT 1;
SHOW CREATE EVENT CaF√©;
DROP EVENT CaF√©;
CREATE EVENT –æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–¥–ª–∏–Ω–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞_e ON SCHEDULE EVERY 2 YEAR DO SELECT 1;
CREATE EVENT –æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–¥–ª–∏–Ω–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞_√© ON SCHEDULE EVERY 2 YEAR DO SELECT 1;
CREATE EVENT –æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–¥–ª–∏–Ω–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞_E ON SCHEDULE EVERY 2 YEAR DO SELECT 1;
SHOW CREATE EVENT –æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–¥–ª–∏–Ω–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞_√©;
DROP EVENT –æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–æ—á–µ–Ω—å_–¥–ª–∏–Ω–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞_√©;
SET NAMES default;
SET TIMESTAMP= UNIX_TIMESTAMP('2019-08-01 01:20:30');
SET GLOBAL event_scheduler = ON;
SET sql_mode='STRICT_TRANS_TABLES';
SET TIME_ZONE= '+03:00';
CREATE EVENT my_event ON SCHEDULE EVERY 2 SECOND STARTS '2019-08-01 01:20:30'       ENDS   '2034-08-30 01:20:30'     DO DO 1+1;
SELECT TIMESTAMP('2019-08-01 01:20:30') < LAST_EXECUTED FROM INFORMATION_SCHEMA.EVENTS WHERE EVENT_NAME='my_event';
SET TIMESTAMP= UNIX_TIMESTAMP('2019-08-01 01:20:50');
ALTER EVENT my_event COMMENT 'event comment';
SELECT TIMESTAMP('2019-08-01 01:20:50') = TIMESTAMP('2019-08-01 01:20:50');
SELECT (CREATED - TIMESTAMP('2019-08-01 01:20:30')), (LAST_ALTERED - TIMESTAMP('2019-08-01 01:20:50')) FROM INFORMATION_SCHEMA.EVENTS WHERE EVENT_NAME='my_event';
SET TIME_ZONE= '-02:00';
SELECT (CREATED - CONVERT_TZ('2019-08-01 01:20:30', '+03:00', '-02:00')), (LAST_ALTERED - CONVERT_TZ('2019-08-01 01:20:50', '+03:00', '-02:00')) FROM INFORMATION_SCHEMA.EVENTS WHERE EVENT_NAME='my_event';
DROP EVENT my_event;
SET TIME_ZONE=default;
SET TIMESTAMP=default;
DROP DATABASE events_test;
SET GLOBAL event_scheduler= 'ON';
SET @@global.concurrent_insert= @concurrent_insert;
